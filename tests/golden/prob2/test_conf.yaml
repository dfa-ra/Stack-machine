input: |-
  prob2
output: |
  -----------
  binary: 0x004 - 0x0210000000 - lw_from_imm_addr 0x00000010
  0x009 - 0x06 - load_T_a_pop
  0x00a - 0x11 - sw_to_a_addr
  0x00b - 0x42 - ret
  0x00c - 0x020c000000 - lw_from_imm_addr 0x0000000C
  0x011 - 0x06 - load_T_a_pop
  0x012 - 0x03 - lw_from_a_addr
  0x013 - 0x42 - ret
  0x014 - 0x0101000000 - push_imm 0x00000001
  0x019 - 0x1014000000 - sw_to_imm_addr 0x00000014
  0x01e - 0x0200000000 - lw_from_imm_addr 0x00000000
  0x023 - 0x0101000000 - push_imm 0x00000001
  0x028 - 0x30 - over
  0x029 - 0x08 - dup
  0x02a - 0x0214000000 - lw_from_imm_addr 0x00000014
  0x02f - 0x30 - over
  0x030 - 0x21 - -
  0x031 - 0x4402000000 - -if 0x00000002
  0x036 - 0x0100000000 - push_imm 0x00000000
  0x03b - 0x4001000000 - jmp 0x00000001
  0x040 - 0x0101000000 - push_imm 0x00000001
  0x045 - 0x430a000000 - if 0x0000000A
  0x04a - 0x30 - over
  0x04b - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x050 - 0x0214000000 - lw_from_imm_addr 0x00000014
  0x055 - 0x20 - +
  0x056 - 0x1004000000 - sw_to_imm_addr 0x00000004
  0x05b - 0x08 - dup
  0x05c - 0x0214000000 - lw_from_imm_addr 0x00000014
  0x061 - 0x20 - +
  0x062 - 0x1014000000 - sw_to_imm_addr 0x00000014
  0x067 - 0x40ecffffff - jmp 0xFFFFFFEC
  0x06c - 0x16 - pop
  0x06d - 0x16 - pop
  0x06e - 0x42 - ret
  0x06f - 0x0101000000 - push_imm 0x00000001
  0x074 - 0x1018000000 - sw_to_imm_addr 0x00000018
  0x079 - 0x0200000000 - lw_from_imm_addr 0x00000000
  0x07e - 0x0101000000 - push_imm 0x00000001
  0x083 - 0x30 - over
  0x084 - 0x08 - dup
  0x085 - 0x0218000000 - lw_from_imm_addr 0x00000018
  0x08a - 0x30 - over
  0x08b - 0x21 - -
  0x08c - 0x4402000000 - -if 0x00000002
  0x091 - 0x0100000000 - push_imm 0x00000000
  0x096 - 0x4001000000 - jmp 0x00000001
  0x09b - 0x0101000000 - push_imm 0x00000001
  0x0a0 - 0x430e000000 - if 0x0000000E
  0x0a5 - 0x30 - over
  0x0a6 - 0x0218000000 - lw_from_imm_addr 0x00000018
  0x0ab - 0x0218000000 - lw_from_imm_addr 0x00000018
  0x0b0 - 0x22 - *
  0x0b1 - 0x101c000000 - sw_to_imm_addr 0x0000001C
  0x0b6 - 0x0208000000 - lw_from_imm_addr 0x00000008
  0x0bb - 0x021c000000 - lw_from_imm_addr 0x0000001C
  0x0c0 - 0x20 - +
  0x0c1 - 0x1008000000 - sw_to_imm_addr 0x00000008
  0x0c6 - 0x08 - dup
  0x0c7 - 0x0218000000 - lw_from_imm_addr 0x00000018
  0x0cc - 0x20 - +
  0x0cd - 0x1018000000 - sw_to_imm_addr 0x00000018
  0x0d2 - 0x40e8ffffff - jmp 0xFFFFFFE8
  0x0d7 - 0x16 - pop
  0x0d8 - 0x16 - pop
  0x0d9 - 0x42 - ret
  0x0da - 0x41c1ffffff - call 0xFFFFFFC1
  0x0df - 0x1000000000 - sw_to_imm_addr 0x00000000
  0x0e4 - 0x41c3ffffff - call 0xFFFFFFC3
  0x0e9 - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x0ee - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x0f3 - 0x22 - *
  0x0f4 - 0x1004000000 - sw_to_imm_addr 0x00000004
  0x0f9 - 0x41d9ffffff - call 0xFFFFFFD9
  0x0fe - 0x0208000000 - lw_from_imm_addr 0x00000008
  0x103 - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x108 - 0x21 - -
  0x109 - 0x1000000000 - sw_to_imm_addr 0x00000000
  0x10e - 0x0200000000 - lw_from_imm_addr 0x00000000
  0x113 - 0x41b0ffffff - call 0xFFFFFFB0
  0x118 - 0x45 - halt
  -----------
  Command: call -63
  Step-by-step: tick: 1 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x0 || B: -0x3f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 2 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 3 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 4 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: ret
  Step-by-step: tick: 5 || microcode - cpu: restore_pc || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: sw_to_imm_addr 0
  Step-by-step: tick: 6 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: call -61
  Step-by-step: tick: 7 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x80 || B: -0x3d 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 8 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 9 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 0
  Step-by-step: tick: 10 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: push_imm 1
  Step-by-step: tick: 11 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 12 || microcode - cpu: over || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 13 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 14 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 1]
  Command: over
  Step-by-step: tick: 15 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1, 100]
  Command: -
  Step-by-step: tick: 16 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 99]
  Command: -if 2
  Step-by-step: tick: 17 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 18 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 19 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 20 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 21 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 22 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 0, 1]
  Command: +
  Step-by-step: tick: 23 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 24 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 25 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 26 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 1]
  Command: +
  Step-by-step: tick: 27 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 28 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 29 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 30 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 31 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 32 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 2]
  Command: over
  Step-by-step: tick: 33 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 2, 100]
  Command: -
  Step-by-step: tick: 34 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 98]
  Command: -if 2
  Step-by-step: tick: 35 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 36 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 37 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 38 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 39 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 40 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 2]
  Command: +
  Step-by-step: tick: 41 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 42 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 43 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 44 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 2]
  Command: +
  Step-by-step: tick: 45 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 46 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 47 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 48 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 49 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 50 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 3]
  Command: over
  Step-by-step: tick: 51 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 3, 100]
  Command: -
  Step-by-step: tick: 52 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 97]
  Command: -if 2
  Step-by-step: tick: 53 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 54 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 55 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 56 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 57 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 58 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3, 3]
  Command: +
  Step-by-step: tick: 59 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 60 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 61 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 62 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 3]
  Command: +
  Step-by-step: tick: 63 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 64 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 65 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 66 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 67 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 68 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 4]
  Command: over
  Step-by-step: tick: 69 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 4, 100]
  Command: -
  Step-by-step: tick: 70 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 96]
  Command: -if 2
  Step-by-step: tick: 71 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 72 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 73 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 74 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 75 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 76 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6, 4]
  Command: +
  Step-by-step: tick: 77 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 78 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 79 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 80 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 4]
  Command: +
  Step-by-step: tick: 81 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 82 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 83 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 84 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 85 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 86 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 5]
  Command: over
  Step-by-step: tick: 87 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 5, 100]
  Command: -
  Step-by-step: tick: 88 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 95]
  Command: -if 2
  Step-by-step: tick: 89 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 90 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 91 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 92 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 93 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 94 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10, 5]
  Command: +
  Step-by-step: tick: 95 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 15]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 96 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 97 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 98 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 5]
  Command: +
  Step-by-step: tick: 99 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 100 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 101 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 102 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 103 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 104 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 6]
  Command: over
  Step-by-step: tick: 105 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 6, 100]
  Command: -
  Step-by-step: tick: 106 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 94]
  Command: -if 2
  Step-by-step: tick: 107 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 108 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 109 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 110 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 111 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 15]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 112 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 15, 6]
  Command: +
  Step-by-step: tick: 113 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 21]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 114 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 115 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 116 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 6]
  Command: +
  Step-by-step: tick: 117 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 118 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 119 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 120 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 121 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 122 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 7]
  Command: over
  Step-by-step: tick: 123 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 7, 100]
  Command: -
  Step-by-step: tick: 124 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 93]
  Command: -if 2
  Step-by-step: tick: 125 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 126 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 127 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 128 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 129 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 21]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 130 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 21, 7]
  Command: +
  Step-by-step: tick: 131 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 28]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 132 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 133 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 134 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 7]
  Command: +
  Step-by-step: tick: 135 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 136 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 137 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 138 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 139 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 140 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 8]
  Command: over
  Step-by-step: tick: 141 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 8, 100]
  Command: -
  Step-by-step: tick: 142 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 92]
  Command: -if 2
  Step-by-step: tick: 143 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 144 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 145 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 146 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 147 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 28]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 148 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 28, 8]
  Command: +
  Step-by-step: tick: 149 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 150 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 151 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 152 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 8]
  Command: +
  Step-by-step: tick: 153 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 154 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 155 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 156 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 157 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 158 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 9]
  Command: over
  Step-by-step: tick: 159 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 9, 100]
  Command: -
  Step-by-step: tick: 160 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 91]
  Command: -if 2
  Step-by-step: tick: 161 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 162 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 163 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 164 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 165 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 166 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36, 9]
  Command: +
  Step-by-step: tick: 167 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 168 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 169 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 170 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 9]
  Command: +
  Step-by-step: tick: 171 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 172 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 173 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 174 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 175 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 176 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 10]
  Command: over
  Step-by-step: tick: 177 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 10, 100]
  Command: -
  Step-by-step: tick: 178 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 90]
  Command: -if 2
  Step-by-step: tick: 179 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 180 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 181 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 182 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 183 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 184 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45, 10]
  Command: +
  Step-by-step: tick: 185 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 186 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 187 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 188 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 10]
  Command: +
  Step-by-step: tick: 189 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 11]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 190 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 191 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 192 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 193 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 194 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 11]
  Command: over
  Step-by-step: tick: 195 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 11, 100]
  Command: -
  Step-by-step: tick: 196 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 89]
  Command: -if 2
  Step-by-step: tick: 197 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 198 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 199 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 200 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 201 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 202 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55, 11]
  Command: +
  Step-by-step: tick: 203 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 204 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 205 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 206 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 11]
  Command: +
  Step-by-step: tick: 207 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 12]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 208 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 209 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 210 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 211 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 212 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 12]
  Command: over
  Step-by-step: tick: 213 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 12, 100]
  Command: -
  Step-by-step: tick: 214 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 88]
  Command: -if 2
  Step-by-step: tick: 215 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 216 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 217 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 218 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 219 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 220 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66, 12]
  Command: +
  Step-by-step: tick: 221 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 78]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 222 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 223 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 224 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 12]
  Command: +
  Step-by-step: tick: 225 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 13]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 226 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 227 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 228 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 229 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 230 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 13]
  Command: over
  Step-by-step: tick: 231 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 13, 100]
  Command: -
  Step-by-step: tick: 232 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 87]
  Command: -if 2
  Step-by-step: tick: 233 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 234 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 235 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 236 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 237 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 78]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 238 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 78, 13]
  Command: +
  Step-by-step: tick: 239 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 240 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 241 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 242 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 13]
  Command: +
  Step-by-step: tick: 243 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 244 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 245 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 246 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 247 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 248 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 14]
  Command: over
  Step-by-step: tick: 249 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 14, 100]
  Command: -
  Step-by-step: tick: 250 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 86]
  Command: -if 2
  Step-by-step: tick: 251 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 252 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 253 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 254 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 255 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 256 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91, 14]
  Command: +
  Step-by-step: tick: 257 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 105]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 258 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 259 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 260 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 14]
  Command: +
  Step-by-step: tick: 261 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 15]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 262 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 263 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 264 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 265 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 266 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 15]
  Command: over
  Step-by-step: tick: 267 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 15, 100]
  Command: -
  Step-by-step: tick: 268 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 85]
  Command: -if 2
  Step-by-step: tick: 269 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 270 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 271 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 272 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 273 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 105]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 274 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 105, 15]
  Command: +
  Step-by-step: tick: 275 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 120]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 276 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 277 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 278 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 15]
  Command: +
  Step-by-step: tick: 279 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 280 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 281 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 282 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 283 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 284 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 16]
  Command: over
  Step-by-step: tick: 285 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 16, 100]
  Command: -
  Step-by-step: tick: 286 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 84]
  Command: -if 2
  Step-by-step: tick: 287 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 288 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 289 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 290 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 291 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 120]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 292 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 120, 16]
  Command: +
  Step-by-step: tick: 293 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 136]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 294 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 295 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 296 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 16]
  Command: +
  Step-by-step: tick: 297 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 17]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 298 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 299 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 300 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 301 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 302 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 17]
  Command: over
  Step-by-step: tick: 303 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 17, 100]
  Command: -
  Step-by-step: tick: 304 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 83]
  Command: -if 2
  Step-by-step: tick: 305 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 306 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 307 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 308 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 309 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 136]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 310 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 136, 17]
  Command: +
  Step-by-step: tick: 311 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 153]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 312 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 313 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 314 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 17]
  Command: +
  Step-by-step: tick: 315 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 18]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 316 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 317 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 318 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 319 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 320 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 18]
  Command: over
  Step-by-step: tick: 321 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 18, 100]
  Command: -
  Step-by-step: tick: 322 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 82]
  Command: -if 2
  Step-by-step: tick: 323 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 324 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 325 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 326 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 327 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 153]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 328 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 153, 18]
  Command: +
  Step-by-step: tick: 329 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 171]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 330 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 331 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 332 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 18]
  Command: +
  Step-by-step: tick: 333 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 19]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 334 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 335 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 336 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 337 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 338 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 19]
  Command: over
  Step-by-step: tick: 339 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 19, 100]
  Command: -
  Step-by-step: tick: 340 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 81]
  Command: -if 2
  Step-by-step: tick: 341 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 342 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 343 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 344 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 345 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 171]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 346 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 171, 19]
  Command: +
  Step-by-step: tick: 347 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 190]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 348 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 349 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 350 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 19]
  Command: +
  Step-by-step: tick: 351 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 20]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 352 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 353 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 354 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 355 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 356 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 20]
  Command: over
  Step-by-step: tick: 357 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 20, 100]
  Command: -
  Step-by-step: tick: 358 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 80]
  Command: -if 2
  Step-by-step: tick: 359 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 360 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 361 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 362 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 363 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 190]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 364 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 190, 20]
  Command: +
  Step-by-step: tick: 365 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 210]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 366 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 367 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 368 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 20]
  Command: +
  Step-by-step: tick: 369 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 21]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 370 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 371 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 372 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 373 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 374 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 21]
  Command: over
  Step-by-step: tick: 375 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 21, 100]
  Command: -
  Step-by-step: tick: 376 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 79]
  Command: -if 2
  Step-by-step: tick: 377 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 378 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 379 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 380 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 381 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 210]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 382 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 210, 21]
  Command: +
  Step-by-step: tick: 383 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 231]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 384 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 385 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 386 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 21]
  Command: +
  Step-by-step: tick: 387 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 22]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 388 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 389 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 390 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 391 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 392 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 22]
  Command: over
  Step-by-step: tick: 393 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 22, 100]
  Command: -
  Step-by-step: tick: 394 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 78]
  Command: -if 2
  Step-by-step: tick: 395 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 396 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 397 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 398 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 399 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 231]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 400 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 231, 22]
  Command: +
  Step-by-step: tick: 401 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 253]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 402 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 403 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 404 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 22]
  Command: +
  Step-by-step: tick: 405 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 23]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 406 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 407 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 408 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 409 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 410 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 23]
  Command: over
  Step-by-step: tick: 411 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 23, 100]
  Command: -
  Step-by-step: tick: 412 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 77]
  Command: -if 2
  Step-by-step: tick: 413 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 414 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 415 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 416 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 417 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 253]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 418 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 253, 23]
  Command: +
  Step-by-step: tick: 419 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 276]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 420 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 421 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 422 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 23]
  Command: +
  Step-by-step: tick: 423 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 24]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 424 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 425 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 426 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 427 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 428 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 24]
  Command: over
  Step-by-step: tick: 429 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 24, 100]
  Command: -
  Step-by-step: tick: 430 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 76]
  Command: -if 2
  Step-by-step: tick: 431 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 432 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 433 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 434 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 435 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 276]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 436 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 276, 24]
  Command: +
  Step-by-step: tick: 437 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 300]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 438 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 439 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 440 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 24]
  Command: +
  Step-by-step: tick: 441 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 442 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 443 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 444 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 445 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 446 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 25]
  Command: over
  Step-by-step: tick: 447 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 25, 100]
  Command: -
  Step-by-step: tick: 448 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 75]
  Command: -if 2
  Step-by-step: tick: 449 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 450 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 451 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 452 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 453 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 300]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 454 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 300, 25]
  Command: +
  Step-by-step: tick: 455 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 325]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 456 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 457 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 458 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 25]
  Command: +
  Step-by-step: tick: 459 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 26]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 460 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 461 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 462 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 463 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 464 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 26]
  Command: over
  Step-by-step: tick: 465 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 26, 100]
  Command: -
  Step-by-step: tick: 466 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 74]
  Command: -if 2
  Step-by-step: tick: 467 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 468 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 469 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 470 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 471 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 325]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 472 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 325, 26]
  Command: +
  Step-by-step: tick: 473 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 351]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 474 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 475 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 476 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 26]
  Command: +
  Step-by-step: tick: 477 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 27]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 478 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 479 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 480 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 481 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 482 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 27]
  Command: over
  Step-by-step: tick: 483 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 27, 100]
  Command: -
  Step-by-step: tick: 484 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 73]
  Command: -if 2
  Step-by-step: tick: 485 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 486 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 487 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 488 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 489 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 351]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 490 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 351, 27]
  Command: +
  Step-by-step: tick: 491 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 378]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 492 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 493 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 494 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 27]
  Command: +
  Step-by-step: tick: 495 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 28]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 496 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 497 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 498 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 499 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 500 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 28]
  Command: over
  Step-by-step: tick: 501 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 28, 100]
  Command: -
  Step-by-step: tick: 502 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 72]
  Command: -if 2
  Step-by-step: tick: 503 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 504 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 505 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 506 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 507 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 378]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 508 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 378, 28]
  Command: +
  Step-by-step: tick: 509 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 406]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 510 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 511 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 512 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 28]
  Command: +
  Step-by-step: tick: 513 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 29]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 514 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 515 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 516 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 517 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 518 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 29]
  Command: over
  Step-by-step: tick: 519 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 29, 100]
  Command: -
  Step-by-step: tick: 520 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 71]
  Command: -if 2
  Step-by-step: tick: 521 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 522 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 523 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 524 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 525 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 406]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 526 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 406, 29]
  Command: +
  Step-by-step: tick: 527 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 435]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 528 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 529 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 530 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 29]
  Command: +
  Step-by-step: tick: 531 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 30]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 532 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 533 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 534 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 535 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 536 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 30]
  Command: over
  Step-by-step: tick: 537 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 30, 100]
  Command: -
  Step-by-step: tick: 538 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 70]
  Command: -if 2
  Step-by-step: tick: 539 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 540 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 541 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 542 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 543 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 435]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 544 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 435, 30]
  Command: +
  Step-by-step: tick: 545 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 465]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 546 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 547 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 548 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 30]
  Command: +
  Step-by-step: tick: 549 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 31]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 550 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 551 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 552 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 553 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 554 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 31]
  Command: over
  Step-by-step: tick: 555 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 31, 100]
  Command: -
  Step-by-step: tick: 556 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 69]
  Command: -if 2
  Step-by-step: tick: 557 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 558 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 559 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 560 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 561 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 465]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 562 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 465, 31]
  Command: +
  Step-by-step: tick: 563 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 496]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 564 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 565 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 566 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 31]
  Command: +
  Step-by-step: tick: 567 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 32]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 568 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 569 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 570 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 571 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 572 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 32]
  Command: over
  Step-by-step: tick: 573 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 32, 100]
  Command: -
  Step-by-step: tick: 574 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 68]
  Command: -if 2
  Step-by-step: tick: 575 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 576 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 577 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 578 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 579 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 496]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 580 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 496, 32]
  Command: +
  Step-by-step: tick: 581 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 528]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 582 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 583 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 584 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 32]
  Command: +
  Step-by-step: tick: 585 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 33]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 586 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 587 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 588 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 589 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 590 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 33]
  Command: over
  Step-by-step: tick: 591 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 33, 100]
  Command: -
  Step-by-step: tick: 592 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 67]
  Command: -if 2
  Step-by-step: tick: 593 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 594 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 595 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 596 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 597 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 528]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 598 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 528, 33]
  Command: +
  Step-by-step: tick: 599 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 561]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 600 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 601 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 602 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 33]
  Command: +
  Step-by-step: tick: 603 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 34]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 604 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 605 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 606 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 607 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 608 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 34]
  Command: over
  Step-by-step: tick: 609 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 34, 100]
  Command: -
  Step-by-step: tick: 610 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 66]
  Command: -if 2
  Step-by-step: tick: 611 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 612 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 613 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 614 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 615 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 561]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 616 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 561, 34]
  Command: +
  Step-by-step: tick: 617 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 595]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 618 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 619 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 620 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 34]
  Command: +
  Step-by-step: tick: 621 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 35]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 622 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 623 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 624 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 625 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 626 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 35]
  Command: over
  Step-by-step: tick: 627 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 35, 100]
  Command: -
  Step-by-step: tick: 628 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 65]
  Command: -if 2
  Step-by-step: tick: 629 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 630 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 631 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 632 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 633 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 595]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 634 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 595, 35]
  Command: +
  Step-by-step: tick: 635 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 630]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 636 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 637 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 638 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 35]
  Command: +
  Step-by-step: tick: 639 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 640 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 641 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 642 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 643 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 644 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 36]
  Command: over
  Step-by-step: tick: 645 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 36, 100]
  Command: -
  Step-by-step: tick: 646 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 64]
  Command: -if 2
  Step-by-step: tick: 647 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 648 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 649 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 650 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 651 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 630]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 652 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 630, 36]
  Command: +
  Step-by-step: tick: 653 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 666]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 654 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 655 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 656 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 36]
  Command: +
  Step-by-step: tick: 657 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 37]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 658 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 659 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 660 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 661 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 662 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 37]
  Command: over
  Step-by-step: tick: 663 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 37, 100]
  Command: -
  Step-by-step: tick: 664 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 63]
  Command: -if 2
  Step-by-step: tick: 665 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 666 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 667 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 668 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 669 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 666]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 670 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 666, 37]
  Command: +
  Step-by-step: tick: 671 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 703]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 672 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 673 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 674 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 37]
  Command: +
  Step-by-step: tick: 675 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 38]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 676 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 677 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 678 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 679 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 680 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 38]
  Command: over
  Step-by-step: tick: 681 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 38, 100]
  Command: -
  Step-by-step: tick: 682 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 62]
  Command: -if 2
  Step-by-step: tick: 683 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 684 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 685 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 686 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 687 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 703]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 688 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 703, 38]
  Command: +
  Step-by-step: tick: 689 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 741]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 690 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 691 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 692 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 38]
  Command: +
  Step-by-step: tick: 693 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 39]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 694 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 695 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 696 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 697 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 698 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 39]
  Command: over
  Step-by-step: tick: 699 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 39, 100]
  Command: -
  Step-by-step: tick: 700 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 61]
  Command: -if 2
  Step-by-step: tick: 701 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 702 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 703 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 704 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 705 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 741]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 706 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 741, 39]
  Command: +
  Step-by-step: tick: 707 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 780]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 708 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 709 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 710 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 39]
  Command: +
  Step-by-step: tick: 711 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 40]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 712 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 713 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 714 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 715 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 716 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 40]
  Command: over
  Step-by-step: tick: 717 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 40, 100]
  Command: -
  Step-by-step: tick: 718 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 60]
  Command: -if 2
  Step-by-step: tick: 719 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 720 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 721 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 722 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 723 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 780]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 724 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 780, 40]
  Command: +
  Step-by-step: tick: 725 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 820]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 726 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 727 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 728 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 40]
  Command: +
  Step-by-step: tick: 729 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 41]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 730 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 731 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 732 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 733 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 734 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 41]
  Command: over
  Step-by-step: tick: 735 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 41, 100]
  Command: -
  Step-by-step: tick: 736 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 59]
  Command: -if 2
  Step-by-step: tick: 737 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 738 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 739 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 740 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 741 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 820]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 742 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 820, 41]
  Command: +
  Step-by-step: tick: 743 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 861]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 744 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 745 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 746 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 41]
  Command: +
  Step-by-step: tick: 747 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 42]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 748 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 749 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 750 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 751 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 752 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 42]
  Command: over
  Step-by-step: tick: 753 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 42, 100]
  Command: -
  Step-by-step: tick: 754 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 58]
  Command: -if 2
  Step-by-step: tick: 755 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 756 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 757 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 758 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 759 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 861]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 760 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 861, 42]
  Command: +
  Step-by-step: tick: 761 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 903]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 762 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 763 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 764 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 42]
  Command: +
  Step-by-step: tick: 765 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 43]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 766 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 767 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 768 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 769 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 770 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 43]
  Command: over
  Step-by-step: tick: 771 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 43, 100]
  Command: -
  Step-by-step: tick: 772 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 57]
  Command: -if 2
  Step-by-step: tick: 773 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 774 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 775 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 776 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 777 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 903]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 778 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 903, 43]
  Command: +
  Step-by-step: tick: 779 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 946]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 780 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 781 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 782 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 43]
  Command: +
  Step-by-step: tick: 783 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 44]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 784 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 785 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 786 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 787 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 788 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 44]
  Command: over
  Step-by-step: tick: 789 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 44, 100]
  Command: -
  Step-by-step: tick: 790 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 56]
  Command: -if 2
  Step-by-step: tick: 791 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 792 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 793 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 794 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 795 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 946]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 796 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 946, 44]
  Command: +
  Step-by-step: tick: 797 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 990]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 798 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 799 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 800 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 44]
  Command: +
  Step-by-step: tick: 801 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 802 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 803 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 804 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 805 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 806 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 45]
  Command: over
  Step-by-step: tick: 807 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 45, 100]
  Command: -
  Step-by-step: tick: 808 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 55]
  Command: -if 2
  Step-by-step: tick: 809 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 810 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 811 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 812 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 813 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 990]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 814 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 990, 45]
  Command: +
  Step-by-step: tick: 815 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1035]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 816 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 817 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 818 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 45]
  Command: +
  Step-by-step: tick: 819 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 46]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 820 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 821 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 822 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 823 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 824 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 46]
  Command: over
  Step-by-step: tick: 825 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 46, 100]
  Command: -
  Step-by-step: tick: 826 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 54]
  Command: -if 2
  Step-by-step: tick: 827 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 828 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 829 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 830 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 831 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1035]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 832 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1035, 46]
  Command: +
  Step-by-step: tick: 833 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1081]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 834 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 835 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 836 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 46]
  Command: +
  Step-by-step: tick: 837 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 47]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 838 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 839 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 840 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 841 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 842 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 47]
  Command: over
  Step-by-step: tick: 843 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 47, 100]
  Command: -
  Step-by-step: tick: 844 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 53]
  Command: -if 2
  Step-by-step: tick: 845 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 846 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 847 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 848 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 849 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1081]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 850 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1081, 47]
  Command: +
  Step-by-step: tick: 851 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1128]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 852 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 853 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 854 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 47]
  Command: +
  Step-by-step: tick: 855 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 48]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 856 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 857 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 858 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 859 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 860 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 48]
  Command: over
  Step-by-step: tick: 861 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 48, 100]
  Command: -
  Step-by-step: tick: 862 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 52]
  Command: -if 2
  Step-by-step: tick: 863 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 864 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 865 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 866 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 867 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1128]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 868 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1128, 48]
  Command: +
  Step-by-step: tick: 869 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1176]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 870 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 871 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 872 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 48]
  Command: +
  Step-by-step: tick: 873 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 49]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 874 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 875 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 876 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 877 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 878 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 49]
  Command: over
  Step-by-step: tick: 879 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 49, 100]
  Command: -
  Step-by-step: tick: 880 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 51]
  Command: -if 2
  Step-by-step: tick: 881 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 882 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 883 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 884 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 885 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1176]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 886 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1176, 49]
  Command: +
  Step-by-step: tick: 887 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1225]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 888 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 889 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 890 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 49]
  Command: +
  Step-by-step: tick: 891 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 50]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 892 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 893 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 894 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 895 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 896 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 50]
  Command: over
  Step-by-step: tick: 897 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 50, 100]
  Command: -
  Step-by-step: tick: 898 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 50]
  Command: -if 2
  Step-by-step: tick: 899 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 900 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 901 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 902 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 903 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1225]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 904 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1225, 50]
  Command: +
  Step-by-step: tick: 905 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1275]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 906 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 907 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 908 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 50]
  Command: +
  Step-by-step: tick: 909 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 51]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 910 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 911 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 912 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 913 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 914 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 51]
  Command: over
  Step-by-step: tick: 915 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 51, 100]
  Command: -
  Step-by-step: tick: 916 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 49]
  Command: -if 2
  Step-by-step: tick: 917 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 918 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 919 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 920 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 921 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1275]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 922 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1275, 51]
  Command: +
  Step-by-step: tick: 923 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1326]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 924 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 925 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 926 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 51]
  Command: +
  Step-by-step: tick: 927 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 52]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 928 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 929 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 930 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 931 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 932 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 52]
  Command: over
  Step-by-step: tick: 933 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 52, 100]
  Command: -
  Step-by-step: tick: 934 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 48]
  Command: -if 2
  Step-by-step: tick: 935 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 936 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 937 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 938 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 939 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1326]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 940 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1326, 52]
  Command: +
  Step-by-step: tick: 941 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1378]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 942 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 943 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 944 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 52]
  Command: +
  Step-by-step: tick: 945 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 53]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 946 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 947 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 948 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 949 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 950 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 53]
  Command: over
  Step-by-step: tick: 951 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 53, 100]
  Command: -
  Step-by-step: tick: 952 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 47]
  Command: -if 2
  Step-by-step: tick: 953 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 954 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 955 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 956 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 957 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1378]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 958 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1378, 53]
  Command: +
  Step-by-step: tick: 959 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1431]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 960 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 961 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 962 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 53]
  Command: +
  Step-by-step: tick: 963 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 54]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 964 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 965 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 966 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 967 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 968 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 54]
  Command: over
  Step-by-step: tick: 969 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 54, 100]
  Command: -
  Step-by-step: tick: 970 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 46]
  Command: -if 2
  Step-by-step: tick: 971 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 972 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 973 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 974 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 975 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1431]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 976 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1431, 54]
  Command: +
  Step-by-step: tick: 977 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1485]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 978 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 979 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 980 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 54]
  Command: +
  Step-by-step: tick: 981 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 982 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 983 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 984 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 985 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 986 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 55]
  Command: over
  Step-by-step: tick: 987 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 55, 100]
  Command: -
  Step-by-step: tick: 988 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 45]
  Command: -if 2
  Step-by-step: tick: 989 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 990 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 991 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 992 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 993 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1485]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 994 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1485, 55]
  Command: +
  Step-by-step: tick: 995 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1540]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 996 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 997 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 998 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 55]
  Command: +
  Step-by-step: tick: 999 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 56]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1000 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1001 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1002 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1003 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1004 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 56]
  Command: over
  Step-by-step: tick: 1005 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 56, 100]
  Command: -
  Step-by-step: tick: 1006 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 44]
  Command: -if 2
  Step-by-step: tick: 1007 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1008 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1009 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1010 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1011 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1540]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1012 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1540, 56]
  Command: +
  Step-by-step: tick: 1013 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1596]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1014 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1015 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1016 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 56]
  Command: +
  Step-by-step: tick: 1017 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 57]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1018 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1019 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1020 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1021 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1022 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 57]
  Command: over
  Step-by-step: tick: 1023 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 57, 100]
  Command: -
  Step-by-step: tick: 1024 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 43]
  Command: -if 2
  Step-by-step: tick: 1025 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1026 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1027 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1028 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1029 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1596]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1030 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1596, 57]
  Command: +
  Step-by-step: tick: 1031 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1653]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1032 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1033 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1034 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 57]
  Command: +
  Step-by-step: tick: 1035 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 58]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1036 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1037 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1038 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1039 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1040 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 58]
  Command: over
  Step-by-step: tick: 1041 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 58, 100]
  Command: -
  Step-by-step: tick: 1042 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 42]
  Command: -if 2
  Step-by-step: tick: 1043 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1044 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1045 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1046 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1047 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1653]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1048 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1653, 58]
  Command: +
  Step-by-step: tick: 1049 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1711]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1050 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1051 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1052 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 58]
  Command: +
  Step-by-step: tick: 1053 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 59]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1054 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1055 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1056 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1057 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1058 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 59]
  Command: over
  Step-by-step: tick: 1059 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 59, 100]
  Command: -
  Step-by-step: tick: 1060 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 41]
  Command: -if 2
  Step-by-step: tick: 1061 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1062 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1063 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1064 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1065 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1711]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1066 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1711, 59]
  Command: +
  Step-by-step: tick: 1067 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1770]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1068 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1069 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1070 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 59]
  Command: +
  Step-by-step: tick: 1071 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 60]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1072 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1073 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1074 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1075 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1076 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 60]
  Command: over
  Step-by-step: tick: 1077 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 60, 100]
  Command: -
  Step-by-step: tick: 1078 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 40]
  Command: -if 2
  Step-by-step: tick: 1079 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1080 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1081 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1082 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1083 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1770]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1084 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1770, 60]
  Command: +
  Step-by-step: tick: 1085 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1830]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1086 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1087 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1088 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 60]
  Command: +
  Step-by-step: tick: 1089 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 61]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1090 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1091 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1092 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1093 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1094 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 61]
  Command: over
  Step-by-step: tick: 1095 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 61, 100]
  Command: -
  Step-by-step: tick: 1096 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 39]
  Command: -if 2
  Step-by-step: tick: 1097 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1098 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1099 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1100 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1101 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1830]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1102 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1830, 61]
  Command: +
  Step-by-step: tick: 1103 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1891]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1104 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1105 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1106 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 61]
  Command: +
  Step-by-step: tick: 1107 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 62]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1108 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1109 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1110 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1111 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1112 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 62]
  Command: over
  Step-by-step: tick: 1113 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 62, 100]
  Command: -
  Step-by-step: tick: 1114 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 38]
  Command: -if 2
  Step-by-step: tick: 1115 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1116 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1117 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1118 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1119 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1891]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1120 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1891, 62]
  Command: +
  Step-by-step: tick: 1121 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1953]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1122 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1123 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1124 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 62]
  Command: +
  Step-by-step: tick: 1125 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 63]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1126 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1127 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1128 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1129 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1130 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 63]
  Command: over
  Step-by-step: tick: 1131 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 63, 100]
  Command: -
  Step-by-step: tick: 1132 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 37]
  Command: -if 2
  Step-by-step: tick: 1133 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1134 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1135 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1136 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1137 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1953]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1138 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1953, 63]
  Command: +
  Step-by-step: tick: 1139 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2016]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1140 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1141 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1142 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 63]
  Command: +
  Step-by-step: tick: 1143 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 64]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1144 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1145 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1146 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1147 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1148 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 64]
  Command: over
  Step-by-step: tick: 1149 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 64, 100]
  Command: -
  Step-by-step: tick: 1150 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 36]
  Command: -if 2
  Step-by-step: tick: 1151 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1152 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1153 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1154 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1155 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2016]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1156 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2016, 64]
  Command: +
  Step-by-step: tick: 1157 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2080]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1158 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1159 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1160 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 64]
  Command: +
  Step-by-step: tick: 1161 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 65]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1162 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1163 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1164 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1165 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1166 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 65]
  Command: over
  Step-by-step: tick: 1167 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 65, 100]
  Command: -
  Step-by-step: tick: 1168 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 35]
  Command: -if 2
  Step-by-step: tick: 1169 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1170 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1171 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1172 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1173 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2080]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1174 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2080, 65]
  Command: +
  Step-by-step: tick: 1175 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2145]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1176 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1177 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1178 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 65]
  Command: +
  Step-by-step: tick: 1179 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1180 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1181 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1182 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1183 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1184 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 66]
  Command: over
  Step-by-step: tick: 1185 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 66, 100]
  Command: -
  Step-by-step: tick: 1186 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 34]
  Command: -if 2
  Step-by-step: tick: 1187 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1188 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1189 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1190 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1191 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2145]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1192 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2145, 66]
  Command: +
  Step-by-step: tick: 1193 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2211]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1194 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1195 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1196 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 66]
  Command: +
  Step-by-step: tick: 1197 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 67]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1198 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1199 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1200 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1201 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1202 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 67]
  Command: over
  Step-by-step: tick: 1203 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 67, 100]
  Command: -
  Step-by-step: tick: 1204 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 33]
  Command: -if 2
  Step-by-step: tick: 1205 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1206 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1207 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1208 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1209 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2211]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1210 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2211, 67]
  Command: +
  Step-by-step: tick: 1211 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2278]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1212 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1213 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1214 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 67]
  Command: +
  Step-by-step: tick: 1215 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 68]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1216 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1217 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1218 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1219 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1220 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 68]
  Command: over
  Step-by-step: tick: 1221 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 68, 100]
  Command: -
  Step-by-step: tick: 1222 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 32]
  Command: -if 2
  Step-by-step: tick: 1223 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1224 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1225 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1226 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1227 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2278]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1228 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2278, 68]
  Command: +
  Step-by-step: tick: 1229 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2346]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1230 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1231 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1232 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 68]
  Command: +
  Step-by-step: tick: 1233 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 69]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1234 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1235 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1236 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1237 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1238 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 69]
  Command: over
  Step-by-step: tick: 1239 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 69, 100]
  Command: -
  Step-by-step: tick: 1240 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 31]
  Command: -if 2
  Step-by-step: tick: 1241 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1242 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1243 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1244 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1245 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2346]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1246 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2346, 69]
  Command: +
  Step-by-step: tick: 1247 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2415]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1248 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1249 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1250 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 69]
  Command: +
  Step-by-step: tick: 1251 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 70]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1252 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1253 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1254 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1255 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1256 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 70]
  Command: over
  Step-by-step: tick: 1257 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 70, 100]
  Command: -
  Step-by-step: tick: 1258 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 30]
  Command: -if 2
  Step-by-step: tick: 1259 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1260 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1261 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1262 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1263 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2415]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1264 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2415, 70]
  Command: +
  Step-by-step: tick: 1265 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2485]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1266 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1267 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1268 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 70]
  Command: +
  Step-by-step: tick: 1269 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 71]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1270 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1271 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1272 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1273 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1274 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 71]
  Command: over
  Step-by-step: tick: 1275 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 71, 100]
  Command: -
  Step-by-step: tick: 1276 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 29]
  Command: -if 2
  Step-by-step: tick: 1277 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1278 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1279 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1280 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1281 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2485]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1282 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2485, 71]
  Command: +
  Step-by-step: tick: 1283 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2556]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1284 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1285 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1286 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 71]
  Command: +
  Step-by-step: tick: 1287 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 72]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1288 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1289 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1290 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1291 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1292 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 72]
  Command: over
  Step-by-step: tick: 1293 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 72, 100]
  Command: -
  Step-by-step: tick: 1294 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 28]
  Command: -if 2
  Step-by-step: tick: 1295 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1296 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1297 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1298 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1299 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2556]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1300 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2556, 72]
  Command: +
  Step-by-step: tick: 1301 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2628]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1302 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1303 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1304 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 72]
  Command: +
  Step-by-step: tick: 1305 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 73]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1306 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1307 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1308 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1309 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1310 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 73]
  Command: over
  Step-by-step: tick: 1311 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 73, 100]
  Command: -
  Step-by-step: tick: 1312 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 27]
  Command: -if 2
  Step-by-step: tick: 1313 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1314 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1315 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1316 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1317 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2628]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1318 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2628, 73]
  Command: +
  Step-by-step: tick: 1319 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2701]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1320 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1321 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1322 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 73]
  Command: +
  Step-by-step: tick: 1323 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 74]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1324 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1325 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1326 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1327 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1328 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 74]
  Command: over
  Step-by-step: tick: 1329 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 74, 100]
  Command: -
  Step-by-step: tick: 1330 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 26]
  Command: -if 2
  Step-by-step: tick: 1331 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1332 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1333 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1334 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1335 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2701]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1336 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2701, 74]
  Command: +
  Step-by-step: tick: 1337 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2775]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1338 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1339 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1340 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 74]
  Command: +
  Step-by-step: tick: 1341 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 75]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1342 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1343 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1344 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1345 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1346 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 75]
  Command: over
  Step-by-step: tick: 1347 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 75, 100]
  Command: -
  Step-by-step: tick: 1348 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 25]
  Command: -if 2
  Step-by-step: tick: 1349 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1350 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1351 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1352 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1353 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2775]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1354 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2775, 75]
  Command: +
  Step-by-step: tick: 1355 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2850]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1356 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1357 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1358 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 75]
  Command: +
  Step-by-step: tick: 1359 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 76]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1360 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1361 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1362 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1363 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1364 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 76]
  Command: over
  Step-by-step: tick: 1365 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 76, 100]
  Command: -
  Step-by-step: tick: 1366 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 24]
  Command: -if 2
  Step-by-step: tick: 1367 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1368 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1369 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1370 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1371 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2850]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1372 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2850, 76]
  Command: +
  Step-by-step: tick: 1373 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2926]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1374 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1375 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1376 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 76]
  Command: +
  Step-by-step: tick: 1377 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 77]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1378 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1379 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1380 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1381 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1382 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 77]
  Command: over
  Step-by-step: tick: 1383 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 77, 100]
  Command: -
  Step-by-step: tick: 1384 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 23]
  Command: -if 2
  Step-by-step: tick: 1385 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1386 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1387 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1388 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1389 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2926]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1390 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2926, 77]
  Command: +
  Step-by-step: tick: 1391 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3003]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1392 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1393 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1394 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 77]
  Command: +
  Step-by-step: tick: 1395 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 78]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1396 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1397 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1398 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1399 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1400 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 78]
  Command: over
  Step-by-step: tick: 1401 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 78, 100]
  Command: -
  Step-by-step: tick: 1402 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 22]
  Command: -if 2
  Step-by-step: tick: 1403 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1404 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1405 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1406 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1407 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3003]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1408 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3003, 78]
  Command: +
  Step-by-step: tick: 1409 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3081]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1410 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1411 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1412 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 78]
  Command: +
  Step-by-step: tick: 1413 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 79]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1414 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1415 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1416 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1417 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1418 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 79]
  Command: over
  Step-by-step: tick: 1419 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 79, 100]
  Command: -
  Step-by-step: tick: 1420 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 21]
  Command: -if 2
  Step-by-step: tick: 1421 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1422 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1423 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1424 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1425 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3081]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1426 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3081, 79]
  Command: +
  Step-by-step: tick: 1427 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3160]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1428 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1429 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1430 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 79]
  Command: +
  Step-by-step: tick: 1431 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 80]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1432 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1433 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1434 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1435 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1436 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 80]
  Command: over
  Step-by-step: tick: 1437 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 80, 100]
  Command: -
  Step-by-step: tick: 1438 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 20]
  Command: -if 2
  Step-by-step: tick: 1439 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1440 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1441 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1442 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1443 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3160]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1444 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3160, 80]
  Command: +
  Step-by-step: tick: 1445 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3240]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1446 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1447 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1448 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 80]
  Command: +
  Step-by-step: tick: 1449 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1450 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1451 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1452 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1453 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1454 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 81]
  Command: over
  Step-by-step: tick: 1455 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 81, 100]
  Command: -
  Step-by-step: tick: 1456 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 19]
  Command: -if 2
  Step-by-step: tick: 1457 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1458 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1459 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1460 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1461 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3240]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1462 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3240, 81]
  Command: +
  Step-by-step: tick: 1463 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3321]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1464 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1465 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1466 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 81]
  Command: +
  Step-by-step: tick: 1467 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 82]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1468 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1469 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1470 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1471 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1472 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 82]
  Command: over
  Step-by-step: tick: 1473 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 82, 100]
  Command: -
  Step-by-step: tick: 1474 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 18]
  Command: -if 2
  Step-by-step: tick: 1475 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1476 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1477 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1478 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1479 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3321]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1480 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3321, 82]
  Command: +
  Step-by-step: tick: 1481 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3403]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1482 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1483 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1484 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 82]
  Command: +
  Step-by-step: tick: 1485 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 83]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1486 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1487 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1488 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1489 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1490 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 83]
  Command: over
  Step-by-step: tick: 1491 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 83, 100]
  Command: -
  Step-by-step: tick: 1492 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 17]
  Command: -if 2
  Step-by-step: tick: 1493 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1494 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1495 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1496 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1497 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3403]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1498 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3403, 83]
  Command: +
  Step-by-step: tick: 1499 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3486]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1500 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1501 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1502 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 83]
  Command: +
  Step-by-step: tick: 1503 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 84]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1504 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1505 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1506 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1507 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1508 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 84]
  Command: over
  Step-by-step: tick: 1509 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 84, 100]
  Command: -
  Step-by-step: tick: 1510 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 16]
  Command: -if 2
  Step-by-step: tick: 1511 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1512 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1513 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1514 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1515 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3486]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1516 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3486, 84]
  Command: +
  Step-by-step: tick: 1517 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3570]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1518 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1519 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1520 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 84]
  Command: +
  Step-by-step: tick: 1521 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 85]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1522 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1523 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1524 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1525 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1526 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 85]
  Command: over
  Step-by-step: tick: 1527 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 85, 100]
  Command: -
  Step-by-step: tick: 1528 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 15]
  Command: -if 2
  Step-by-step: tick: 1529 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1530 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1531 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1532 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1533 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3570]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1534 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3570, 85]
  Command: +
  Step-by-step: tick: 1535 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3655]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1536 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1537 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1538 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 85]
  Command: +
  Step-by-step: tick: 1539 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 86]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1540 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1541 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1542 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1543 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1544 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 86]
  Command: over
  Step-by-step: tick: 1545 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 86, 100]
  Command: -
  Step-by-step: tick: 1546 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 14]
  Command: -if 2
  Step-by-step: tick: 1547 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1548 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1549 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1550 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1551 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3655]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1552 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3655, 86]
  Command: +
  Step-by-step: tick: 1553 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3741]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1554 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1555 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1556 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 86]
  Command: +
  Step-by-step: tick: 1557 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 87]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1558 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1559 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1560 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1561 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1562 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 87]
  Command: over
  Step-by-step: tick: 1563 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 87, 100]
  Command: -
  Step-by-step: tick: 1564 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 13]
  Command: -if 2
  Step-by-step: tick: 1565 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1566 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1567 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1568 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1569 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3741]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1570 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3741, 87]
  Command: +
  Step-by-step: tick: 1571 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3828]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1572 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1573 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1574 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 87]
  Command: +
  Step-by-step: tick: 1575 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 88]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1576 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1577 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1578 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1579 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1580 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 88]
  Command: over
  Step-by-step: tick: 1581 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 88, 100]
  Command: -
  Step-by-step: tick: 1582 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 12]
  Command: -if 2
  Step-by-step: tick: 1583 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1584 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1585 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1586 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1587 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3828]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1588 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3828, 88]
  Command: +
  Step-by-step: tick: 1589 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3916]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1590 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1591 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1592 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 88]
  Command: +
  Step-by-step: tick: 1593 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 89]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1594 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1595 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1596 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1597 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1598 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 89]
  Command: over
  Step-by-step: tick: 1599 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 89, 100]
  Command: -
  Step-by-step: tick: 1600 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 11]
  Command: -if 2
  Step-by-step: tick: 1601 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1602 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1603 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1604 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1605 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3916]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1606 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3916, 89]
  Command: +
  Step-by-step: tick: 1607 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4005]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1608 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1609 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1610 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 89]
  Command: +
  Step-by-step: tick: 1611 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 90]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1612 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1613 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1614 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1615 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1616 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 90]
  Command: over
  Step-by-step: tick: 1617 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 90, 100]
  Command: -
  Step-by-step: tick: 1618 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 10]
  Command: -if 2
  Step-by-step: tick: 1619 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1620 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1621 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1622 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1623 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4005]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1624 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4005, 90]
  Command: +
  Step-by-step: tick: 1625 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4095]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1626 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1627 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1628 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 90]
  Command: +
  Step-by-step: tick: 1629 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1630 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1631 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1632 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1633 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1634 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 91]
  Command: over
  Step-by-step: tick: 1635 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 91, 100]
  Command: -
  Step-by-step: tick: 1636 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 9]
  Command: -if 2
  Step-by-step: tick: 1637 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1638 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1639 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1640 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1641 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4095]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1642 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4095, 91]
  Command: +
  Step-by-step: tick: 1643 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4186]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1644 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1645 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1646 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 91]
  Command: +
  Step-by-step: tick: 1647 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 92]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1648 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1649 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1650 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1651 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1652 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 92]
  Command: over
  Step-by-step: tick: 1653 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 92, 100]
  Command: -
  Step-by-step: tick: 1654 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 8]
  Command: -if 2
  Step-by-step: tick: 1655 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1656 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1657 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1658 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1659 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4186]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1660 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4186, 92]
  Command: +
  Step-by-step: tick: 1661 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4278]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1662 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1663 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1664 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 92]
  Command: +
  Step-by-step: tick: 1665 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 93]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1666 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1667 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1668 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1669 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1670 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 93]
  Command: over
  Step-by-step: tick: 1671 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 93, 100]
  Command: -
  Step-by-step: tick: 1672 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 7]
  Command: -if 2
  Step-by-step: tick: 1673 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1674 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1675 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1676 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1677 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4278]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1678 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4278, 93]
  Command: +
  Step-by-step: tick: 1679 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4371]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1680 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1681 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1682 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 93]
  Command: +
  Step-by-step: tick: 1683 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 94]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1684 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1685 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1686 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1687 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1688 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 94]
  Command: over
  Step-by-step: tick: 1689 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 94, 100]
  Command: -
  Step-by-step: tick: 1690 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 6]
  Command: -if 2
  Step-by-step: tick: 1691 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1692 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1693 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1694 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1695 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4371]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1696 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4371, 94]
  Command: +
  Step-by-step: tick: 1697 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4465]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1698 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1699 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1700 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 94]
  Command: +
  Step-by-step: tick: 1701 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 95]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1702 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1703 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1704 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1705 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1706 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 95]
  Command: over
  Step-by-step: tick: 1707 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 95, 100]
  Command: -
  Step-by-step: tick: 1708 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 5]
  Command: -if 2
  Step-by-step: tick: 1709 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1710 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1711 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1712 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1713 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4465]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1714 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4465, 95]
  Command: +
  Step-by-step: tick: 1715 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4560]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1716 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1717 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1718 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 95]
  Command: +
  Step-by-step: tick: 1719 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 96]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1720 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1721 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1722 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1723 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1724 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 96]
  Command: over
  Step-by-step: tick: 1725 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 96, 100]
  Command: -
  Step-by-step: tick: 1726 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 4]
  Command: -if 2
  Step-by-step: tick: 1727 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1728 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1729 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1730 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1731 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4560]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1732 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4560, 96]
  Command: +
  Step-by-step: tick: 1733 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4656]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1734 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1735 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1736 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 96]
  Command: +
  Step-by-step: tick: 1737 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 97]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1738 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1739 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1740 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1741 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1742 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 97]
  Command: over
  Step-by-step: tick: 1743 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 97, 100]
  Command: -
  Step-by-step: tick: 1744 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 3]
  Command: -if 2
  Step-by-step: tick: 1745 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1746 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1747 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1748 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1749 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4656]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1750 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4656, 97]
  Command: +
  Step-by-step: tick: 1751 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4753]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1752 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1753 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1754 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 97]
  Command: +
  Step-by-step: tick: 1755 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 98]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1756 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1757 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1758 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1759 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1760 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 98]
  Command: over
  Step-by-step: tick: 1761 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 98, 100]
  Command: -
  Step-by-step: tick: 1762 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 2]
  Command: -if 2
  Step-by-step: tick: 1763 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1764 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1765 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1766 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1767 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4753]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1768 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4753, 98]
  Command: +
  Step-by-step: tick: 1769 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4851]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1770 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1771 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1772 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 98]
  Command: +
  Step-by-step: tick: 1773 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 99]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1774 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1775 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1776 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1777 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1778 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 99]
  Command: over
  Step-by-step: tick: 1779 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 99, 100]
  Command: -
  Step-by-step: tick: 1780 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: -if 2
  Step-by-step: tick: 1781 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1782 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1783 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1784 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1785 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4851]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1786 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4851, 99]
  Command: +
  Step-by-step: tick: 1787 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4950]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1788 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1789 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1790 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 99]
  Command: +
  Step-by-step: tick: 1791 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 100]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1792 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1793 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1794 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1795 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1796 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 100]
  Command: over
  Step-by-step: tick: 1797 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 100]
  Command: -
  Step-by-step: tick: 1798 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 0]
  Command: -if 2
  Step-by-step: tick: 1799 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1800 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 10
  Step-by-step: tick: 1801 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1802 || microcode - cpu: over || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1803 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4950]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1804 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4950, 100]
  Command: +
  Step-by-step: tick: 1805 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5050]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1806 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1807 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1808 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 100]
  Command: +
  Step-by-step: tick: 1809 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 101]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 1810 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -20
  Step-by-step: tick: 1811 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1812 || microcode - cpu: over || A: 0x80 || B: -0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1813 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 1814 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 101]
  Command: over
  Step-by-step: tick: 1815 || microcode - cpu: over || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 101, 100]
  Command: -
  Step-by-step: tick: 1816 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, -1]
  Command: -if 2
  Step-by-step: tick: 1817 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 0
  Step-by-step: tick: 1818 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 0]
  Command: jmp 1
  Step-by-step: tick: 1819 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 0]
  Command: if 10
  Step-by-step: tick: 1820 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: pop
  Step-by-step: tick: 1821 || microcode - cpu: pop_stack || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: pop
  Step-by-step: tick: 1822 || microcode - cpu: pop_stack || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: ret
  Step-by-step: tick: 1823 || microcode - cpu: restore_pc || A: 0x80 || B: 0xa 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1824 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5050]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1825 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5050, 5050]
  Command: *
  Step-by-step: tick: 1826 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25502500]
  Command: sw_to_imm_addr 4
  Step-by-step: tick: 1827 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: call -39
  Step-by-step: tick: 1828 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x80 || B: -0x27 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1829 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1830 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 0
  Step-by-step: tick: 1831 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: push_imm 1
  Step-by-step: tick: 1832 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1833 || microcode - cpu: over || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1834 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1835 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 1]
  Command: over
  Step-by-step: tick: 1836 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1, 100]
  Command: -
  Step-by-step: tick: 1837 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 99]
  Command: -if 2
  Step-by-step: tick: 1838 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1839 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1840 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1841 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1842 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1843 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 1]
  Command: *
  Step-by-step: tick: 1844 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1845 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1846 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 1847 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 0, 1]
  Command: +
  Step-by-step: tick: 1848 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 1849 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1850 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1851 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 1]
  Command: +
  Step-by-step: tick: 1852 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1853 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 1854 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1855 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1856 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1857 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 2]
  Command: over
  Step-by-step: tick: 1858 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 2, 100]
  Command: -
  Step-by-step: tick: 1859 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 98]
  Command: -if 2
  Step-by-step: tick: 1860 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1861 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1862 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1863 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1864 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1865 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2, 2]
  Command: *
  Step-by-step: tick: 1866 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1867 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1868 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 1869 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 4]
  Command: +
  Step-by-step: tick: 1870 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 1871 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1872 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1873 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 2]
  Command: +
  Step-by-step: tick: 1874 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1875 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 1876 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1877 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1878 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1879 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 3]
  Command: over
  Step-by-step: tick: 1880 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 3, 100]
  Command: -
  Step-by-step: tick: 1881 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 97]
  Command: -if 2
  Step-by-step: tick: 1882 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1883 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1884 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1885 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1886 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1887 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3, 3]
  Command: *
  Step-by-step: tick: 1888 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1889 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1890 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 1891 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5, 9]
  Command: +
  Step-by-step: tick: 1892 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 1893 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1894 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1895 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 3]
  Command: +
  Step-by-step: tick: 1896 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1897 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 1898 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1899 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1900 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1901 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 4]
  Command: over
  Step-by-step: tick: 1902 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 4, 100]
  Command: -
  Step-by-step: tick: 1903 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 96]
  Command: -if 2
  Step-by-step: tick: 1904 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1905 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1906 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1907 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1908 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1909 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4, 4]
  Command: *
  Step-by-step: tick: 1910 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1911 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1912 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 1913 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14, 16]
  Command: +
  Step-by-step: tick: 1914 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 30]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 1915 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1916 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1917 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 4]
  Command: +
  Step-by-step: tick: 1918 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1919 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 1920 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1921 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1922 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1923 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 5]
  Command: over
  Step-by-step: tick: 1924 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 5, 100]
  Command: -
  Step-by-step: tick: 1925 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 95]
  Command: -if 2
  Step-by-step: tick: 1926 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1927 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1928 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1929 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1930 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1931 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5, 5]
  Command: *
  Step-by-step: tick: 1932 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1933 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1934 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 30]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 1935 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 30, 25]
  Command: +
  Step-by-step: tick: 1936 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 1937 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1938 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1939 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 5]
  Command: +
  Step-by-step: tick: 1940 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1941 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 1942 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1943 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1944 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1945 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 6]
  Command: over
  Step-by-step: tick: 1946 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 6, 100]
  Command: -
  Step-by-step: tick: 1947 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 94]
  Command: -if 2
  Step-by-step: tick: 1948 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1949 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1950 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1951 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1952 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1953 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6, 6]
  Command: *
  Step-by-step: tick: 1954 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1955 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1956 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 1957 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55, 36]
  Command: +
  Step-by-step: tick: 1958 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 1959 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1960 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1961 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 6]
  Command: +
  Step-by-step: tick: 1962 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1963 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 1964 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1965 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1966 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1967 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 7]
  Command: over
  Step-by-step: tick: 1968 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 7, 100]
  Command: -
  Step-by-step: tick: 1969 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 93]
  Command: -if 2
  Step-by-step: tick: 1970 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1971 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1972 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1973 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1974 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1975 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7, 7]
  Command: *
  Step-by-step: tick: 1976 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 49]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1977 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1978 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 1979 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91, 49]
  Command: +
  Step-by-step: tick: 1980 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 140]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 1981 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 1982 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1983 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 7]
  Command: +
  Step-by-step: tick: 1984 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 1985 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 1986 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 1987 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 1988 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1989 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 8]
  Command: over
  Step-by-step: tick: 1990 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 8, 100]
  Command: -
  Step-by-step: tick: 1991 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 92]
  Command: -if 2
  Step-by-step: tick: 1992 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 1993 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 1994 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 1995 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1996 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 1997 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8, 8]
  Command: *
  Step-by-step: tick: 1998 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 64]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 1999 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2000 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 140]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2001 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 140, 64]
  Command: +
  Step-by-step: tick: 2002 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 204]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2003 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2004 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2005 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 8]
  Command: +
  Step-by-step: tick: 2006 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2007 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2008 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2009 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2010 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2011 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 9]
  Command: over
  Step-by-step: tick: 2012 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 9, 100]
  Command: -
  Step-by-step: tick: 2013 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 91]
  Command: -if 2
  Step-by-step: tick: 2014 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2015 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2016 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2017 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2018 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2019 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9, 9]
  Command: *
  Step-by-step: tick: 2020 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2021 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2022 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 204]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2023 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 204, 81]
  Command: +
  Step-by-step: tick: 2024 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 285]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2025 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2026 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2027 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 9]
  Command: +
  Step-by-step: tick: 2028 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2029 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2030 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2031 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2032 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2033 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 10]
  Command: over
  Step-by-step: tick: 2034 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 10, 100]
  Command: -
  Step-by-step: tick: 2035 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 90]
  Command: -if 2
  Step-by-step: tick: 2036 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2037 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2038 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2039 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2040 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2041 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10, 10]
  Command: *
  Step-by-step: tick: 2042 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 100]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2043 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2044 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 285]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2045 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 285, 100]
  Command: +
  Step-by-step: tick: 2046 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 385]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2047 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2048 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2049 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 10]
  Command: +
  Step-by-step: tick: 2050 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 11]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2051 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2052 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2053 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2054 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2055 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 11]
  Command: over
  Step-by-step: tick: 2056 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 11, 100]
  Command: -
  Step-by-step: tick: 2057 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 89]
  Command: -if 2
  Step-by-step: tick: 2058 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2059 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2060 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2061 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2062 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 11]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2063 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 11, 11]
  Command: *
  Step-by-step: tick: 2064 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 121]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2065 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2066 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 385]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2067 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 385, 121]
  Command: +
  Step-by-step: tick: 2068 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 506]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2069 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2070 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2071 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 11]
  Command: +
  Step-by-step: tick: 2072 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 12]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2073 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2074 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2075 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2076 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2077 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 12]
  Command: over
  Step-by-step: tick: 2078 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 12, 100]
  Command: -
  Step-by-step: tick: 2079 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 88]
  Command: -if 2
  Step-by-step: tick: 2080 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2081 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2082 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2083 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2084 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 12]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2085 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 12, 12]
  Command: *
  Step-by-step: tick: 2086 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 144]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2087 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2088 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 506]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2089 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 506, 144]
  Command: +
  Step-by-step: tick: 2090 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 650]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2091 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2092 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2093 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 12]
  Command: +
  Step-by-step: tick: 2094 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 13]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2095 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2096 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2097 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2098 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2099 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 13]
  Command: over
  Step-by-step: tick: 2100 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 13, 100]
  Command: -
  Step-by-step: tick: 2101 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 87]
  Command: -if 2
  Step-by-step: tick: 2102 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2103 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2104 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2105 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2106 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 13]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2107 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 13, 13]
  Command: *
  Step-by-step: tick: 2108 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 169]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2109 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2110 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 650]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2111 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 650, 169]
  Command: +
  Step-by-step: tick: 2112 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 819]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2113 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2114 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2115 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 13]
  Command: +
  Step-by-step: tick: 2116 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2117 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2118 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2119 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2120 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2121 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 14]
  Command: over
  Step-by-step: tick: 2122 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 14, 100]
  Command: -
  Step-by-step: tick: 2123 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 86]
  Command: -if 2
  Step-by-step: tick: 2124 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2125 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2126 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2127 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2128 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2129 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14, 14]
  Command: *
  Step-by-step: tick: 2130 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 196]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2131 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2132 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 819]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2133 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 819, 196]
  Command: +
  Step-by-step: tick: 2134 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1015]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2135 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2136 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2137 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 14]
  Command: +
  Step-by-step: tick: 2138 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 15]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2139 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2140 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2141 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2142 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2143 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 15]
  Command: over
  Step-by-step: tick: 2144 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 15, 100]
  Command: -
  Step-by-step: tick: 2145 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 85]
  Command: -if 2
  Step-by-step: tick: 2146 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2147 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2148 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2149 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2150 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 15]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2151 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 15, 15]
  Command: *
  Step-by-step: tick: 2152 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 225]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2153 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2154 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1015]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2155 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1015, 225]
  Command: +
  Step-by-step: tick: 2156 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1240]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2157 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2158 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2159 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 15]
  Command: +
  Step-by-step: tick: 2160 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2161 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2162 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2163 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2164 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2165 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 16]
  Command: over
  Step-by-step: tick: 2166 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 16, 100]
  Command: -
  Step-by-step: tick: 2167 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 84]
  Command: -if 2
  Step-by-step: tick: 2168 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2169 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2170 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2171 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2172 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2173 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16, 16]
  Command: *
  Step-by-step: tick: 2174 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 256]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2175 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2176 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1240]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2177 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1240, 256]
  Command: +
  Step-by-step: tick: 2178 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1496]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2179 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2180 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2181 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 16]
  Command: +
  Step-by-step: tick: 2182 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 17]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2183 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2184 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2185 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2186 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2187 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 17]
  Command: over
  Step-by-step: tick: 2188 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 17, 100]
  Command: -
  Step-by-step: tick: 2189 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 83]
  Command: -if 2
  Step-by-step: tick: 2190 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2191 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2192 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2193 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2194 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 17]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2195 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 17, 17]
  Command: *
  Step-by-step: tick: 2196 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 289]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2197 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2198 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1496]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2199 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1496, 289]
  Command: +
  Step-by-step: tick: 2200 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1785]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2201 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2202 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2203 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 17]
  Command: +
  Step-by-step: tick: 2204 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 18]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2205 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2206 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2207 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2208 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2209 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 18]
  Command: over
  Step-by-step: tick: 2210 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 18, 100]
  Command: -
  Step-by-step: tick: 2211 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 82]
  Command: -if 2
  Step-by-step: tick: 2212 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2213 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2214 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2215 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2216 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 18]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2217 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 18, 18]
  Command: *
  Step-by-step: tick: 2218 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 324]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2219 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2220 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1785]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2221 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1785, 324]
  Command: +
  Step-by-step: tick: 2222 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2109]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2223 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2224 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2225 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 18]
  Command: +
  Step-by-step: tick: 2226 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 19]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2227 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2228 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2229 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2230 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2231 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 19]
  Command: over
  Step-by-step: tick: 2232 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 19, 100]
  Command: -
  Step-by-step: tick: 2233 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 81]
  Command: -if 2
  Step-by-step: tick: 2234 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2235 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2236 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2237 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2238 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 19]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2239 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 19, 19]
  Command: *
  Step-by-step: tick: 2240 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 361]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2241 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2242 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2109]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2243 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2109, 361]
  Command: +
  Step-by-step: tick: 2244 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2470]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2245 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2246 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2247 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 19]
  Command: +
  Step-by-step: tick: 2248 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 20]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2249 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2250 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2251 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2252 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2253 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 20]
  Command: over
  Step-by-step: tick: 2254 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 20, 100]
  Command: -
  Step-by-step: tick: 2255 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 80]
  Command: -if 2
  Step-by-step: tick: 2256 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2257 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2258 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2259 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2260 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 20]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2261 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 20, 20]
  Command: *
  Step-by-step: tick: 2262 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 400]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2263 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2264 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2470]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2265 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2470, 400]
  Command: +
  Step-by-step: tick: 2266 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2870]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2267 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2268 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2269 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 20]
  Command: +
  Step-by-step: tick: 2270 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 21]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2271 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2272 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2273 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2274 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2275 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 21]
  Command: over
  Step-by-step: tick: 2276 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 21, 100]
  Command: -
  Step-by-step: tick: 2277 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 79]
  Command: -if 2
  Step-by-step: tick: 2278 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2279 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2280 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2281 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2282 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 21]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2283 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 21, 21]
  Command: *
  Step-by-step: tick: 2284 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 441]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2285 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2286 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2870]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2287 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2870, 441]
  Command: +
  Step-by-step: tick: 2288 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3311]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2289 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2290 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2291 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 21]
  Command: +
  Step-by-step: tick: 2292 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 22]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2293 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2294 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2295 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2296 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2297 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 22]
  Command: over
  Step-by-step: tick: 2298 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 22, 100]
  Command: -
  Step-by-step: tick: 2299 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 78]
  Command: -if 2
  Step-by-step: tick: 2300 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2301 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2302 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2303 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2304 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 22]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2305 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 22, 22]
  Command: *
  Step-by-step: tick: 2306 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 484]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2307 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2308 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3311]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2309 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3311, 484]
  Command: +
  Step-by-step: tick: 2310 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3795]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2311 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2312 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2313 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 22]
  Command: +
  Step-by-step: tick: 2314 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 23]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2315 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2316 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2317 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2318 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2319 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 23]
  Command: over
  Step-by-step: tick: 2320 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 23, 100]
  Command: -
  Step-by-step: tick: 2321 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 77]
  Command: -if 2
  Step-by-step: tick: 2322 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2323 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2324 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2325 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2326 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 23]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2327 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 23, 23]
  Command: *
  Step-by-step: tick: 2328 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 529]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2329 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2330 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3795]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2331 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3795, 529]
  Command: +
  Step-by-step: tick: 2332 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4324]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2333 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2334 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2335 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 23]
  Command: +
  Step-by-step: tick: 2336 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 24]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2337 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2338 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2339 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2340 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2341 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 24]
  Command: over
  Step-by-step: tick: 2342 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 24, 100]
  Command: -
  Step-by-step: tick: 2343 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 76]
  Command: -if 2
  Step-by-step: tick: 2344 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2345 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2346 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2347 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2348 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 24]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2349 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 24, 24]
  Command: *
  Step-by-step: tick: 2350 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 576]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2351 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2352 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4324]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2353 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4324, 576]
  Command: +
  Step-by-step: tick: 2354 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4900]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2355 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2356 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2357 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 24]
  Command: +
  Step-by-step: tick: 2358 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2359 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2360 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2361 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2362 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2363 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 25]
  Command: over
  Step-by-step: tick: 2364 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 25, 100]
  Command: -
  Step-by-step: tick: 2365 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 75]
  Command: -if 2
  Step-by-step: tick: 2366 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2367 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2368 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2369 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2370 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2371 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25, 25]
  Command: *
  Step-by-step: tick: 2372 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 625]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2373 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2374 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4900]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2375 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4900, 625]
  Command: +
  Step-by-step: tick: 2376 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5525]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2377 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2378 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2379 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 25]
  Command: +
  Step-by-step: tick: 2380 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 26]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2381 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2382 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2383 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2384 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2385 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 26]
  Command: over
  Step-by-step: tick: 2386 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 26, 100]
  Command: -
  Step-by-step: tick: 2387 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 74]
  Command: -if 2
  Step-by-step: tick: 2388 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2389 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2390 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2391 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2392 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 26]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2393 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 26, 26]
  Command: *
  Step-by-step: tick: 2394 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 676]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2395 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2396 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5525]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2397 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5525, 676]
  Command: +
  Step-by-step: tick: 2398 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6201]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2399 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2400 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2401 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 26]
  Command: +
  Step-by-step: tick: 2402 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 27]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2403 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2404 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2405 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2406 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2407 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 27]
  Command: over
  Step-by-step: tick: 2408 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 27, 100]
  Command: -
  Step-by-step: tick: 2409 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 73]
  Command: -if 2
  Step-by-step: tick: 2410 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2411 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2412 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2413 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2414 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 27]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2415 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 27, 27]
  Command: *
  Step-by-step: tick: 2416 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 729]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2417 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2418 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6201]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2419 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6201, 729]
  Command: +
  Step-by-step: tick: 2420 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6930]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2421 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2422 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2423 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 27]
  Command: +
  Step-by-step: tick: 2424 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 28]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2425 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2426 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2427 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2428 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2429 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 28]
  Command: over
  Step-by-step: tick: 2430 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 28, 100]
  Command: -
  Step-by-step: tick: 2431 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 72]
  Command: -if 2
  Step-by-step: tick: 2432 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2433 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2434 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2435 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2436 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 28]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2437 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 28, 28]
  Command: *
  Step-by-step: tick: 2438 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 784]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2439 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2440 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6930]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2441 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6930, 784]
  Command: +
  Step-by-step: tick: 2442 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7714]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2443 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2444 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2445 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 28]
  Command: +
  Step-by-step: tick: 2446 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 29]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2447 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2448 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2449 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2450 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2451 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 29]
  Command: over
  Step-by-step: tick: 2452 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 29, 100]
  Command: -
  Step-by-step: tick: 2453 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 71]
  Command: -if 2
  Step-by-step: tick: 2454 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2455 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2456 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2457 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2458 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 29]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2459 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 29, 29]
  Command: *
  Step-by-step: tick: 2460 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 841]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2461 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2462 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7714]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2463 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7714, 841]
  Command: +
  Step-by-step: tick: 2464 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8555]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2465 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2466 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2467 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 29]
  Command: +
  Step-by-step: tick: 2468 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 30]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2469 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2470 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2471 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2472 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2473 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 30]
  Command: over
  Step-by-step: tick: 2474 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 30, 100]
  Command: -
  Step-by-step: tick: 2475 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 70]
  Command: -if 2
  Step-by-step: tick: 2476 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2477 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2478 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2479 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2480 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 30]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2481 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 30, 30]
  Command: *
  Step-by-step: tick: 2482 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 900]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2483 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2484 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8555]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2485 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8555, 900]
  Command: +
  Step-by-step: tick: 2486 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9455]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2487 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2488 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2489 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 30]
  Command: +
  Step-by-step: tick: 2490 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 31]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2491 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2492 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2493 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2494 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2495 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 31]
  Command: over
  Step-by-step: tick: 2496 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 31, 100]
  Command: -
  Step-by-step: tick: 2497 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 69]
  Command: -if 2
  Step-by-step: tick: 2498 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2499 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2500 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2501 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2502 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 31]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2503 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 31, 31]
  Command: *
  Step-by-step: tick: 2504 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 961]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2505 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2506 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9455]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2507 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9455, 961]
  Command: +
  Step-by-step: tick: 2508 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10416]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2509 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2510 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2511 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 31]
  Command: +
  Step-by-step: tick: 2512 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 32]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2513 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2514 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2515 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2516 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2517 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 32]
  Command: over
  Step-by-step: tick: 2518 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 32, 100]
  Command: -
  Step-by-step: tick: 2519 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 68]
  Command: -if 2
  Step-by-step: tick: 2520 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2521 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2522 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2523 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2524 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 32]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2525 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 32, 32]
  Command: *
  Step-by-step: tick: 2526 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1024]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2527 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2528 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10416]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2529 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10416, 1024]
  Command: +
  Step-by-step: tick: 2530 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 11440]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2531 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2532 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2533 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 32]
  Command: +
  Step-by-step: tick: 2534 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 33]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2535 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2536 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2537 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2538 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2539 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 33]
  Command: over
  Step-by-step: tick: 2540 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 33, 100]
  Command: -
  Step-by-step: tick: 2541 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 67]
  Command: -if 2
  Step-by-step: tick: 2542 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2543 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2544 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2545 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2546 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 33]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2547 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 33, 33]
  Command: *
  Step-by-step: tick: 2548 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1089]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2549 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2550 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 11440]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2551 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 11440, 1089]
  Command: +
  Step-by-step: tick: 2552 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 12529]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2553 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2554 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2555 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 33]
  Command: +
  Step-by-step: tick: 2556 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 34]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2557 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2558 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2559 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2560 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2561 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 34]
  Command: over
  Step-by-step: tick: 2562 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 34, 100]
  Command: -
  Step-by-step: tick: 2563 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 66]
  Command: -if 2
  Step-by-step: tick: 2564 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2565 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2566 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2567 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2568 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 34]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2569 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 34, 34]
  Command: *
  Step-by-step: tick: 2570 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1156]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2571 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2572 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 12529]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2573 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 12529, 1156]
  Command: +
  Step-by-step: tick: 2574 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 13685]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2575 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2576 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2577 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 34]
  Command: +
  Step-by-step: tick: 2578 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 35]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2579 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2580 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2581 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2582 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2583 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 35]
  Command: over
  Step-by-step: tick: 2584 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 35, 100]
  Command: -
  Step-by-step: tick: 2585 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 65]
  Command: -if 2
  Step-by-step: tick: 2586 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2587 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2588 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2589 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2590 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 35]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2591 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 35, 35]
  Command: *
  Step-by-step: tick: 2592 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1225]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2593 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2594 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 13685]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2595 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 13685, 1225]
  Command: +
  Step-by-step: tick: 2596 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14910]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2597 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2598 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2599 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 35]
  Command: +
  Step-by-step: tick: 2600 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2601 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2602 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2603 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2604 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2605 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 36]
  Command: over
  Step-by-step: tick: 2606 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 36, 100]
  Command: -
  Step-by-step: tick: 2607 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 64]
  Command: -if 2
  Step-by-step: tick: 2608 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2609 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2610 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2611 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2612 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2613 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 36, 36]
  Command: *
  Step-by-step: tick: 2614 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1296]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2615 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2616 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14910]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2617 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 14910, 1296]
  Command: +
  Step-by-step: tick: 2618 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16206]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2619 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2620 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2621 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 36]
  Command: +
  Step-by-step: tick: 2622 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 37]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2623 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2624 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2625 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2626 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2627 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 37]
  Command: over
  Step-by-step: tick: 2628 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 37, 100]
  Command: -
  Step-by-step: tick: 2629 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 63]
  Command: -if 2
  Step-by-step: tick: 2630 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2631 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2632 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2633 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2634 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 37]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2635 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 37, 37]
  Command: *
  Step-by-step: tick: 2636 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1369]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2637 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2638 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16206]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2639 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 16206, 1369]
  Command: +
  Step-by-step: tick: 2640 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 17575]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2641 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2642 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2643 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 37]
  Command: +
  Step-by-step: tick: 2644 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 38]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2645 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2646 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2647 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2648 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2649 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 38]
  Command: over
  Step-by-step: tick: 2650 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 38, 100]
  Command: -
  Step-by-step: tick: 2651 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 62]
  Command: -if 2
  Step-by-step: tick: 2652 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2653 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2654 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2655 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2656 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 38]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2657 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 38, 38]
  Command: *
  Step-by-step: tick: 2658 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1444]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2659 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2660 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 17575]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2661 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 17575, 1444]
  Command: +
  Step-by-step: tick: 2662 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 19019]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2663 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2664 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2665 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 38]
  Command: +
  Step-by-step: tick: 2666 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 39]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2667 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2668 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2669 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2670 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2671 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 39]
  Command: over
  Step-by-step: tick: 2672 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 39, 100]
  Command: -
  Step-by-step: tick: 2673 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 61]
  Command: -if 2
  Step-by-step: tick: 2674 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2675 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2676 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2677 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2678 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 39]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2679 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 39, 39]
  Command: *
  Step-by-step: tick: 2680 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1521]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2681 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2682 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 19019]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2683 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 19019, 1521]
  Command: +
  Step-by-step: tick: 2684 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 20540]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2685 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2686 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2687 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 39]
  Command: +
  Step-by-step: tick: 2688 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 40]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2689 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2690 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2691 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2692 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2693 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 40]
  Command: over
  Step-by-step: tick: 2694 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 40, 100]
  Command: -
  Step-by-step: tick: 2695 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 60]
  Command: -if 2
  Step-by-step: tick: 2696 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2697 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2698 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2699 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2700 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 40]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2701 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 40, 40]
  Command: *
  Step-by-step: tick: 2702 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1600]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2703 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2704 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 20540]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2705 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 20540, 1600]
  Command: +
  Step-by-step: tick: 2706 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 22140]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2707 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2708 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2709 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 40]
  Command: +
  Step-by-step: tick: 2710 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 41]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2711 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2712 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2713 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2714 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2715 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 41]
  Command: over
  Step-by-step: tick: 2716 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 41, 100]
  Command: -
  Step-by-step: tick: 2717 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 59]
  Command: -if 2
  Step-by-step: tick: 2718 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2719 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2720 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2721 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2722 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 41]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2723 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 41, 41]
  Command: *
  Step-by-step: tick: 2724 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1681]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2725 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2726 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 22140]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2727 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 22140, 1681]
  Command: +
  Step-by-step: tick: 2728 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 23821]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2729 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2730 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2731 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 41]
  Command: +
  Step-by-step: tick: 2732 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 42]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2733 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2734 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2735 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2736 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2737 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 42]
  Command: over
  Step-by-step: tick: 2738 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 42, 100]
  Command: -
  Step-by-step: tick: 2739 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 58]
  Command: -if 2
  Step-by-step: tick: 2740 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2741 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2742 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2743 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2744 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 42]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2745 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 42, 42]
  Command: *
  Step-by-step: tick: 2746 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1764]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2747 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2748 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 23821]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2749 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 23821, 1764]
  Command: +
  Step-by-step: tick: 2750 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25585]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2751 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2752 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2753 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 42]
  Command: +
  Step-by-step: tick: 2754 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 43]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2755 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2756 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2757 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2758 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2759 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 43]
  Command: over
  Step-by-step: tick: 2760 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 43, 100]
  Command: -
  Step-by-step: tick: 2761 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 57]
  Command: -if 2
  Step-by-step: tick: 2762 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2763 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2764 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2765 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2766 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 43]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2767 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 43, 43]
  Command: *
  Step-by-step: tick: 2768 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1849]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2769 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2770 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25585]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2771 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 25585, 1849]
  Command: +
  Step-by-step: tick: 2772 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 27434]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2773 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2774 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2775 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 43]
  Command: +
  Step-by-step: tick: 2776 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 44]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2777 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2778 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2779 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2780 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2781 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 44]
  Command: over
  Step-by-step: tick: 2782 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 44, 100]
  Command: -
  Step-by-step: tick: 2783 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 56]
  Command: -if 2
  Step-by-step: tick: 2784 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2785 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2786 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2787 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2788 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 44]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2789 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 44, 44]
  Command: *
  Step-by-step: tick: 2790 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1936]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2791 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2792 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 27434]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2793 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 27434, 1936]
  Command: +
  Step-by-step: tick: 2794 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 29370]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2795 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2796 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2797 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 44]
  Command: +
  Step-by-step: tick: 2798 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2799 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2800 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2801 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2802 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2803 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 45]
  Command: over
  Step-by-step: tick: 2804 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 45, 100]
  Command: -
  Step-by-step: tick: 2805 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 55]
  Command: -if 2
  Step-by-step: tick: 2806 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2807 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2808 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2809 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2810 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2811 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45, 45]
  Command: *
  Step-by-step: tick: 2812 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2025]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2813 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2814 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 29370]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2815 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 29370, 2025]
  Command: +
  Step-by-step: tick: 2816 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 31395]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2817 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2818 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2819 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 45]
  Command: +
  Step-by-step: tick: 2820 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 46]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2821 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2822 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2823 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2824 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2825 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 46]
  Command: over
  Step-by-step: tick: 2826 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 46, 100]
  Command: -
  Step-by-step: tick: 2827 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 54]
  Command: -if 2
  Step-by-step: tick: 2828 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2829 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2830 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2831 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2832 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 46]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2833 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 46, 46]
  Command: *
  Step-by-step: tick: 2834 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2116]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2835 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2836 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 31395]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2837 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 31395, 2116]
  Command: +
  Step-by-step: tick: 2838 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 33511]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2839 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2840 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2841 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 46]
  Command: +
  Step-by-step: tick: 2842 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 47]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2843 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2844 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2845 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2846 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2847 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 47]
  Command: over
  Step-by-step: tick: 2848 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 47, 100]
  Command: -
  Step-by-step: tick: 2849 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 53]
  Command: -if 2
  Step-by-step: tick: 2850 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2851 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2852 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2853 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2854 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 47]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2855 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 47, 47]
  Command: *
  Step-by-step: tick: 2856 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2209]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2857 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2858 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 33511]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2859 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 33511, 2209]
  Command: +
  Step-by-step: tick: 2860 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 35720]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2861 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2862 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2863 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 47]
  Command: +
  Step-by-step: tick: 2864 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 48]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2865 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2866 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2867 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2868 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2869 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 48]
  Command: over
  Step-by-step: tick: 2870 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 48, 100]
  Command: -
  Step-by-step: tick: 2871 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 52]
  Command: -if 2
  Step-by-step: tick: 2872 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2873 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2874 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2875 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2876 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 48]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2877 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 48, 48]
  Command: *
  Step-by-step: tick: 2878 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2304]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2879 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2880 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 35720]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2881 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 35720, 2304]
  Command: +
  Step-by-step: tick: 2882 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 38024]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2883 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2884 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2885 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 48]
  Command: +
  Step-by-step: tick: 2886 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 49]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2887 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2888 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2889 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2890 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2891 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 49]
  Command: over
  Step-by-step: tick: 2892 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 49, 100]
  Command: -
  Step-by-step: tick: 2893 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 51]
  Command: -if 2
  Step-by-step: tick: 2894 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2895 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2896 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2897 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2898 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 49]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2899 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 49, 49]
  Command: *
  Step-by-step: tick: 2900 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2401]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2901 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2902 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 38024]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2903 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 38024, 2401]
  Command: +
  Step-by-step: tick: 2904 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 40425]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2905 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2906 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2907 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 49]
  Command: +
  Step-by-step: tick: 2908 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 50]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2909 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2910 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2911 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2912 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2913 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 50]
  Command: over
  Step-by-step: tick: 2914 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 50, 100]
  Command: -
  Step-by-step: tick: 2915 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 50]
  Command: -if 2
  Step-by-step: tick: 2916 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2917 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2918 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2919 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2920 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 50]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2921 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 50, 50]
  Command: *
  Step-by-step: tick: 2922 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2500]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2923 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2924 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 40425]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2925 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 40425, 2500]
  Command: +
  Step-by-step: tick: 2926 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 42925]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2927 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2928 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2929 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 50]
  Command: +
  Step-by-step: tick: 2930 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 51]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2931 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2932 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2933 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2934 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2935 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 51]
  Command: over
  Step-by-step: tick: 2936 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 51, 100]
  Command: -
  Step-by-step: tick: 2937 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 49]
  Command: -if 2
  Step-by-step: tick: 2938 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2939 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2940 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2941 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2942 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 51]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2943 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 51, 51]
  Command: *
  Step-by-step: tick: 2944 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2601]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2945 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2946 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 42925]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2947 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 42925, 2601]
  Command: +
  Step-by-step: tick: 2948 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45526]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2949 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2950 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2951 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 51]
  Command: +
  Step-by-step: tick: 2952 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 52]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2953 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2954 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2955 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2956 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2957 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 52]
  Command: over
  Step-by-step: tick: 2958 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 52, 100]
  Command: -
  Step-by-step: tick: 2959 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 48]
  Command: -if 2
  Step-by-step: tick: 2960 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2961 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2962 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2963 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2964 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 52]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2965 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 52, 52]
  Command: *
  Step-by-step: tick: 2966 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2704]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2967 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2968 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45526]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2969 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 45526, 2704]
  Command: +
  Step-by-step: tick: 2970 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 48230]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2971 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2972 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2973 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 52]
  Command: +
  Step-by-step: tick: 2974 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 53]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2975 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2976 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2977 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 2978 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2979 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 53]
  Command: over
  Step-by-step: tick: 2980 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 53, 100]
  Command: -
  Step-by-step: tick: 2981 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 47]
  Command: -if 2
  Step-by-step: tick: 2982 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 2983 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 2984 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 2985 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2986 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 53]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2987 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 53, 53]
  Command: *
  Step-by-step: tick: 2988 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2809]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 2989 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 2990 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 48230]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 2991 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 48230, 2809]
  Command: +
  Step-by-step: tick: 2992 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 51039]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 2993 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 2994 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 2995 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 53]
  Command: +
  Step-by-step: tick: 2996 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 54]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 2997 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 2998 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 2999 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3000 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3001 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 54]
  Command: over
  Step-by-step: tick: 3002 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 54, 100]
  Command: -
  Step-by-step: tick: 3003 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 46]
  Command: -if 2
  Step-by-step: tick: 3004 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3005 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3006 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3007 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3008 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 54]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3009 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 54, 54]
  Command: *
  Step-by-step: tick: 3010 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 2916]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3011 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3012 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 51039]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3013 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 51039, 2916]
  Command: +
  Step-by-step: tick: 3014 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 53955]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3015 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3016 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3017 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 54]
  Command: +
  Step-by-step: tick: 3018 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3019 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3020 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3021 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3022 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3023 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 55]
  Command: over
  Step-by-step: tick: 3024 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 55, 100]
  Command: -
  Step-by-step: tick: 3025 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 45]
  Command: -if 2
  Step-by-step: tick: 3026 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3027 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3028 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3029 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3030 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3031 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 55, 55]
  Command: *
  Step-by-step: tick: 3032 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3025]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3033 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3034 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 53955]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3035 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 53955, 3025]
  Command: +
  Step-by-step: tick: 3036 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 56980]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3037 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3038 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3039 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 55]
  Command: +
  Step-by-step: tick: 3040 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 56]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3041 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3042 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3043 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3044 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3045 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 56]
  Command: over
  Step-by-step: tick: 3046 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 56, 100]
  Command: -
  Step-by-step: tick: 3047 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 44]
  Command: -if 2
  Step-by-step: tick: 3048 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3049 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3050 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3051 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3052 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 56]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3053 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 56, 56]
  Command: *
  Step-by-step: tick: 3054 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3136]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3055 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3056 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 56980]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3057 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 56980, 3136]
  Command: +
  Step-by-step: tick: 3058 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 60116]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3059 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3060 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3061 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 56]
  Command: +
  Step-by-step: tick: 3062 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 57]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3063 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3064 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3065 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3066 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3067 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 57]
  Command: over
  Step-by-step: tick: 3068 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 57, 100]
  Command: -
  Step-by-step: tick: 3069 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 43]
  Command: -if 2
  Step-by-step: tick: 3070 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3071 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3072 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3073 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3074 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 57]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3075 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 57, 57]
  Command: *
  Step-by-step: tick: 3076 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3249]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3077 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3078 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 60116]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3079 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 60116, 3249]
  Command: +
  Step-by-step: tick: 3080 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 63365]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3081 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3082 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3083 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 57]
  Command: +
  Step-by-step: tick: 3084 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 58]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3085 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3086 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3087 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3088 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3089 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 58]
  Command: over
  Step-by-step: tick: 3090 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 58, 100]
  Command: -
  Step-by-step: tick: 3091 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 42]
  Command: -if 2
  Step-by-step: tick: 3092 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3093 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3094 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3095 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3096 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 58]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3097 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 58, 58]
  Command: *
  Step-by-step: tick: 3098 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3364]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3099 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3100 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 63365]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3101 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 63365, 3364]
  Command: +
  Step-by-step: tick: 3102 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66729]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3103 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3104 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3105 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 58]
  Command: +
  Step-by-step: tick: 3106 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 59]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3107 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3108 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3109 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3110 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3111 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 59]
  Command: over
  Step-by-step: tick: 3112 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 59, 100]
  Command: -
  Step-by-step: tick: 3113 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 41]
  Command: -if 2
  Step-by-step: tick: 3114 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3115 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3116 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3117 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3118 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 59]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3119 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 59, 59]
  Command: *
  Step-by-step: tick: 3120 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3481]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3121 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3122 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66729]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3123 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66729, 3481]
  Command: +
  Step-by-step: tick: 3124 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 70210]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3125 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3126 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3127 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 59]
  Command: +
  Step-by-step: tick: 3128 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 60]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3129 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3130 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3131 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3132 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3133 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 60]
  Command: over
  Step-by-step: tick: 3134 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 60, 100]
  Command: -
  Step-by-step: tick: 3135 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 40]
  Command: -if 2
  Step-by-step: tick: 3136 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3137 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3138 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3139 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3140 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 60]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3141 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 60, 60]
  Command: *
  Step-by-step: tick: 3142 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3600]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3143 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3144 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 70210]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3145 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 70210, 3600]
  Command: +
  Step-by-step: tick: 3146 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 73810]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3147 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3148 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3149 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 60]
  Command: +
  Step-by-step: tick: 3150 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 61]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3151 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3152 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3153 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3154 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3155 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 61]
  Command: over
  Step-by-step: tick: 3156 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 61, 100]
  Command: -
  Step-by-step: tick: 3157 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 39]
  Command: -if 2
  Step-by-step: tick: 3158 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3159 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3160 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3161 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3162 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 61]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3163 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 61, 61]
  Command: *
  Step-by-step: tick: 3164 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3721]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3165 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3166 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 73810]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3167 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 73810, 3721]
  Command: +
  Step-by-step: tick: 3168 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 77531]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3169 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3170 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3171 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 61]
  Command: +
  Step-by-step: tick: 3172 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 62]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3173 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3174 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3175 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3176 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3177 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 62]
  Command: over
  Step-by-step: tick: 3178 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 62, 100]
  Command: -
  Step-by-step: tick: 3179 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 38]
  Command: -if 2
  Step-by-step: tick: 3180 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3181 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3182 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3183 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3184 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 62]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3185 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 62, 62]
  Command: *
  Step-by-step: tick: 3186 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3844]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3187 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3188 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 77531]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3189 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 77531, 3844]
  Command: +
  Step-by-step: tick: 3190 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81375]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3191 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3192 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3193 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 62]
  Command: +
  Step-by-step: tick: 3194 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 63]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3195 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3196 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3197 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3198 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3199 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 63]
  Command: over
  Step-by-step: tick: 3200 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 63, 100]
  Command: -
  Step-by-step: tick: 3201 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 37]
  Command: -if 2
  Step-by-step: tick: 3202 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3203 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3204 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3205 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3206 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 63]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3207 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 63, 63]
  Command: *
  Step-by-step: tick: 3208 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 3969]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3209 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3210 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81375]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3211 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81375, 3969]
  Command: +
  Step-by-step: tick: 3212 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 85344]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3213 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3214 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3215 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 63]
  Command: +
  Step-by-step: tick: 3216 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 64]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3217 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3218 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3219 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3220 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3221 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 64]
  Command: over
  Step-by-step: tick: 3222 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 64, 100]
  Command: -
  Step-by-step: tick: 3223 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 36]
  Command: -if 2
  Step-by-step: tick: 3224 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3225 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3226 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3227 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3228 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 64]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3229 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 64, 64]
  Command: *
  Step-by-step: tick: 3230 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4096]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3231 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3232 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 85344]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3233 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 85344, 4096]
  Command: +
  Step-by-step: tick: 3234 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 89440]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3235 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3236 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3237 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 64]
  Command: +
  Step-by-step: tick: 3238 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 65]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3239 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3240 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3241 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3242 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3243 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 65]
  Command: over
  Step-by-step: tick: 3244 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 65, 100]
  Command: -
  Step-by-step: tick: 3245 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 35]
  Command: -if 2
  Step-by-step: tick: 3246 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3247 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3248 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3249 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3250 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 65]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3251 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 65, 65]
  Command: *
  Step-by-step: tick: 3252 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4225]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3253 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3254 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 89440]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3255 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 89440, 4225]
  Command: +
  Step-by-step: tick: 3256 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 93665]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3257 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3258 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3259 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 65]
  Command: +
  Step-by-step: tick: 3260 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3261 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3262 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3263 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3264 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3265 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 66]
  Command: over
  Step-by-step: tick: 3266 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 66, 100]
  Command: -
  Step-by-step: tick: 3267 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 34]
  Command: -if 2
  Step-by-step: tick: 3268 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3269 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3270 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3271 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3272 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3273 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 66, 66]
  Command: *
  Step-by-step: tick: 3274 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4356]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3275 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3276 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 93665]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3277 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 93665, 4356]
  Command: +
  Step-by-step: tick: 3278 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 98021]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3279 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3280 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3281 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 66]
  Command: +
  Step-by-step: tick: 3282 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 67]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3283 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3284 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3285 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3286 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3287 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 67]
  Command: over
  Step-by-step: tick: 3288 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 67, 100]
  Command: -
  Step-by-step: tick: 3289 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 33]
  Command: -if 2
  Step-by-step: tick: 3290 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3291 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3292 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3293 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3294 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 67]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3295 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 67, 67]
  Command: *
  Step-by-step: tick: 3296 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4489]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3297 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3298 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 98021]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3299 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 98021, 4489]
  Command: +
  Step-by-step: tick: 3300 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 102510]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3301 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3302 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3303 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 67]
  Command: +
  Step-by-step: tick: 3304 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 68]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3305 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3306 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3307 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3308 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3309 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 68]
  Command: over
  Step-by-step: tick: 3310 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 68, 100]
  Command: -
  Step-by-step: tick: 3311 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 32]
  Command: -if 2
  Step-by-step: tick: 3312 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3313 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3314 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3315 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3316 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 68]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3317 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 68, 68]
  Command: *
  Step-by-step: tick: 3318 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4624]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3319 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3320 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 102510]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3321 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 102510, 4624]
  Command: +
  Step-by-step: tick: 3322 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 107134]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3323 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3324 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3325 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 68]
  Command: +
  Step-by-step: tick: 3326 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 69]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3327 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3328 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3329 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3330 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3331 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 69]
  Command: over
  Step-by-step: tick: 3332 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 69, 100]
  Command: -
  Step-by-step: tick: 3333 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 31]
  Command: -if 2
  Step-by-step: tick: 3334 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3335 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3336 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3337 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3338 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 69]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3339 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 69, 69]
  Command: *
  Step-by-step: tick: 3340 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4761]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3341 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3342 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 107134]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3343 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 107134, 4761]
  Command: +
  Step-by-step: tick: 3344 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 111895]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3345 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3346 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3347 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 69]
  Command: +
  Step-by-step: tick: 3348 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 70]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3349 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3350 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3351 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3352 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3353 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 70]
  Command: over
  Step-by-step: tick: 3354 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 70, 100]
  Command: -
  Step-by-step: tick: 3355 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 30]
  Command: -if 2
  Step-by-step: tick: 3356 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3357 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3358 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3359 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3360 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 70]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3361 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 70, 70]
  Command: *
  Step-by-step: tick: 3362 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 4900]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3363 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3364 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 111895]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3365 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 111895, 4900]
  Command: +
  Step-by-step: tick: 3366 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 116795]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3367 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3368 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3369 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 70]
  Command: +
  Step-by-step: tick: 3370 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 71]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3371 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3372 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3373 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3374 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3375 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 71]
  Command: over
  Step-by-step: tick: 3376 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 71, 100]
  Command: -
  Step-by-step: tick: 3377 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 29]
  Command: -if 2
  Step-by-step: tick: 3378 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3379 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3380 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3381 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3382 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 71]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3383 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 71, 71]
  Command: *
  Step-by-step: tick: 3384 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5041]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3385 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3386 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 116795]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3387 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 116795, 5041]
  Command: +
  Step-by-step: tick: 3388 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 121836]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3389 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3390 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3391 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 71]
  Command: +
  Step-by-step: tick: 3392 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 72]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3393 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3394 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3395 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3396 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3397 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 72]
  Command: over
  Step-by-step: tick: 3398 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 72, 100]
  Command: -
  Step-by-step: tick: 3399 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 28]
  Command: -if 2
  Step-by-step: tick: 3400 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3401 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3402 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3403 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3404 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 72]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3405 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 72, 72]
  Command: *
  Step-by-step: tick: 3406 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5184]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3407 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3408 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 121836]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3409 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 121836, 5184]
  Command: +
  Step-by-step: tick: 3410 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 127020]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3411 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3412 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3413 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 72]
  Command: +
  Step-by-step: tick: 3414 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 73]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3415 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3416 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3417 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3418 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3419 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 73]
  Command: over
  Step-by-step: tick: 3420 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 73, 100]
  Command: -
  Step-by-step: tick: 3421 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 27]
  Command: -if 2
  Step-by-step: tick: 3422 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3423 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3424 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3425 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3426 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 73]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3427 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 73, 73]
  Command: *
  Step-by-step: tick: 3428 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5329]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3429 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3430 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 127020]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3431 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 127020, 5329]
  Command: +
  Step-by-step: tick: 3432 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 132349]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3433 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3434 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3435 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 73]
  Command: +
  Step-by-step: tick: 3436 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 74]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3437 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3438 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3439 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3440 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3441 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 74]
  Command: over
  Step-by-step: tick: 3442 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 74, 100]
  Command: -
  Step-by-step: tick: 3443 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 26]
  Command: -if 2
  Step-by-step: tick: 3444 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3445 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3446 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3447 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3448 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 74]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3449 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 74, 74]
  Command: *
  Step-by-step: tick: 3450 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5476]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3451 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3452 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 132349]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3453 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 132349, 5476]
  Command: +
  Step-by-step: tick: 3454 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 137825]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3455 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3456 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3457 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 74]
  Command: +
  Step-by-step: tick: 3458 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 75]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3459 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3460 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3461 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3462 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3463 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 75]
  Command: over
  Step-by-step: tick: 3464 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 75, 100]
  Command: -
  Step-by-step: tick: 3465 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 25]
  Command: -if 2
  Step-by-step: tick: 3466 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3467 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3468 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3469 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3470 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 75]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3471 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 75, 75]
  Command: *
  Step-by-step: tick: 3472 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5625]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3473 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3474 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 137825]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3475 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 137825, 5625]
  Command: +
  Step-by-step: tick: 3476 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 143450]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3477 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3478 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3479 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 75]
  Command: +
  Step-by-step: tick: 3480 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 76]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3481 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3482 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3483 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3484 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3485 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 76]
  Command: over
  Step-by-step: tick: 3486 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 76, 100]
  Command: -
  Step-by-step: tick: 3487 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 24]
  Command: -if 2
  Step-by-step: tick: 3488 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3489 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3490 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3491 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3492 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 76]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3493 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 76, 76]
  Command: *
  Step-by-step: tick: 3494 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5776]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3495 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3496 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 143450]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3497 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 143450, 5776]
  Command: +
  Step-by-step: tick: 3498 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 149226]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3499 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3500 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3501 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 76]
  Command: +
  Step-by-step: tick: 3502 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 77]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3503 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3504 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3505 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3506 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3507 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 77]
  Command: over
  Step-by-step: tick: 3508 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 77, 100]
  Command: -
  Step-by-step: tick: 3509 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 23]
  Command: -if 2
  Step-by-step: tick: 3510 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3511 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3512 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3513 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3514 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 77]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3515 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 77, 77]
  Command: *
  Step-by-step: tick: 3516 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 5929]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3517 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3518 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 149226]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3519 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 149226, 5929]
  Command: +
  Step-by-step: tick: 3520 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 155155]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3521 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3522 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3523 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 77]
  Command: +
  Step-by-step: tick: 3524 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 78]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3525 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3526 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3527 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3528 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3529 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 78]
  Command: over
  Step-by-step: tick: 3530 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 78, 100]
  Command: -
  Step-by-step: tick: 3531 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 22]
  Command: -if 2
  Step-by-step: tick: 3532 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3533 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3534 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3535 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3536 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 78]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3537 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 78, 78]
  Command: *
  Step-by-step: tick: 3538 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6084]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3539 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3540 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 155155]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3541 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 155155, 6084]
  Command: +
  Step-by-step: tick: 3542 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 161239]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3543 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3544 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3545 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 78]
  Command: +
  Step-by-step: tick: 3546 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 79]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3547 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3548 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3549 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3550 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3551 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 79]
  Command: over
  Step-by-step: tick: 3552 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 79, 100]
  Command: -
  Step-by-step: tick: 3553 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 21]
  Command: -if 2
  Step-by-step: tick: 3554 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3555 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3556 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3557 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3558 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 79]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3559 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 79, 79]
  Command: *
  Step-by-step: tick: 3560 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6241]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3561 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3562 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 161239]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3563 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 161239, 6241]
  Command: +
  Step-by-step: tick: 3564 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 167480]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3565 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3566 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3567 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 79]
  Command: +
  Step-by-step: tick: 3568 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 80]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3569 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3570 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3571 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3572 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3573 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 80]
  Command: over
  Step-by-step: tick: 3574 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 80, 100]
  Command: -
  Step-by-step: tick: 3575 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 20]
  Command: -if 2
  Step-by-step: tick: 3576 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3577 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3578 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3579 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3580 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 80]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3581 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 80, 80]
  Command: *
  Step-by-step: tick: 3582 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6400]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3583 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3584 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 167480]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3585 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 167480, 6400]
  Command: +
  Step-by-step: tick: 3586 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 173880]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3587 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3588 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3589 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 80]
  Command: +
  Step-by-step: tick: 3590 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3591 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3592 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3593 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3594 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3595 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 81]
  Command: over
  Step-by-step: tick: 3596 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 81, 100]
  Command: -
  Step-by-step: tick: 3597 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 19]
  Command: -if 2
  Step-by-step: tick: 3598 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3599 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3600 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3601 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3602 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3603 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 81, 81]
  Command: *
  Step-by-step: tick: 3604 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6561]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3605 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3606 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 173880]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3607 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 173880, 6561]
  Command: +
  Step-by-step: tick: 3608 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 180441]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3609 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3610 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3611 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 81]
  Command: +
  Step-by-step: tick: 3612 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 82]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3613 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3614 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3615 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3616 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3617 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 82]
  Command: over
  Step-by-step: tick: 3618 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 82, 100]
  Command: -
  Step-by-step: tick: 3619 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 18]
  Command: -if 2
  Step-by-step: tick: 3620 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3621 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3622 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3623 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3624 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 82]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3625 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 82, 82]
  Command: *
  Step-by-step: tick: 3626 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6724]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3627 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3628 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 180441]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3629 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 180441, 6724]
  Command: +
  Step-by-step: tick: 3630 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 187165]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3631 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3632 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3633 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 82]
  Command: +
  Step-by-step: tick: 3634 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 83]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3635 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3636 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3637 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3638 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3639 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 83]
  Command: over
  Step-by-step: tick: 3640 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 83, 100]
  Command: -
  Step-by-step: tick: 3641 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 17]
  Command: -if 2
  Step-by-step: tick: 3642 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3643 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3644 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3645 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3646 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 83]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3647 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 83, 83]
  Command: *
  Step-by-step: tick: 3648 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 6889]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3649 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3650 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 187165]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3651 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 187165, 6889]
  Command: +
  Step-by-step: tick: 3652 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 194054]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3653 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3654 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3655 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 83]
  Command: +
  Step-by-step: tick: 3656 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 84]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3657 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3658 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3659 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3660 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3661 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 84]
  Command: over
  Step-by-step: tick: 3662 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 84, 100]
  Command: -
  Step-by-step: tick: 3663 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 16]
  Command: -if 2
  Step-by-step: tick: 3664 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3665 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3666 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3667 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3668 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 84]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3669 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 84, 84]
  Command: *
  Step-by-step: tick: 3670 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7056]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3671 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3672 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 194054]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3673 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 194054, 7056]
  Command: +
  Step-by-step: tick: 3674 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 201110]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3675 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3676 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3677 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 84]
  Command: +
  Step-by-step: tick: 3678 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 85]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3679 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3680 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3681 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3682 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3683 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 85]
  Command: over
  Step-by-step: tick: 3684 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 85, 100]
  Command: -
  Step-by-step: tick: 3685 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 15]
  Command: -if 2
  Step-by-step: tick: 3686 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3687 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3688 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3689 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3690 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 85]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3691 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 85, 85]
  Command: *
  Step-by-step: tick: 3692 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7225]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3693 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3694 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 201110]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3695 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 201110, 7225]
  Command: +
  Step-by-step: tick: 3696 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 208335]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3697 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3698 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3699 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 85]
  Command: +
  Step-by-step: tick: 3700 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 86]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3701 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3702 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3703 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3704 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3705 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 86]
  Command: over
  Step-by-step: tick: 3706 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 86, 100]
  Command: -
  Step-by-step: tick: 3707 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 14]
  Command: -if 2
  Step-by-step: tick: 3708 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3709 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3710 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3711 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3712 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 86]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3713 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 86, 86]
  Command: *
  Step-by-step: tick: 3714 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7396]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3715 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3716 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 208335]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3717 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 208335, 7396]
  Command: +
  Step-by-step: tick: 3718 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 215731]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3719 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3720 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3721 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 86]
  Command: +
  Step-by-step: tick: 3722 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 87]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3723 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3724 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3725 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3726 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3727 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 87]
  Command: over
  Step-by-step: tick: 3728 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 87, 100]
  Command: -
  Step-by-step: tick: 3729 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 13]
  Command: -if 2
  Step-by-step: tick: 3730 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3731 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3732 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3733 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3734 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 87]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3735 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 87, 87]
  Command: *
  Step-by-step: tick: 3736 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7569]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3737 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3738 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 215731]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3739 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 215731, 7569]
  Command: +
  Step-by-step: tick: 3740 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 223300]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3741 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3742 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3743 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 87]
  Command: +
  Step-by-step: tick: 3744 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 88]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3745 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3746 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3747 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3748 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3749 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 88]
  Command: over
  Step-by-step: tick: 3750 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 88, 100]
  Command: -
  Step-by-step: tick: 3751 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 12]
  Command: -if 2
  Step-by-step: tick: 3752 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3753 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3754 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3755 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3756 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 88]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3757 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 88, 88]
  Command: *
  Step-by-step: tick: 3758 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7744]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3759 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3760 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 223300]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3761 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 223300, 7744]
  Command: +
  Step-by-step: tick: 3762 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 231044]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3763 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3764 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3765 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 88]
  Command: +
  Step-by-step: tick: 3766 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 89]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3767 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3768 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3769 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3770 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3771 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 89]
  Command: over
  Step-by-step: tick: 3772 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 89, 100]
  Command: -
  Step-by-step: tick: 3773 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 11]
  Command: -if 2
  Step-by-step: tick: 3774 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3775 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3776 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3777 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3778 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 89]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3779 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 89, 89]
  Command: *
  Step-by-step: tick: 3780 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 7921]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3781 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3782 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 231044]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3783 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 231044, 7921]
  Command: +
  Step-by-step: tick: 3784 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 238965]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3785 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3786 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3787 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 89]
  Command: +
  Step-by-step: tick: 3788 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 90]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3789 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3790 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3791 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3792 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3793 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 90]
  Command: over
  Step-by-step: tick: 3794 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 90, 100]
  Command: -
  Step-by-step: tick: 3795 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 10]
  Command: -if 2
  Step-by-step: tick: 3796 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3797 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3798 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3799 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3800 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 90]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3801 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 90, 90]
  Command: *
  Step-by-step: tick: 3802 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8100]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3803 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3804 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 238965]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3805 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 238965, 8100]
  Command: +
  Step-by-step: tick: 3806 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 247065]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3807 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3808 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3809 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 90]
  Command: +
  Step-by-step: tick: 3810 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3811 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3812 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3813 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3814 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3815 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 91]
  Command: over
  Step-by-step: tick: 3816 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 91, 100]
  Command: -
  Step-by-step: tick: 3817 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 9]
  Command: -if 2
  Step-by-step: tick: 3818 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3819 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3820 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3821 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3822 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3823 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 91, 91]
  Command: *
  Step-by-step: tick: 3824 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8281]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3825 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3826 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 247065]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3827 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 247065, 8281]
  Command: +
  Step-by-step: tick: 3828 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 255346]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3829 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3830 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3831 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 91]
  Command: +
  Step-by-step: tick: 3832 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 92]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3833 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3834 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3835 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3836 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3837 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 92]
  Command: over
  Step-by-step: tick: 3838 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 92, 100]
  Command: -
  Step-by-step: tick: 3839 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 8]
  Command: -if 2
  Step-by-step: tick: 3840 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3841 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3842 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3843 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3844 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 92]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3845 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 92, 92]
  Command: *
  Step-by-step: tick: 3846 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8464]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3847 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3848 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 255346]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3849 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 255346, 8464]
  Command: +
  Step-by-step: tick: 3850 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 263810]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3851 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3852 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3853 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 92]
  Command: +
  Step-by-step: tick: 3854 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 93]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3855 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3856 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3857 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3858 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3859 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 93]
  Command: over
  Step-by-step: tick: 3860 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 93, 100]
  Command: -
  Step-by-step: tick: 3861 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 7]
  Command: -if 2
  Step-by-step: tick: 3862 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3863 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3864 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3865 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3866 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 93]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3867 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 93, 93]
  Command: *
  Step-by-step: tick: 3868 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8649]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3869 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3870 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 263810]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3871 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 263810, 8649]
  Command: +
  Step-by-step: tick: 3872 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 272459]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3873 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3874 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3875 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 93]
  Command: +
  Step-by-step: tick: 3876 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 94]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3877 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3878 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3879 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3880 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3881 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 94]
  Command: over
  Step-by-step: tick: 3882 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 94, 100]
  Command: -
  Step-by-step: tick: 3883 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 6]
  Command: -if 2
  Step-by-step: tick: 3884 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3885 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3886 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3887 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3888 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 94]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3889 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 94, 94]
  Command: *
  Step-by-step: tick: 3890 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 8836]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3891 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3892 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 272459]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3893 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 272459, 8836]
  Command: +
  Step-by-step: tick: 3894 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 281295]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3895 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3896 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3897 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 94]
  Command: +
  Step-by-step: tick: 3898 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 95]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3899 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3900 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3901 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3902 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3903 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 95]
  Command: over
  Step-by-step: tick: 3904 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 95, 100]
  Command: -
  Step-by-step: tick: 3905 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 5]
  Command: -if 2
  Step-by-step: tick: 3906 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3907 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3908 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3909 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3910 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 95]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3911 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 95, 95]
  Command: *
  Step-by-step: tick: 3912 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9025]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3913 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3914 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 281295]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3915 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 281295, 9025]
  Command: +
  Step-by-step: tick: 3916 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 290320]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3917 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3918 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3919 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 95]
  Command: +
  Step-by-step: tick: 3920 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 96]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3921 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3922 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3923 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3924 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3925 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 96]
  Command: over
  Step-by-step: tick: 3926 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 96, 100]
  Command: -
  Step-by-step: tick: 3927 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 4]
  Command: -if 2
  Step-by-step: tick: 3928 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3929 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3930 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3931 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3932 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 96]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3933 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 96, 96]
  Command: *
  Step-by-step: tick: 3934 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9216]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3935 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3936 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 290320]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3937 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 290320, 9216]
  Command: +
  Step-by-step: tick: 3938 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 299536]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3939 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3940 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3941 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 96]
  Command: +
  Step-by-step: tick: 3942 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 97]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3943 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3944 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3945 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3946 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3947 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 97]
  Command: over
  Step-by-step: tick: 3948 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 97, 100]
  Command: -
  Step-by-step: tick: 3949 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 3]
  Command: -if 2
  Step-by-step: tick: 3950 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3951 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3952 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3953 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3954 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 97]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3955 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 97, 97]
  Command: *
  Step-by-step: tick: 3956 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9409]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3957 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3958 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 299536]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3959 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 299536, 9409]
  Command: +
  Step-by-step: tick: 3960 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 308945]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3961 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3962 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3963 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 97]
  Command: +
  Step-by-step: tick: 3964 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 98]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3965 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3966 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3967 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3968 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3969 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 98]
  Command: over
  Step-by-step: tick: 3970 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 98, 100]
  Command: -
  Step-by-step: tick: 3971 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 2]
  Command: -if 2
  Step-by-step: tick: 3972 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3973 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3974 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3975 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3976 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 98]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3977 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 98, 98]
  Command: *
  Step-by-step: tick: 3978 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9604]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 3979 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 3980 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 308945]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 3981 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 308945, 9604]
  Command: +
  Step-by-step: tick: 3982 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 318549]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 3983 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 3984 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3985 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 98]
  Command: +
  Step-by-step: tick: 3986 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 99]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 3987 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 3988 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 3989 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 3990 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3991 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 99]
  Command: over
  Step-by-step: tick: 3992 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 99, 100]
  Command: -
  Step-by-step: tick: 3993 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: -if 2
  Step-by-step: tick: 3994 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 3995 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 3996 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 3997 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3998 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 99]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 3999 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 99, 99]
  Command: *
  Step-by-step: tick: 4000 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 9801]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 4001 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 4002 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 318549]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 4003 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 318549, 9801]
  Command: +
  Step-by-step: tick: 4004 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 328350]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 4005 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 4006 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 4007 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 99]
  Command: +
  Step-by-step: tick: 4008 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 100]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 4009 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 4010 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 4011 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 4012 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 4013 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 100]
  Command: over
  Step-by-step: tick: 4014 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 100]
  Command: -
  Step-by-step: tick: 4015 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 0]
  Command: -if 2
  Step-by-step: tick: 4016 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 1
  Step-by-step: tick: 4017 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 1]
  Command: if 14
  Step-by-step: tick: 4018 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: over
  Step-by-step: tick: 4019 || microcode - cpu: over || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 4020 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 4021 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 100, 100]
  Command: *
  Step-by-step: tick: 4022 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 10000]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 4023 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 4024 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 328350]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 4025 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 328350, 10000]
  Command: +
  Step-by-step: tick: 4026 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 338350]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 4027 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: dup
  Step-by-step: tick: 4028 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 4029 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 1, 100]
  Command: +
  Step-by-step: tick: 4030 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1, 101]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 4031 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: jmp -24
  Step-by-step: tick: 4032 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 1]
  Command: over
  Step-by-step: tick: 4033 || microcode - cpu: over || A: 0x80 || B: -0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: dup
  Step-by-step: tick: 4034 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 4035 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 100, 101]
  Command: over
  Step-by-step: tick: 4036 || microcode - cpu: over || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 101, 100]
  Command: -
  Step-by-step: tick: 4037 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, -1]
  Command: -if 2
  Step-by-step: tick: 4038 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: push_imm 0
  Step-by-step: tick: 4039 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 0]
  Command: jmp 1
  Step-by-step: tick: 4040 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100, 0]
  Command: if 14
  Step-by-step: tick: 4041 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 100]
  Command: pop
  Step-by-step: tick: 4042 || microcode - cpu: pop_stack || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: pop
  Step-by-step: tick: 4043 || microcode - cpu: pop_stack || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: ret
  Step-by-step: tick: 4044 || microcode - cpu: restore_pc || A: 0x80 || B: 0xe 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 4045 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338350]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 4046 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338350, 25502500]
  Command: -
  Step-by-step: tick: 4047 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25164150]
  Command: sw_to_imm_addr 0
  Step-by-step: tick: 4048 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 0
  Step-by-step: tick: 4049 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25164150]
  Command: call -80
  Step-by-step: tick: 4050 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x80 || B: -0x50 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25164150]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 4051 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25164150, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 4052 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25164150]
  Command: sw_to_a_addr
  Step-by-step: tick: 4053 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: ret
  Step-by-step: tick: 4054 || microcode - cpu: restore_pc || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: halt
  Step-by-step: tick: 4055 || microcode - cpu: kill_cpu || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  -----------
  Result: numio[0x80]: 
  numio[0x84]: 25164150
  tick_count = 4055
  [25164150](io:out:decbe)=[25164150] => RESULT=Passe
  -----------
