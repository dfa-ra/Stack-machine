input: |-
  cat
output: |
  -----------
  binary: 0x004 - 0x1028000000 - sw_to_imm_addr 0x00000028
  0x009 - 0x0101000000 - push_imm 0x00000001
  0x00e - 0x102c000000 - sw_to_imm_addr 0x0000002C
  0x013 - 0x0100000000 - push_imm 0x00000000
  0x018 - 0x0100000000 - push_imm 0x00000000
  0x01d - 0x30 - over
  0x01e - 0x08 - dup
  0x01f - 0x022c000000 - lw_from_imm_addr 0x0000002C
  0x024 - 0x30 - over
  0x025 - 0x21 - -
  0x026 - 0x4302000000 - if 0x00000002
  0x02b - 0x0101000000 - push_imm 0x00000001
  0x030 - 0x4001000000 - jmp 0x00000001
  0x035 - 0x0100000000 - push_imm 0x00000000
  0x03a - 0x431f000000 - if 0x0000001F
  0x03f - 0x30 - over
  0x040 - 0x0103000000 - push_imm 0x00000003
  0x045 - 0x0228000000 - lw_from_imm_addr 0x00000028
  0x04a - 0x21 - -
  0x04b - 0x06 - load_T_a_pop
  0x04c - 0x03 - lw_from_a_addr
  0x04d - 0x01000000ff - push_imm 0xFF000000
  0x052 - 0x28 - and
  0x053 - 0x08 - dup
  0x054 - 0x08 - dup
  0x055 - 0x102c000000 - sw_to_imm_addr 0x0000002C
  0x05a - 0x0100000000 - push_imm 0x00000000
  0x05f - 0x21 - -
  0x060 - 0x4302000000 - if 0x00000002
  0x065 - 0x0100000000 - push_imm 0x00000000
  0x06a - 0x4001000000 - jmp 0x00000001
  0x06f - 0x0101000000 - push_imm 0x00000001
  0x074 - 0x4301000000 - if 0x00000001
  0x079 - 0x4007000000 - jmp 0x00000007
  0x07e - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x083 - 0x06 - load_T_a_pop
  0x084 - 0x11 - sw_to_a_addr
  0x085 - 0x0228000000 - lw_from_imm_addr 0x00000028
  0x08a - 0x0101000000 - push_imm 0x00000001
  0x08f - 0x20 - +
  0x090 - 0x1028000000 - sw_to_imm_addr 0x00000028
  0x095 - 0x08 - dup
  0x096 - 0x022c000000 - lw_from_imm_addr 0x0000002C
  0x09b - 0x20 - +
  0x09c - 0x102c000000 - sw_to_imm_addr 0x0000002C
  0x0a1 - 0x40d7ffffff - jmp 0xFFFFFFD7
  0x0a6 - 0x16 - pop
  0x0a7 - 0x16 - pop
  0x0a8 - 0x42 - ret
  0x0a9 - 0x1030000000 - sw_to_imm_addr 0x00000030
  0x0ae - 0x0101000000 - push_imm 0x00000001
  0x0b3 - 0x1034000000 - sw_to_imm_addr 0x00000034
  0x0b8 - 0x0100000000 - push_imm 0x00000000
  0x0bd - 0x0100000000 - push_imm 0x00000000
  0x0c2 - 0x30 - over
  0x0c3 - 0x08 - dup
  0x0c4 - 0x0234000000 - lw_from_imm_addr 0x00000034
  0x0c9 - 0x30 - over
  0x0ca - 0x21 - -
  0x0cb - 0x4302000000 - if 0x00000002
  0x0d0 - 0x0101000000 - push_imm 0x00000001
  0x0d5 - 0x4001000000 - jmp 0x00000001
  0x0da - 0x0100000000 - push_imm 0x00000000
  0x0df - 0x4312000000 - if 0x00000012
  0x0e4 - 0x30 - over
  0x0e5 - 0x0220000000 - lw_from_imm_addr 0x00000020
  0x0ea - 0x06 - load_T_a_pop
  0x0eb - 0x03 - lw_from_a_addr
  0x0ec - 0x08 - dup
  0x0ed - 0x1034000000 - sw_to_imm_addr 0x00000034
  0x0f2 - 0x0230000000 - lw_from_imm_addr 0x00000030
  0x0f7 - 0x06 - load_T_a_pop
  0x0f8 - 0x11 - sw_to_a_addr
  0x0f9 - 0x0230000000 - lw_from_imm_addr 0x00000030
  0x0fe - 0x0101000000 - push_imm 0x00000001
  0x103 - 0x20 - +
  0x104 - 0x1030000000 - sw_to_imm_addr 0x00000030
  0x109 - 0x08 - dup
  0x10a - 0x0234000000 - lw_from_imm_addr 0x00000034
  0x10f - 0x20 - +
  0x110 - 0x1034000000 - sw_to_imm_addr 0x00000034
  0x115 - 0x40e4ffffff - jmp 0xFFFFFFE4
  0x11a - 0x16 - pop
  0x11b - 0x16 - pop
  0x11c - 0x42 - ret
  0x11d - 0x0100000000 - push_imm 0x00000000
  0x122 - 0x41daffffff - call 0xFFFFFFDA
  0x127 - 0x0100000000 - push_imm 0x00000000
  0x12c - 0x41a7ffffff - call 0xFFFFFFA7
  0x131 - 0x45 - halt
  -----------
  Command: push_imm 0
  Step-by-step: tick: 1 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: call -38
  Step-by-step: tick: 2 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x0 || B: -0x26 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 3 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 4 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 5 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 6 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 7 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 8 || microcode - cpu: over || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 9 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 10 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: over
  Step-by-step: tick: 11 || microcode - cpu: over || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: -
  Step-by-step: tick: 12 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
  Command: if 2
  Step-by-step: tick: 13 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 14 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 15 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 16 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 17 || microcode - cpu: over || A: 0x0 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 18 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 19 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 20 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
  Command: dup
  Step-by-step: tick: 21 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x48 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 72]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 22 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 23 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0]
  Command: load_T_a_pop
  Step-by-step: tick: 24 || microcode - cpu: pop_stack, load_T_a || A: 0x0 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
  Command: sw_to_a_addr
  Step-by-step: tick: 25 || microcode - alu: open_a, add | mem: write || A: 0x0 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 26 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 27 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: +
  Step-by-step: tick: 28 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 29 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 30 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 31 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
  Command: +
  Step-by-step: tick: 32 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 33 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 34 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x0 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 35 || microcode - cpu: over || A: 0x0 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 36 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 37 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
  Command: over
  Step-by-step: tick: 38 || microcode - cpu: over || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0]
  Command: -
  Step-by-step: tick: 39 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -72]
  Command: if 2
  Step-by-step: tick: 40 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 41 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 42 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 43 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 44 || microcode - cpu: over || A: 0x0 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 45 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 46 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 47 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101]
  Command: dup
  Step-by-step: tick: 48 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x65 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 101]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 49 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 50 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 1]
  Command: load_T_a_pop
  Step-by-step: tick: 51 || microcode - cpu: pop_stack, load_T_a || A: 0x1 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101]
  Command: sw_to_a_addr
  Step-by-step: tick: 52 || microcode - alu: open_a, add | mem: write || A: 0x1 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 53 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: push_imm 1
  Step-by-step: tick: 54 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  Command: +
  Step-by-step: tick: 55 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 56 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 57 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 58 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101]
  Command: +
  Step-by-step: tick: 59 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 60 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 61 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 62 || microcode - cpu: over || A: 0x1 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 63 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 64 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101]
  Command: over
  Step-by-step: tick: 65 || microcode - cpu: over || A: 0x1 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0]
  Command: -
  Step-by-step: tick: 66 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -101]
  Command: if 2
  Step-by-step: tick: 67 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 68 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 69 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 70 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 71 || microcode - cpu: over || A: 0x1 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 72 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 73 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 74 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: dup
  Step-by-step: tick: 75 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 108]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 76 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 77 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 2]
  Command: load_T_a_pop
  Step-by-step: tick: 78 || microcode - cpu: pop_stack, load_T_a || A: 0x2 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: sw_to_a_addr
  Step-by-step: tick: 79 || microcode - alu: open_a, add | mem: write || A: 0x2 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 80 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x2 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: push_imm 1
  Step-by-step: tick: 81 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1]
  Command: +
  Step-by-step: tick: 82 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 83 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x2 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 84 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 85 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x2 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: +
  Step-by-step: tick: 86 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x2 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 87 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x2 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 88 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x2 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 89 || microcode - cpu: over || A: 0x2 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 90 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 91 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x2 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: over
  Step-by-step: tick: 92 || microcode - cpu: over || A: 0x2 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0]
  Command: -
  Step-by-step: tick: 93 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x2 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108]
  Command: if 2
  Step-by-step: tick: 94 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x2 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 95 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 96 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 97 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x2 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 98 || microcode - cpu: over || A: 0x2 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 99 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x2 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 100 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 101 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: dup
  Step-by-step: tick: 102 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 108]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 103 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 104 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 3]
  Command: load_T_a_pop
  Step-by-step: tick: 105 || microcode - cpu: pop_stack, load_T_a || A: 0x3 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: sw_to_a_addr
  Step-by-step: tick: 106 || microcode - alu: open_a, add | mem: write || A: 0x3 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 107 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: push_imm 1
  Step-by-step: tick: 108 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1]
  Command: +
  Step-by-step: tick: 109 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 110 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 111 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 112 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: +
  Step-by-step: tick: 113 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x3 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 114 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 115 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 116 || microcode - cpu: over || A: 0x3 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 117 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 118 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: over
  Step-by-step: tick: 119 || microcode - cpu: over || A: 0x3 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0]
  Command: -
  Step-by-step: tick: 120 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108]
  Command: if 2
  Step-by-step: tick: 121 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 122 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 123 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 124 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 125 || microcode - cpu: over || A: 0x3 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 126 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 127 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 128 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: dup
  Step-by-step: tick: 129 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 111]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 130 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 131 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 4]
  Command: load_T_a_pop
  Step-by-step: tick: 132 || microcode - cpu: pop_stack, load_T_a || A: 0x4 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: sw_to_a_addr
  Step-by-step: tick: 133 || microcode - alu: open_a, add | mem: write || A: 0x4 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 134 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: push_imm 1
  Step-by-step: tick: 135 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
  Command: +
  Step-by-step: tick: 136 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x4 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 137 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 138 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 139 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: +
  Step-by-step: tick: 140 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x4 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 141 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 142 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 143 || microcode - cpu: over || A: 0x4 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 144 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 145 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: over
  Step-by-step: tick: 146 || microcode - cpu: over || A: 0x4 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0]
  Command: -
  Step-by-step: tick: 147 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111]
  Command: if 2
  Step-by-step: tick: 148 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 149 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 150 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 151 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 152 || microcode - cpu: over || A: 0x4 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 153 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 154 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 155 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32]
  Command: dup
  Step-by-step: tick: 156 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 157 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 158 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 5]
  Command: load_T_a_pop
  Step-by-step: tick: 159 || microcode - cpu: pop_stack, load_T_a || A: 0x5 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32]
  Command: sw_to_a_addr
  Step-by-step: tick: 160 || microcode - alu: open_a, add | mem: write || A: 0x5 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 161 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x5 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: push_imm 1
  Step-by-step: tick: 162 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x5 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1]
  Command: +
  Step-by-step: tick: 163 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x5 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 164 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x5 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 165 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x5 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 166 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x5 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32]
  Command: +
  Step-by-step: tick: 167 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x5 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 168 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x5 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 169 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x5 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 170 || microcode - cpu: over || A: 0x5 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 171 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x5 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 172 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x5 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32]
  Command: over
  Step-by-step: tick: 173 || microcode - cpu: over || A: 0x5 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0]
  Command: -
  Step-by-step: tick: 174 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x5 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32]
  Command: if 2
  Step-by-step: tick: 175 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x5 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 176 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x5 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 177 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x5 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 178 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x5 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 179 || microcode - cpu: over || A: 0x5 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 180 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x5 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 181 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 182 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119]
  Command: dup
  Step-by-step: tick: 183 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x77 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 119]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 184 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 185 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 6]
  Command: load_T_a_pop
  Step-by-step: tick: 186 || microcode - cpu: pop_stack, load_T_a || A: 0x6 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119]
  Command: sw_to_a_addr
  Step-by-step: tick: 187 || microcode - alu: open_a, add | mem: write || A: 0x6 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 188 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x6 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
  Command: push_imm 1
  Step-by-step: tick: 189 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x6 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1]
  Command: +
  Step-by-step: tick: 190 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x6 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 191 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x6 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 192 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x6 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 193 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x6 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119]
  Command: +
  Step-by-step: tick: 194 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x6 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 195 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x6 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 196 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x6 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 197 || microcode - cpu: over || A: 0x6 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 198 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x6 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 199 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x6 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119]
  Command: over
  Step-by-step: tick: 200 || microcode - cpu: over || A: 0x6 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0]
  Command: -
  Step-by-step: tick: 201 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x6 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119]
  Command: if 2
  Step-by-step: tick: 202 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x6 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 203 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x6 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 204 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x6 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 205 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x6 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 206 || microcode - cpu: over || A: 0x6 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 207 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x6 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 208 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 209 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: dup
  Step-by-step: tick: 210 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 111]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 211 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 212 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 7]
  Command: load_T_a_pop
  Step-by-step: tick: 213 || microcode - cpu: pop_stack, load_T_a || A: 0x7 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: sw_to_a_addr
  Step-by-step: tick: 214 || microcode - alu: open_a, add | mem: write || A: 0x7 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 215 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x7 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: push_imm 1
  Step-by-step: tick: 216 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x7 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: +
  Step-by-step: tick: 217 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x7 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 218 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x7 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 219 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x7 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 220 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x7 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: +
  Step-by-step: tick: 221 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x7 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 222 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x7 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 223 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x7 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 224 || microcode - cpu: over || A: 0x7 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 225 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x7 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 226 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x7 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
  Command: over
  Step-by-step: tick: 227 || microcode - cpu: over || A: 0x7 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0]
  Command: -
  Step-by-step: tick: 228 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x7 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111]
  Command: if 2
  Step-by-step: tick: 229 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x7 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 230 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x7 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 231 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x7 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 232 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x7 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 233 || microcode - cpu: over || A: 0x7 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 234 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x7 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 235 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 236 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114]
  Command: dup
  Step-by-step: tick: 237 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x72 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 114]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 238 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 239 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 8]
  Command: load_T_a_pop
  Step-by-step: tick: 240 || microcode - cpu: pop_stack, load_T_a || A: 0x8 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114]
  Command: sw_to_a_addr
  Step-by-step: tick: 241 || microcode - alu: open_a, add | mem: write || A: 0x8 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 242 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x8 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: push_imm 1
  Step-by-step: tick: 243 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x8 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1]
  Command: +
  Step-by-step: tick: 244 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x8 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 245 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x8 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 246 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 247 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x8 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114]
  Command: +
  Step-by-step: tick: 248 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x8 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 249 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x8 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 250 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x8 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 251 || microcode - cpu: over || A: 0x8 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 252 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 253 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x8 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114]
  Command: over
  Step-by-step: tick: 254 || microcode - cpu: over || A: 0x8 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0]
  Command: -
  Step-by-step: tick: 255 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x8 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114]
  Command: if 2
  Step-by-step: tick: 256 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x8 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 257 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x8 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 258 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x8 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 259 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x8 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 260 || microcode - cpu: over || A: 0x8 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 261 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x8 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 262 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 263 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: dup
  Step-by-step: tick: 264 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 108]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 265 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 266 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 9]
  Command: load_T_a_pop
  Step-by-step: tick: 267 || microcode - cpu: pop_stack, load_T_a || A: 0x9 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: sw_to_a_addr
  Step-by-step: tick: 268 || microcode - alu: open_a, add | mem: write || A: 0x9 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 269 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x9 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]
  Command: push_imm 1
  Step-by-step: tick: 270 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x9 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1]
  Command: +
  Step-by-step: tick: 271 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x9 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 272 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x9 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 273 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x9 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 274 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x9 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: +
  Step-by-step: tick: 275 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x9 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 276 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x9 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 277 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x9 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 278 || microcode - cpu: over || A: 0x9 || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 279 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x9 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 280 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x9 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108]
  Command: over
  Step-by-step: tick: 281 || microcode - cpu: over || A: 0x9 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0]
  Command: -
  Step-by-step: tick: 282 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x9 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108]
  Command: if 2
  Step-by-step: tick: 283 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x9 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 284 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x9 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 285 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x9 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 286 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x9 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 287 || microcode - cpu: over || A: 0x9 || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 288 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x9 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 289 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 290 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: dup
  Step-by-step: tick: 291 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 292 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 293 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 10]
  Command: load_T_a_pop
  Step-by-step: tick: 294 || microcode - cpu: pop_stack, load_T_a || A: 0xa || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: sw_to_a_addr
  Step-by-step: tick: 295 || microcode - alu: open_a, add | mem: write || A: 0xa || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 296 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xa || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]
  Command: push_imm 1
  Step-by-step: tick: 297 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xa || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1]
  Command: +
  Step-by-step: tick: 298 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0xa || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 299 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0xa || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 300 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0xa || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 301 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xa || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: +
  Step-by-step: tick: 302 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0xa || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 303 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0xa || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 304 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0xa || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 305 || microcode - cpu: over || A: 0xa || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 306 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0xa || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 307 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xa || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: over
  Step-by-step: tick: 308 || microcode - cpu: over || A: 0xa || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0]
  Command: -
  Step-by-step: tick: 309 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0xa || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100]
  Command: if 2
  Step-by-step: tick: 310 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0xa || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 311 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xa || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 312 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0xa || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 18
  Step-by-step: tick: 313 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0xa || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 314 || microcode - cpu: over || A: 0xa || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 315 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xa || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 316 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 317 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 318 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 319 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 320 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11]
  Command: load_T_a_pop
  Step-by-step: tick: 321 || microcode - cpu: pop_stack, load_T_a || A: 0xb || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_a_addr
  Step-by-step: tick: 322 || microcode - alu: open_a, add | mem: write || A: 0xb || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 323 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xb || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11]
  Command: push_imm 1
  Step-by-step: tick: 324 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 1]
  Command: +
  Step-by-step: tick: 325 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0xb || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 326 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0xb || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 327 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 328 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xb || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: +
  Step-by-step: tick: 329 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0xb || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 52
  Step-by-step: tick: 330 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0xb || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -28
  Step-by-step: tick: 331 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0xb || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 332 || microcode - cpu: over || A: 0xb || B: -0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 333 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 52
  Step-by-step: tick: 334 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xb || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 335 || microcode - cpu: over || A: 0xb || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: -
  Step-by-step: tick: 336 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0xb || B: 0x34 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 2
  Step-by-step: tick: 337 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0xb || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 338 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 18
  Step-by-step: tick: 339 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0xb || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 340 || microcode - cpu: pop_stack || A: 0xb || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 341 || microcode - cpu: pop_stack || A: 0xb || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: ret
  Step-by-step: tick: 342 || microcode - cpu: restore_pc || A: 0xb || B: 0x12 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 343 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: call -89
  Step-by-step: tick: 344 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0xb || B: -0x59 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 345 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0xb || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 346 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 347 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0xb || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 348 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 349 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 350 || microcode - cpu: over || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 351 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0xb || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 352 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xb || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: over
  Step-by-step: tick: 353 || microcode - cpu: over || A: 0xb || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: -
  Step-by-step: tick: 354 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0xb || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
  Command: if 2
  Step-by-step: tick: 355 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0xb || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 356 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 357 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0xb || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 358 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0xb || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 359 || microcode - cpu: over || A: 0xb || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 360 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0xb || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 361 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0xb || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]
  Command: -
  Step-by-step: tick: 362 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0xb || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3]
  Command: load_T_a_pop
  Step-by-step: tick: 363 || microcode - cpu: pop_stack, load_T_a || A: -0x3 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 364 || microcode - alu: open_a, add | mem: read || A: -0x3 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: push_imm -16777216
  Step-by-step: tick: 365 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x3 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, -16777216]
  Command: and
  Step-by-step: tick: 366 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: -0x3 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: dup
  Step-by-step: tick: 367 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: -0x3 || B: 0x48000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552]
  Command: dup
  Step-by-step: tick: 368 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: -0x3 || B: 0x48000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552, 1207959552]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 369 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: -0x3 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552]
  Command: push_imm 0
  Step-by-step: tick: 370 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552, 0]
  Command: -
  Step-by-step: tick: 371 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: -0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, -1207959552]
  Command: if 2
  Step-by-step: tick: 372 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: -0x3 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: push_imm 0
  Step-by-step: tick: 373 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 0]
  Command: jmp 1
  Step-by-step: tick: 374 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: -0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 0]
  Command: if 1
  Step-by-step: tick: 375 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: -0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 376 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: -0x3 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 377 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: sw_to_a_addr
  Step-by-step: tick: 378 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 379 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 380 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: +
  Step-by-step: tick: 381 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 382 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 383 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 384 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: +
  Step-by-step: tick: 385 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 386 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 387 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 388 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 389 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 390 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
  Command: over
  Step-by-step: tick: 391 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 0]
  Command: -
  Step-by-step: tick: 392 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1207959552]
  Command: if 2
  Step-by-step: tick: 393 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 394 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 395 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 396 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 397 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 398 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 399 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1]
  Command: -
  Step-by-step: tick: 400 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2]
  Command: load_T_a_pop
  Step-by-step: tick: 401 || microcode - cpu: pop_stack, load_T_a || A: -0x2 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 402 || microcode - alu: open_a, add | mem: read || A: -0x2 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1699217408]
  Command: push_imm -16777216
  Step-by-step: tick: 403 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x2 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1699217408, -16777216]
  Command: and
  Step-by-step: tick: 404 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: -0x2 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
  Command: dup
  Step-by-step: tick: 405 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: -0x2 || B: 0x65000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816]
  Command: dup
  Step-by-step: tick: 406 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: -0x2 || B: 0x65000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816, 1694498816]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 407 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: -0x2 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816]
  Command: push_imm 0
  Step-by-step: tick: 408 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816, 0]
  Command: -
  Step-by-step: tick: 409 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: -0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, -1694498816]
  Command: if 2
  Step-by-step: tick: 410 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: -0x2 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
  Command: push_imm 0
  Step-by-step: tick: 411 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
  Command: jmp 1
  Step-by-step: tick: 412 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: -0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
  Command: if 1
  Step-by-step: tick: 413 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: -0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 414 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: -0x2 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 415 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
  Command: sw_to_a_addr
  Step-by-step: tick: 416 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 417 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: push_imm 1
  Step-by-step: tick: 418 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  Command: +
  Step-by-step: tick: 419 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 420 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 421 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 422 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
  Command: +
  Step-by-step: tick: 423 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 424 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 425 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 426 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 427 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 428 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
  Command: over
  Step-by-step: tick: 429 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
  Command: -
  Step-by-step: tick: 430 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1694498816]
  Command: if 2
  Step-by-step: tick: 431 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 432 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 433 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 434 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 435 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 436 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 437 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2]
  Command: -
  Step-by-step: tick: 438 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
  Command: load_T_a_pop
  Step-by-step: tick: 439 || microcode - cpu: pop_stack, load_T_a || A: -0x1 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 440 || microcode - alu: open_a, add | mem: read || A: -0x1 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818576896]
  Command: push_imm -16777216
  Step-by-step: tick: 441 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x1 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818576896, -16777216]
  Command: and
  Step-by-step: tick: 442 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: -0x1 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: dup
  Step-by-step: tick: 443 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: -0x1 || B: 0x6c000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
  Command: dup
  Step-by-step: tick: 444 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: -0x1 || B: 0x6c000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 1811939328]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 445 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: -0x1 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
  Command: push_imm 0
  Step-by-step: tick: 446 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 0]
  Command: -
  Step-by-step: tick: 447 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: -0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, -1811939328]
  Command: if 2
  Step-by-step: tick: 448 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: -0x1 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: push_imm 0
  Step-by-step: tick: 449 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: -0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: jmp 1
  Step-by-step: tick: 450 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: -0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: if 1
  Step-by-step: tick: 451 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: -0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 452 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: -0x1 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 453 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: sw_to_a_addr
  Step-by-step: tick: 454 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 455 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: push_imm 1
  Step-by-step: tick: 456 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1]
  Command: +
  Step-by-step: tick: 457 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 458 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 459 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 460 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: +
  Step-by-step: tick: 461 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 462 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 463 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 464 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 465 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 466 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: over
  Step-by-step: tick: 467 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: -
  Step-by-step: tick: 468 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1811939328]
  Command: if 2
  Step-by-step: tick: 469 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 470 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 471 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 472 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 473 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 474 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 475 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3]
  Command: -
  Step-by-step: tick: 476 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: load_T_a_pop
  Step-by-step: tick: 477 || microcode - cpu: pop_stack, load_T_a || A: 0x0 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 478 || microcode - alu: open_a, add | mem: read || A: 0x0 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819043144]
  Command: push_imm -16777216
  Step-by-step: tick: 479 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819043144, -16777216]
  Command: and
  Step-by-step: tick: 480 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x0 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: dup
  Step-by-step: tick: 481 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x6c000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
  Command: dup
  Step-by-step: tick: 482 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x6c000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 1811939328]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 483 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
  Command: push_imm 0
  Step-by-step: tick: 484 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 0]
  Command: -
  Step-by-step: tick: 485 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, -1811939328]
  Command: if 2
  Step-by-step: tick: 486 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: push_imm 0
  Step-by-step: tick: 487 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: jmp 1
  Step-by-step: tick: 488 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: if 1
  Step-by-step: tick: 489 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 490 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 491 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: sw_to_a_addr
  Step-by-step: tick: 492 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 493 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: push_imm 1
  Step-by-step: tick: 494 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1]
  Command: +
  Step-by-step: tick: 495 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 496 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 497 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 498 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: +
  Step-by-step: tick: 499 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 500 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 501 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 502 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 503 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 504 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: over
  Step-by-step: tick: 505 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: -
  Step-by-step: tick: 506 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1811939328]
  Command: if 2
  Step-by-step: tick: 507 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 508 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 509 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 510 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 511 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 512 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 513 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4]
  Command: -
  Step-by-step: tick: 514 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: load_T_a_pop
  Step-by-step: tick: 515 || microcode - cpu: pop_stack, load_T_a || A: 0x1 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 516 || microcode - alu: open_a, add | mem: read || A: 0x1 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1869376613]
  Command: push_imm -16777216
  Step-by-step: tick: 517 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1869376613, -16777216]
  Command: and
  Step-by-step: tick: 518 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x1 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: dup
  Step-by-step: tick: 519 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1 || B: 0x6f000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
  Command: dup
  Step-by-step: tick: 520 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1 || B: 0x6f000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 1862270976]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 521 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
  Command: push_imm 0
  Step-by-step: tick: 522 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 0]
  Command: -
  Step-by-step: tick: 523 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, -1862270976]
  Command: if 2
  Step-by-step: tick: 524 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: push_imm 0
  Step-by-step: tick: 525 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
  Command: jmp 1
  Step-by-step: tick: 526 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
  Command: if 1
  Step-by-step: tick: 527 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 528 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 529 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: sw_to_a_addr
  Step-by-step: tick: 530 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 531 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: push_imm 1
  Step-by-step: tick: 532 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
  Command: +
  Step-by-step: tick: 533 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 534 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 535 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 536 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: +
  Step-by-step: tick: 537 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 538 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 539 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 540 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 541 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 542 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: over
  Step-by-step: tick: 543 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
  Command: -
  Step-by-step: tick: 544 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1862270976]
  Command: if 2
  Step-by-step: tick: 545 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 546 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 547 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 548 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 549 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 550 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 551 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5]
  Command: -
  Step-by-step: tick: 552 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: load_T_a_pop
  Step-by-step: tick: 553 || microcode - cpu: pop_stack, load_T_a || A: 0x2 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 554 || microcode - alu: open_a, add | mem: read || A: 0x2 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544173164]
  Command: push_imm -16777216
  Step-by-step: tick: 555 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x2 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544173164, -16777216]
  Command: and
  Step-by-step: tick: 556 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x2 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
  Command: dup
  Step-by-step: tick: 557 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x2 || B: 0x20000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
  Command: dup
  Step-by-step: tick: 558 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x2 || B: 0x20000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 536870912]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 559 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x2 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
  Command: push_imm 0
  Step-by-step: tick: 560 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 0]
  Command: -
  Step-by-step: tick: 561 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, -536870912]
  Command: if 2
  Step-by-step: tick: 562 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x2 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
  Command: push_imm 0
  Step-by-step: tick: 563 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x2 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
  Command: jmp 1
  Step-by-step: tick: 564 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
  Command: if 1
  Step-by-step: tick: 565 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x2 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 566 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x2 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 567 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
  Command: sw_to_a_addr
  Step-by-step: tick: 568 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 569 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: push_imm 1
  Step-by-step: tick: 570 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1]
  Command: +
  Step-by-step: tick: 571 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 572 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 573 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 574 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
  Command: +
  Step-by-step: tick: 575 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 576 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 577 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 578 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 579 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 580 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
  Command: over
  Step-by-step: tick: 581 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
  Command: -
  Step-by-step: tick: 582 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -536870912]
  Command: if 2
  Step-by-step: tick: 583 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 584 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 585 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 586 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 587 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 588 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 589 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6]
  Command: -
  Step-by-step: tick: 590 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: load_T_a_pop
  Step-by-step: tick: 591 || microcode - cpu: pop_stack, load_T_a || A: 0x3 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 592 || microcode - alu: open_a, add | mem: read || A: 0x3 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1998614380]
  Command: push_imm -16777216
  Step-by-step: tick: 593 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1998614380, -16777216]
  Command: and
  Step-by-step: tick: 594 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x3 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704]
  Command: dup
  Step-by-step: tick: 595 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3 || B: 0x77000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 1996488704]
  Command: dup
  Step-by-step: tick: 596 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3 || B: 0x77000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 1996488704, 1996488704]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 597 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 1996488704]
  Command: push_imm 0
  Step-by-step: tick: 598 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 1996488704, 0]
  Command: -
  Step-by-step: tick: 599 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, -1996488704]
  Command: if 2
  Step-by-step: tick: 600 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704]
  Command: push_imm 0
  Step-by-step: tick: 601 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 0]
  Command: jmp 1
  Step-by-step: tick: 602 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 0]
  Command: if 1
  Step-by-step: tick: 603 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 604 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 605 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704]
  Command: sw_to_a_addr
  Step-by-step: tick: 606 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 607 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
  Command: push_imm 1
  Step-by-step: tick: 608 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1]
  Command: +
  Step-by-step: tick: 609 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 610 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 611 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 612 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704]
  Command: +
  Step-by-step: tick: 613 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 614 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 615 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 616 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 617 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 618 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704]
  Command: over
  Step-by-step: tick: 619 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1996488704, 0]
  Command: -
  Step-by-step: tick: 620 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1996488704]
  Command: if 2
  Step-by-step: tick: 621 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 622 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 623 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 624 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 625 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 626 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 627 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7]
  Command: -
  Step-by-step: tick: 628 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: load_T_a_pop
  Step-by-step: tick: 629 || microcode - cpu: pop_stack, load_T_a || A: 0x4 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 630 || microcode - alu: open_a, add | mem: read || A: 0x4 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1870078063]
  Command: push_imm -16777216
  Step-by-step: tick: 631 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1870078063, -16777216]
  Command: and
  Step-by-step: tick: 632 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x4 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: dup
  Step-by-step: tick: 633 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4 || B: 0x6f000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
  Command: dup
  Step-by-step: tick: 634 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4 || B: 0x6f000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 1862270976]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 635 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
  Command: push_imm 0
  Step-by-step: tick: 636 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 0]
  Command: -
  Step-by-step: tick: 637 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, -1862270976]
  Command: if 2
  Step-by-step: tick: 638 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: push_imm 0
  Step-by-step: tick: 639 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
  Command: jmp 1
  Step-by-step: tick: 640 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
  Command: if 1
  Step-by-step: tick: 641 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 642 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 643 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: sw_to_a_addr
  Step-by-step: tick: 644 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 645 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: push_imm 1
  Step-by-step: tick: 646 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: +
  Step-by-step: tick: 647 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 648 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 649 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 650 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: +
  Step-by-step: tick: 651 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 652 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 653 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 654 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 655 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 656 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
  Command: over
  Step-by-step: tick: 657 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
  Command: -
  Step-by-step: tick: 658 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1862270976]
  Command: if 2
  Step-by-step: tick: 659 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 660 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 661 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 662 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 663 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 664 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 665 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 8]
  Command: -
  Step-by-step: tick: 666 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: load_T_a_pop
  Step-by-step: tick: 667 || microcode - cpu: pop_stack, load_T_a || A: 0x5 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 668 || microcode - alu: open_a, add | mem: read || A: 0x5 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1919907616]
  Command: push_imm -16777216
  Step-by-step: tick: 669 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x5 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1919907616, -16777216]
  Command: and
  Step-by-step: tick: 670 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x5 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
  Command: dup
  Step-by-step: tick: 671 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x5 || B: 0x72000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624]
  Command: dup
  Step-by-step: tick: 672 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x5 || B: 0x72000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624, 1912602624]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 673 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x5 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624]
  Command: push_imm 0
  Step-by-step: tick: 674 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x5 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624, 0]
  Command: -
  Step-by-step: tick: 675 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x5 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, -1912602624]
  Command: if 2
  Step-by-step: tick: 676 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x5 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
  Command: push_imm 0
  Step-by-step: tick: 677 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x5 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 0]
  Command: jmp 1
  Step-by-step: tick: 678 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x5 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 0]
  Command: if 1
  Step-by-step: tick: 679 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x5 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 680 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x5 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 681 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
  Command: sw_to_a_addr
  Step-by-step: tick: 682 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 683 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: push_imm 1
  Step-by-step: tick: 684 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1]
  Command: +
  Step-by-step: tick: 685 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 686 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 687 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 688 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
  Command: +
  Step-by-step: tick: 689 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 690 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 691 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 692 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 693 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 694 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
  Command: over
  Step-by-step: tick: 695 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 0]
  Command: -
  Step-by-step: tick: 696 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1912602624]
  Command: if 2
  Step-by-step: tick: 697 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 698 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 699 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 700 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 701 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 702 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 703 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 9]
  Command: -
  Step-by-step: tick: 704 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
  Command: load_T_a_pop
  Step-by-step: tick: 705 || microcode - cpu: pop_stack, load_T_a || A: 0x6 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 706 || microcode - alu: open_a, add | mem: read || A: 0x6 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819438967]
  Command: push_imm -16777216
  Step-by-step: tick: 707 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x6 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819438967, -16777216]
  Command: and
  Step-by-step: tick: 708 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x6 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: dup
  Step-by-step: tick: 709 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x6 || B: 0x6c000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
  Command: dup
  Step-by-step: tick: 710 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x6 || B: 0x6c000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 1811939328]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 711 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x6 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
  Command: push_imm 0
  Step-by-step: tick: 712 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x6 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 0]
  Command: -
  Step-by-step: tick: 713 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x6 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, -1811939328]
  Command: if 2
  Step-by-step: tick: 714 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x6 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: push_imm 0
  Step-by-step: tick: 715 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x6 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: jmp 1
  Step-by-step: tick: 716 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x6 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: if 1
  Step-by-step: tick: 717 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x6 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 718 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x6 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 719 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: sw_to_a_addr
  Step-by-step: tick: 720 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 721 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9]
  Command: push_imm 1
  Step-by-step: tick: 722 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1]
  Command: +
  Step-by-step: tick: 723 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 724 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 725 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 726 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: +
  Step-by-step: tick: 727 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 728 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 729 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 730 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 731 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 732 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
  Command: over
  Step-by-step: tick: 733 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
  Command: -
  Step-by-step: tick: 734 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1811939328]
  Command: if 2
  Step-by-step: tick: 735 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 736 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 737 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 738 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 739 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 740 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 741 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 10]
  Command: -
  Step-by-step: tick: 742 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: load_T_a_pop
  Step-by-step: tick: 743 || microcode - cpu: pop_stack, load_T_a || A: 0x7 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 744 || microcode - alu: open_a, add | mem: read || A: 0x7 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1684828783]
  Command: push_imm -16777216
  Step-by-step: tick: 745 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x7 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1684828783, -16777216]
  Command: and
  Step-by-step: tick: 746 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x7 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600]
  Command: dup
  Step-by-step: tick: 747 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x7 || B: 0x64000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 1677721600]
  Command: dup
  Step-by-step: tick: 748 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x7 || B: 0x64000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 1677721600, 1677721600]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 749 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x7 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 1677721600]
  Command: push_imm 0
  Step-by-step: tick: 750 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x7 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 1677721600, 0]
  Command: -
  Step-by-step: tick: 751 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x7 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, -1677721600]
  Command: if 2
  Step-by-step: tick: 752 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x7 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600]
  Command: push_imm 0
  Step-by-step: tick: 753 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x7 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 0]
  Command: jmp 1
  Step-by-step: tick: 754 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x7 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 0]
  Command: if 1
  Step-by-step: tick: 755 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x7 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 756 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x7 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 757 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600]
  Command: sw_to_a_addr
  Step-by-step: tick: 758 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 759 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]
  Command: push_imm 1
  Step-by-step: tick: 760 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1]
  Command: +
  Step-by-step: tick: 761 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 762 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 763 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 764 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600]
  Command: +
  Step-by-step: tick: 765 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 766 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 767 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 768 || microcode - cpu: over || A: 0x84 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 769 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 770 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600]
  Command: over
  Step-by-step: tick: 771 || microcode - cpu: over || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1677721600, 0]
  Command: -
  Step-by-step: tick: 772 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1677721600]
  Command: if 2
  Step-by-step: tick: 773 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 774 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 775 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 31
  Step-by-step: tick: 776 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 777 || microcode - cpu: over || A: 0x84 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 3
  Step-by-step: tick: 778 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 779 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 11]
  Command: -
  Step-by-step: tick: 780 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: load_T_a_pop
  Step-by-step: tick: 781 || microcode - cpu: pop_stack, load_T_a || A: 0x8 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 782 || microcode - alu: open_a, add | mem: read || A: 0x8 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6581362]
  Command: push_imm -16777216
  Step-by-step: tick: 783 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x8 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6581362, -16777216]
  Command: and
  Step-by-step: tick: 784 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x8 || B: -0x1000000 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 785 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 786 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 787 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x8 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 788 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: -
  Step-by-step: tick: 789 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 2
  Step-by-step: tick: 790 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x8 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 791 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x8 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 1
  Step-by-step: tick: 792 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x8 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp 7
  Step-by-step: tick: 793 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x8 || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 794 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 795 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x8 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: +
  Step-by-step: tick: 796 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x8 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 797 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x8 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -41
  Step-by-step: tick: 798 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x8 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 799 || microcode - cpu: over || A: 0x8 || B: -0x29 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 800 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 801 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x8 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 802 || microcode - cpu: over || A: 0x8 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: -
  Step-by-step: tick: 803 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x8 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 2
  Step-by-step: tick: 804 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x8 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 805 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x8 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 31
  Step-by-step: tick: 806 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x8 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 807 || microcode - cpu: pop_stack || A: 0x8 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 808 || microcode - cpu: pop_stack || A: 0x8 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: ret
  Step-by-step: tick: 809 || microcode - cpu: restore_pc || A: 0x8 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: halt
  Step-by-step: tick: 810 || microcode - cpu: kill_cpu || A: 0x8 || B: 0x1f 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  -----------
  Result: numio[0x80]: 
  numio[0x84]: 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100
  tick_count = 810
  [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100](io:out:dec)=[72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100] => RESULT=Passed
  [Hello world](io:out:str)=[Hello world] => RESULT=Passe
  -----------
