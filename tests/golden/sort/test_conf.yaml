input: |-
  sort
output: |
  -----------
  binary: 0x004 - 0x1014000000 - sw_to_imm_addr 0x00000014
  0x009 - 0x0100000000 - push_imm 0x00000000
  0x00e - 0x1018000000 - sw_to_imm_addr 0x00000018
  0x013 - 0x0101000000 - push_imm 0x00000001
  0x018 - 0x101c000000 - sw_to_imm_addr 0x0000001C
  0x01d - 0x0100000000 - push_imm 0x00000000
  0x022 - 0x0100000000 - push_imm 0x00000000
  0x027 - 0x30 - over
  0x028 - 0x08 - dup
  0x029 - 0x021c000000 - lw_from_imm_addr 0x0000001C
  0x02e - 0x30 - over
  0x02f - 0x21 - -
  0x030 - 0x4302000000 - if 0x00000002
  0x035 - 0x0101000000 - push_imm 0x00000001
  0x03a - 0x4001000000 - jmp 0x00000001
  0x03f - 0x0100000000 - push_imm 0x00000000
  0x044 - 0x4316000000 - if 0x00000016
  0x049 - 0x30 - over
  0x04a - 0x020c000000 - lw_from_imm_addr 0x0000000C
  0x04f - 0x06 - load_T_a_pop
  0x050 - 0x03 - lw_from_a_addr
  0x051 - 0x08 - dup
  0x052 - 0x101c000000 - sw_to_imm_addr 0x0000001C
  0x057 - 0x0214000000 - lw_from_imm_addr 0x00000014
  0x05c - 0x06 - load_T_a_pop
  0x05d - 0x11 - sw_to_a_addr
  0x05e - 0x0214000000 - lw_from_imm_addr 0x00000014
  0x063 - 0x0104000000 - push_imm 0x00000004
  0x068 - 0x20 - +
  0x069 - 0x1014000000 - sw_to_imm_addr 0x00000014
  0x06e - 0x0101000000 - push_imm 0x00000001
  0x073 - 0x0218000000 - lw_from_imm_addr 0x00000018
  0x078 - 0x20 - +
  0x079 - 0x1018000000 - sw_to_imm_addr 0x00000018
  0x07e - 0x08 - dup
  0x07f - 0x021c000000 - lw_from_imm_addr 0x0000001C
  0x084 - 0x20 - +
  0x085 - 0x101c000000 - sw_to_imm_addr 0x0000001C
  0x08a - 0x40e0ffffff - jmp 0xFFFFFFE0
  0x08f - 0x16 - pop
  0x090 - 0x16 - pop
  0x091 - 0x0101000000 - push_imm 0x00000001
  0x096 - 0x0218000000 - lw_from_imm_addr 0x00000018
  0x09b - 0x21 - -
  0x09c - 0x42 - ret
  0x09d - 0x1020000000 - sw_to_imm_addr 0x00000020
  0x0a2 - 0x0101000000 - push_imm 0x00000001
  0x0a7 - 0x1024000000 - sw_to_imm_addr 0x00000024
  0x0ac - 0x0100000000 - push_imm 0x00000000
  0x0b1 - 0x0100000000 - push_imm 0x00000000
  0x0b6 - 0x30 - over
  0x0b7 - 0x08 - dup
  0x0b8 - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x0bd - 0x30 - over
  0x0be - 0x21 - -
  0x0bf - 0x4302000000 - if 0x00000002
  0x0c4 - 0x0101000000 - push_imm 0x00000001
  0x0c9 - 0x4001000000 - jmp 0x00000001
  0x0ce - 0x0100000000 - push_imm 0x00000000
  0x0d3 - 0x431b000000 - if 0x0000001B
  0x0d8 - 0x30 - over
  0x0d9 - 0x0220000000 - lw_from_imm_addr 0x00000020
  0x0de - 0x06 - load_T_a_pop
  0x0df - 0x03 - lw_from_a_addr
  0x0e0 - 0x08 - dup
  0x0e1 - 0x08 - dup
  0x0e2 - 0x1024000000 - sw_to_imm_addr 0x00000024
  0x0e7 - 0x0100000000 - push_imm 0x00000000
  0x0ec - 0x21 - -
  0x0ed - 0x4302000000 - if 0x00000002
  0x0f2 - 0x0100000000 - push_imm 0x00000000
  0x0f7 - 0x4001000000 - jmp 0x00000001
  0x0fc - 0x0101000000 - push_imm 0x00000001
  0x101 - 0x4301000000 - if 0x00000001
  0x106 - 0x4007000000 - jmp 0x00000007
  0x10b - 0x0210000000 - lw_from_imm_addr 0x00000010
  0x110 - 0x06 - load_T_a_pop
  0x111 - 0x11 - sw_to_a_addr
  0x112 - 0x0220000000 - lw_from_imm_addr 0x00000020
  0x117 - 0x0104000000 - push_imm 0x00000004
  0x11c - 0x20 - +
  0x11d - 0x1020000000 - sw_to_imm_addr 0x00000020
  0x122 - 0x08 - dup
  0x123 - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x128 - 0x20 - +
  0x129 - 0x1024000000 - sw_to_imm_addr 0x00000024
  0x12e - 0x40dbffffff - jmp 0xFFFFFFDB
  0x133 - 0x16 - pop
  0x134 - 0x16 - pop
  0x135 - 0x42 - ret
  0x136 - 0x0100000000 - push_imm 0x00000000
  0x13b - 0x1028000000 - sw_to_imm_addr 0x00000028
  0x140 - 0x0100000000 - push_imm 0x00000000
  0x145 - 0x1024000000 - sw_to_imm_addr 0x00000024
  0x14a - 0x0100000000 - push_imm 0x00000000
  0x14f - 0x102c000000 - sw_to_imm_addr 0x0000002C
  0x154 - 0x0208000000 - lw_from_imm_addr 0x00000008
  0x159 - 0x0101000000 - push_imm 0x00000001
  0x15e - 0x30 - over
  0x15f - 0x08 - dup
  0x160 - 0x022c000000 - lw_from_imm_addr 0x0000002C
  0x165 - 0x30 - over
  0x166 - 0x21 - -
  0x167 - 0x01ffffffff - push_imm 0xFFFFFFFF
  0x16c - 0x20 - +
  0x16d - 0x4402000000 - -if 0x00000002
  0x172 - 0x0100000000 - push_imm 0x00000000
  0x177 - 0x4001000000 - jmp 0x00000001
  0x17c - 0x0101000000 - push_imm 0x00000001
  0x181 - 0x4358000000 - if 0x00000058
  0x186 - 0x30 - over
  0x187 - 0x0101000000 - push_imm 0x00000001
  0x18c - 0x022c000000 - lw_from_imm_addr 0x0000002C
  0x191 - 0x0208000000 - lw_from_imm_addr 0x00000008
  0x196 - 0x21 - -
  0x197 - 0x21 - -
  0x198 - 0x1028000000 - sw_to_imm_addr 0x00000028
  0x19d - 0x0100000000 - push_imm 0x00000000
  0x1a2 - 0x1030000000 - sw_to_imm_addr 0x00000030
  0x1a7 - 0x0228000000 - lw_from_imm_addr 0x00000028
  0x1ac - 0x0101000000 - push_imm 0x00000001
  0x1b1 - 0x30 - over
  0x1b2 - 0x08 - dup
  0x1b3 - 0x0230000000 - lw_from_imm_addr 0x00000030
  0x1b8 - 0x30 - over
  0x1b9 - 0x21 - -
  0x1ba - 0x01ffffffff - push_imm 0xFFFFFFFF
  0x1bf - 0x20 - +
  0x1c0 - 0x4402000000 - -if 0x00000002
  0x1c5 - 0x0100000000 - push_imm 0x00000000
  0x1ca - 0x4001000000 - jmp 0x00000001
  0x1cf - 0x0101000000 - push_imm 0x00000001
  0x1d4 - 0x433a000000 - if 0x0000003A
  0x1d9 - 0x30 - over
  0x1da - 0x0230000000 - lw_from_imm_addr 0x00000030
  0x1df - 0x0104000000 - push_imm 0x00000004
  0x1e4 - 0x22 - *
  0x1e5 - 0x1024000000 - sw_to_imm_addr 0x00000024
  0x1ea - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x1ef - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x1f4 - 0x20 - +
  0x1f5 - 0x06 - load_T_a_pop
  0x1f6 - 0x03 - lw_from_a_addr
  0x1f7 - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x1fc - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x201 - 0x0104000000 - push_imm 0x00000004
  0x206 - 0x20 - +
  0x207 - 0x20 - +
  0x208 - 0x06 - load_T_a_pop
  0x209 - 0x03 - lw_from_a_addr
  0x20a - 0x21 - -
  0x20b - 0x26 - not
  0x20c - 0x2a - inc
  0x20d - 0x01ffffffff - push_imm 0xFFFFFFFF
  0x212 - 0x20 - +
  0x213 - 0x4402000000 - -if 0x00000002
  0x218 - 0x0100000000 - push_imm 0x00000000
  0x21d - 0x4001000000 - jmp 0x00000001
  0x222 - 0x0101000000 - push_imm 0x00000001
  0x227 - 0x431a000000 - if 0x0000001A
  0x22c - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x231 - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x236 - 0x20 - +
  0x237 - 0x06 - load_T_a_pop
  0x238 - 0x03 - lw_from_a_addr
  0x239 - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x23e - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x243 - 0x0104000000 - push_imm 0x00000004
  0x248 - 0x20 - +
  0x249 - 0x20 - +
  0x24a - 0x06 - load_T_a_pop
  0x24b - 0x03 - lw_from_a_addr
  0x24c - 0x30 - over
  0x24d - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x252 - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x257 - 0x0104000000 - push_imm 0x00000004
  0x25c - 0x20 - +
  0x25d - 0x20 - +
  0x25e - 0x06 - load_T_a_pop
  0x25f - 0x11 - sw_to_a_addr
  0x260 - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x265 - 0x0224000000 - lw_from_imm_addr 0x00000024
  0x26a - 0x20 - +
  0x26b - 0x06 - load_T_a_pop
  0x26c - 0x11 - sw_to_a_addr
  0x26d - 0x4000000000 - jmp 0x00000000
  0x272 - 0x08 - dup
  0x273 - 0x0230000000 - lw_from_imm_addr 0x00000030
  0x278 - 0x20 - +
  0x279 - 0x1030000000 - sw_to_imm_addr 0x00000030
  0x27e - 0x40baffffff - jmp 0xFFFFFFBA
  0x283 - 0x16 - pop
  0x284 - 0x16 - pop
  0x285 - 0x08 - dup
  0x286 - 0x022c000000 - lw_from_imm_addr 0x0000002C
  0x28b - 0x20 - +
  0x28c - 0x102c000000 - sw_to_imm_addr 0x0000002C
  0x291 - 0x409cffffff - jmp 0xFFFFFF9C
  0x296 - 0x16 - pop
  0x297 - 0x16 - pop
  0x298 - 0x42 - ret
  0x299 - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x29e - 0x4135ffffff - call 0xFFFFFF35
  0x2a3 - 0x1008000000 - sw_to_imm_addr 0x00000008
  0x2a8 - 0x418dffffff - call 0xFFFFFF8D
  0x2ad - 0x0204000000 - lw_from_imm_addr 0x00000004
  0x2b2 - 0x415effffff - call 0xFFFFFF5E
  0x2b7 - 0x45 - halt
  -----------
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256]
  Command: call -203
  Step-by-step: tick: 2 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, call || A: 0x0 || B: -0xcb 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 3 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 4 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 5 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 6 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 7 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 8 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 9 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 10 || microcode - cpu: over || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 11 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 12 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: over
  Step-by-step: tick: 13 || microcode - cpu: over || A: 0x0 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: -
  Step-by-step: tick: 14 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
  Command: if 2
  Step-by-step: tick: 15 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 16 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 17 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x0 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 18 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 19 || microcode - cpu: over || A: 0x0 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 20 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 21 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 22 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: dup
  Step-by-step: tick: 23 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 24 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 25 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 26 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: sw_to_a_addr
  Step-by-step: tick: 27 || microcode - alu: open_a, add | mem: write || A: 0x100 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 28 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256]
  Command: push_imm 4
  Step-by-step: tick: 29 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 4]
  Command: +
  Step-by-step: tick: 30 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 31 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x100 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 32 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 33 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: +
  Step-by-step: tick: 34 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 35 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x100 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 36 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x100 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 37 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: +
  Step-by-step: tick: 38 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 39 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x100 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 40 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x100 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 41 || microcode - cpu: over || A: 0x100 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 42 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x100 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 43 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: over
  Step-by-step: tick: 44 || microcode - cpu: over || A: 0x100 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
  Command: -
  Step-by-step: tick: 45 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x100 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2]
  Command: if 2
  Step-by-step: tick: 46 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x100 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 47 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 48 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 49 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x100 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 50 || microcode - cpu: over || A: 0x100 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 51 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 52 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 53 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: dup
  Step-by-step: tick: 54 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 55 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 56 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 57 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_a_addr
  Step-by-step: tick: 58 || microcode - alu: open_a, add | mem: write || A: 0x104 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 59 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260]
  Command: push_imm 4
  Step-by-step: tick: 60 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 4]
  Command: +
  Step-by-step: tick: 61 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 62 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 63 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 64 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  Command: +
  Step-by-step: tick: 65 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 66 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 67 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 68 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: +
  Step-by-step: tick: 69 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 70 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 71 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 72 || microcode - cpu: over || A: 0x104 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 73 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 74 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: over
  Step-by-step: tick: 75 || microcode - cpu: over || A: 0x104 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: -
  Step-by-step: tick: 76 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
  Command: if 2
  Step-by-step: tick: 77 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 78 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 79 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 80 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 81 || microcode - cpu: over || A: 0x104 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 82 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 83 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 84 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: dup
  Step-by-step: tick: 85 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 86 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 87 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 88 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: sw_to_a_addr
  Step-by-step: tick: 89 || microcode - alu: open_a, add | mem: write || A: 0x108 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 90 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264]
  Command: push_imm 4
  Step-by-step: tick: 91 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 4]
  Command: +
  Step-by-step: tick: 92 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 93 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 94 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 95 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2]
  Command: +
  Step-by-step: tick: 96 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 97 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 98 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 99 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: +
  Step-by-step: tick: 100 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 101 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 102 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 103 || microcode - cpu: over || A: 0x108 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 104 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 105 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: over
  Step-by-step: tick: 106 || microcode - cpu: over || A: 0x108 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
  Command: -
  Step-by-step: tick: 107 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4]
  Command: if 2
  Step-by-step: tick: 108 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 109 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 110 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 111 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 112 || microcode - cpu: over || A: 0x108 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 113 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 114 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 115 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: dup
  Step-by-step: tick: 116 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 117 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 118 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 119 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: sw_to_a_addr
  Step-by-step: tick: 120 || microcode - alu: open_a, add | mem: write || A: 0x10c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 121 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268]
  Command: push_imm 4
  Step-by-step: tick: 122 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 4]
  Command: +
  Step-by-step: tick: 123 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 124 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 125 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 126 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3]
  Command: +
  Step-by-step: tick: 127 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 128 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 129 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 130 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: +
  Step-by-step: tick: 131 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 132 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 133 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 134 || microcode - cpu: over || A: 0x10c || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 135 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 136 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: over
  Step-by-step: tick: 137 || microcode - cpu: over || A: 0x10c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]
  Command: -
  Step-by-step: tick: 138 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3]
  Command: if 2
  Step-by-step: tick: 139 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 140 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 141 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 142 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 143 || microcode - cpu: over || A: 0x10c || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 144 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 145 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 146 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: dup
  Step-by-step: tick: 147 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 148 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 149 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 150 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: sw_to_a_addr
  Step-by-step: tick: 151 || microcode - alu: open_a, add | mem: write || A: 0x110 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 152 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272]
  Command: push_imm 4
  Step-by-step: tick: 153 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 4]
  Command: +
  Step-by-step: tick: 154 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 155 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 156 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 157 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
  Command: +
  Step-by-step: tick: 158 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 159 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 160 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 161 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: +
  Step-by-step: tick: 162 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 163 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 164 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 165 || microcode - cpu: over || A: 0x110 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 166 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 167 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: over
  Step-by-step: tick: 168 || microcode - cpu: over || A: 0x110 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0]
  Command: -
  Step-by-step: tick: 169 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100]
  Command: if 2
  Step-by-step: tick: 170 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 171 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 172 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 173 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 174 || microcode - cpu: over || A: 0x110 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 175 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 176 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 177 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: dup
  Step-by-step: tick: 178 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 179 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 180 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 181 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: sw_to_a_addr
  Step-by-step: tick: 182 || microcode - alu: open_a, add | mem: write || A: 0x114 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 183 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276]
  Command: push_imm 4
  Step-by-step: tick: 184 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 4]
  Command: +
  Step-by-step: tick: 185 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 186 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 187 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 188 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5]
  Command: +
  Step-by-step: tick: 189 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 190 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 191 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 192 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: +
  Step-by-step: tick: 193 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 194 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 195 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x114 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 196 || microcode - cpu: over || A: 0x114 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 197 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 198 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: over
  Step-by-step: tick: 199 || microcode - cpu: over || A: 0x114 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
  Command: -
  Step-by-step: tick: 200 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8]
  Command: if 2
  Step-by-step: tick: 201 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 202 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 203 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 204 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 205 || microcode - cpu: over || A: 0x114 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 206 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 207 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 208 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: dup
  Step-by-step: tick: 209 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 210 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 211 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 280]
  Command: load_T_a_pop
  Step-by-step: tick: 212 || microcode - cpu: pop_stack, load_T_a || A: 0x118 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: sw_to_a_addr
  Step-by-step: tick: 213 || microcode - alu: open_a, add | mem: write || A: 0x118 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 214 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280]
  Command: push_imm 4
  Step-by-step: tick: 215 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 4]
  Command: +
  Step-by-step: tick: 216 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 217 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x118 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 218 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 219 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 6]
  Command: +
  Step-by-step: tick: 220 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 221 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x118 || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 222 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x118 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 223 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: +
  Step-by-step: tick: 224 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 225 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x118 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 226 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x118 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 227 || microcode - cpu: over || A: 0x118 || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 228 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x118 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 229 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: over
  Step-by-step: tick: 230 || microcode - cpu: over || A: 0x118 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0]
  Command: -
  Step-by-step: tick: 231 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x118 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5]
  Command: if 2
  Step-by-step: tick: 232 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x118 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 233 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 234 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x118 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 22
  Step-by-step: tick: 235 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x118 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 236 || microcode - cpu: over || A: 0x118 || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 12
  Step-by-step: tick: 237 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
  Command: load_T_a_pop
  Step-by-step: tick: 238 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 239 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0xc 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 240 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 241 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 242 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284]
  Command: load_T_a_pop
  Step-by-step: tick: 243 || microcode - cpu: pop_stack, load_T_a || A: 0x11c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_a_addr
  Step-by-step: tick: 244 || microcode - alu: open_a, add | mem: write || A: 0x11c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 20
  Step-by-step: tick: 245 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284]
  Command: push_imm 4
  Step-by-step: tick: 246 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284, 4]
  Command: +
  Step-by-step: tick: 247 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x11c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 288]
  Command: sw_to_imm_addr 20
  Step-by-step: tick: 248 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x14 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 249 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 250 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: +
  Step-by-step: tick: 251 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x11c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: sw_to_imm_addr 24
  Step-by-step: tick: 252 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 253 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 254 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: +
  Step-by-step: tick: 255 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x11c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 28
  Step-by-step: tick: 256 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -32
  Step-by-step: tick: 257 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x11c || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 258 || microcode - cpu: over || A: 0x11c || B: -0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 259 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 28
  Step-by-step: tick: 260 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 261 || microcode - cpu: over || A: 0x11c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: -
  Step-by-step: tick: 262 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x1c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 2
  Step-by-step: tick: 263 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 264 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 22
  Step-by-step: tick: 265 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 266 || microcode - cpu: pop_stack || A: 0x11c || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 267 || microcode - cpu: pop_stack || A: 0x11c || B: 0x16 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 268 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 24
  Step-by-step: tick: 269 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8]
  Command: -
  Step-by-step: tick: 270 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: ret
  Step-by-step: tick: 271 || microcode - cpu: restore_pc || A: 0x11c || B: 0x18 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: sw_to_imm_addr 8
  Step-by-step: tick: 272 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: call -115
  Step-by-step: tick: 273 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, call || A: 0x11c || B: -0x73 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 274 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 275 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 276 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 277 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 278 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 279 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 280 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7]
  Command: push_imm 1
  Step-by-step: tick: 281 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 282 || microcode - cpu: over || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 283 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 284 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 0]
  Command: over
  Step-by-step: tick: 285 || microcode - cpu: over || A: 0x11c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0, 7]
  Command: -
  Step-by-step: tick: 286 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: push_imm -1
  Step-by-step: tick: 287 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, -1]
  Command: +
  Step-by-step: tick: 288 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x11c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 6]
  Command: -if 2
  Step-by-step: tick: 289 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 1
  Step-by-step: tick: 290 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: if 88
  Step-by-step: tick: 291 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: over
  Step-by-step: tick: 292 || microcode - cpu: over || A: 0x11c || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 1
  Step-by-step: tick: 293 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 294 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 295 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 7]
  Command: -
  Step-by-step: tick: 296 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 7]
  Command: -
  Step-by-step: tick: 297 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 298 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 0
  Step-by-step: tick: 299 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 300 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 301 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6]
  Command: push_imm 1
  Step-by-step: tick: 302 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: over
  Step-by-step: tick: 303 || microcode - cpu: over || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: dup
  Step-by-step: tick: 304 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x6 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 305 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 0]
  Command: over
  Step-by-step: tick: 306 || microcode - cpu: over || A: 0x11c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 0, 6]
  Command: -
  Step-by-step: tick: 307 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: push_imm -1
  Step-by-step: tick: 308 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, -1]
  Command: +
  Step-by-step: tick: 309 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x11c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 5]
  Command: -if 2
  Step-by-step: tick: 310 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: push_imm 1
  Step-by-step: tick: 311 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: if 58
  Step-by-step: tick: 312 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: over
  Step-by-step: tick: 313 || microcode - cpu: over || A: 0x11c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 314 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: push_imm 4
  Step-by-step: tick: 315 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0, 4]
  Command: *
  Step-by-step: tick: 316 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x11c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 317 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 318 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 319 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 0]
  Command: +
  Step-by-step: tick: 320 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 321 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 322 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 323 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 324 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 325 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 0, 4]
  Command: +
  Step-by-step: tick: 326 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 4]
  Command: +
  Step-by-step: tick: 327 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 328 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: lw_from_a_addr
  Step-by-step: tick: 329 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 1]
  Command: -
  Step-by-step: tick: 330 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -1]
  Command: not
  Step-by-step: tick: 331 || microcode - alu: open_l, not | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: inc
  Step-by-step: tick: 332 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: push_imm -1
  Step-by-step: tick: 333 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, -1]
  Command: +
  Step-by-step: tick: 334 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: -if 2
  Step-by-step: tick: 335 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: push_imm 1
  Step-by-step: tick: 336 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: if 26
  Step-by-step: tick: 337 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 338 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 339 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 0]
  Command: +
  Step-by-step: tick: 340 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 341 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 342 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 343 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 344 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 345 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 0, 4]
  Command: +
  Step-by-step: tick: 346 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 4]
  Command: +
  Step-by-step: tick: 347 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 348 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: lw_from_a_addr
  Step-by-step: tick: 349 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 1]
  Command: over
  Step-by-step: tick: 350 || microcode - cpu: over || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 351 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 352 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 2, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 353 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 7, 1, 6, 1, 1, 2, 256, 0, 4]
  Command: +
  Step-by-step: tick: 354 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 2, 256, 4]
  Command: +
  Step-by-step: tick: 355 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 2, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 356 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 2]
  Command: sw_to_a_addr
  Step-by-step: tick: 357 || microcode - alu: open_a, add | mem: write || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 358 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 359 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 256, 0]
  Command: +
  Step-by-step: tick: 360 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 361 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: sw_to_a_addr
  Step-by-step: tick: 362 || microcode - alu: open_a, add | mem: write || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp 0
  Step-by-step: tick: 363 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x100 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: dup
  Step-by-step: tick: 364 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 365 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 0]
  Command: +
  Step-by-step: tick: 366 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 367 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x100 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp -70
  Step-by-step: tick: 368 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x100 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: over
  Step-by-step: tick: 369 || microcode - cpu: over || A: 0x100 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: dup
  Step-by-step: tick: 370 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x100 || B: 0x6 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 371 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 1]
  Command: over
  Step-by-step: tick: 372 || microcode - cpu: over || A: 0x100 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1, 6]
  Command: -
  Step-by-step: tick: 373 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x100 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 5]
  Command: push_imm -1
  Step-by-step: tick: 374 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 5, -1]
  Command: +
  Step-by-step: tick: 375 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 4]
  Command: -if 2
  Step-by-step: tick: 376 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x100 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: push_imm 1
  Step-by-step: tick: 377 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: if 58
  Step-by-step: tick: 378 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x100 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: over
  Step-by-step: tick: 379 || microcode - cpu: over || A: 0x100 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 380 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: push_imm 4
  Step-by-step: tick: 381 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 4]
  Command: *
  Step-by-step: tick: 382 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 383 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 384 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 385 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 4]
  Command: +
  Step-by-step: tick: 386 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 387 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 388 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 389 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 390 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 4]
  Command: push_imm 4
  Step-by-step: tick: 391 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 4, 4]
  Command: +
  Step-by-step: tick: 392 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 256, 8]
  Command: +
  Step-by-step: tick: 393 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 394 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: lw_from_a_addr
  Step-by-step: tick: 395 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 4]
  Command: -
  Step-by-step: tick: 396 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: not
  Step-by-step: tick: 397 || microcode - alu: open_l, not | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -3]
  Command: inc
  Step-by-step: tick: 398 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -2]
  Command: push_imm -1
  Step-by-step: tick: 399 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -2, -1]
  Command: +
  Step-by-step: tick: 400 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -3]
  Command: -if 2
  Step-by-step: tick: 401 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: push_imm 0
  Step-by-step: tick: 402 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 403 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: if 26
  Step-by-step: tick: 404 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: dup
  Step-by-step: tick: 405 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 406 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 1]
  Command: +
  Step-by-step: tick: 407 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 408 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp -70
  Step-by-step: tick: 409 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: over
  Step-by-step: tick: 410 || microcode - cpu: over || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: dup
  Step-by-step: tick: 411 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x6 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 412 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 2]
  Command: over
  Step-by-step: tick: 413 || microcode - cpu: over || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 2, 6]
  Command: -
  Step-by-step: tick: 414 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 4]
  Command: push_imm -1
  Step-by-step: tick: 415 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 4, -1]
  Command: +
  Step-by-step: tick: 416 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 3]
  Command: -if 2
  Step-by-step: tick: 417 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: push_imm 1
  Step-by-step: tick: 418 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: if 58
  Step-by-step: tick: 419 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: over
  Step-by-step: tick: 420 || microcode - cpu: over || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 421 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2]
  Command: push_imm 4
  Step-by-step: tick: 422 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 2, 4]
  Command: *
  Step-by-step: tick: 423 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 424 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 425 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 426 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 8]
  Command: +
  Step-by-step: tick: 427 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 428 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 429 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 430 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 431 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 8]
  Command: push_imm 4
  Step-by-step: tick: 432 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 8, 4]
  Command: +
  Step-by-step: tick: 433 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 12]
  Command: +
  Step-by-step: tick: 434 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 435 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: lw_from_a_addr
  Step-by-step: tick: 436 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 3]
  Command: -
  Step-by-step: tick: 437 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -1]
  Command: not
  Step-by-step: tick: 438 || microcode - alu: open_l, not | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: inc
  Step-by-step: tick: 439 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: push_imm -1
  Step-by-step: tick: 440 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, -1]
  Command: +
  Step-by-step: tick: 441 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: -if 2
  Step-by-step: tick: 442 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: push_imm 1
  Step-by-step: tick: 443 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: if 26
  Step-by-step: tick: 444 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 445 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 446 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 8]
  Command: +
  Step-by-step: tick: 447 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 448 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 449 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 450 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 451 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 8]
  Command: push_imm 4
  Step-by-step: tick: 452 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 8, 4]
  Command: +
  Step-by-step: tick: 453 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 12]
  Command: +
  Step-by-step: tick: 454 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 455 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: lw_from_a_addr
  Step-by-step: tick: 456 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 3]
  Command: over
  Step-by-step: tick: 457 || microcode - cpu: over || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 4]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 458 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 4, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 459 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 4, 256, 8]
  Command: push_imm 4
  Step-by-step: tick: 460 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 7, 1, 6, 1, 3, 4, 256, 8, 4]
  Command: +
  Step-by-step: tick: 461 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 4, 256, 12]
  Command: +
  Step-by-step: tick: 462 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 4, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 463 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 4]
  Command: sw_to_a_addr
  Step-by-step: tick: 464 || microcode - alu: open_a, add | mem: write || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 465 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 466 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 256, 8]
  Command: +
  Step-by-step: tick: 467 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 468 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3]
  Command: sw_to_a_addr
  Step-by-step: tick: 469 || microcode - alu: open_a, add | mem: write || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp 0
  Step-by-step: tick: 470 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: dup
  Step-by-step: tick: 471 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 472 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 2]
  Command: +
  Step-by-step: tick: 473 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 474 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp -70
  Step-by-step: tick: 475 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: over
  Step-by-step: tick: 476 || microcode - cpu: over || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: dup
  Step-by-step: tick: 477 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x6 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 478 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 3]
  Command: over
  Step-by-step: tick: 479 || microcode - cpu: over || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 3, 6]
  Command: -
  Step-by-step: tick: 480 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 3]
  Command: push_imm -1
  Step-by-step: tick: 481 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 3, -1]
  Command: +
  Step-by-step: tick: 482 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 2]
  Command: -if 2
  Step-by-step: tick: 483 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: push_imm 1
  Step-by-step: tick: 484 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: if 58
  Step-by-step: tick: 485 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: over
  Step-by-step: tick: 486 || microcode - cpu: over || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 487 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3]
  Command: push_imm 4
  Step-by-step: tick: 488 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 3, 4]
  Command: *
  Step-by-step: tick: 489 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 12]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 490 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 491 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 492 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 12]
  Command: +
  Step-by-step: tick: 493 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 494 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 495 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 496 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 497 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 12]
  Command: push_imm 4
  Step-by-step: tick: 498 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 12, 4]
  Command: +
  Step-by-step: tick: 499 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 256, 16]
  Command: +
  Step-by-step: tick: 500 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 501 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: lw_from_a_addr
  Step-by-step: tick: 502 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 100]
  Command: -
  Step-by-step: tick: 503 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 96]
  Command: not
  Step-by-step: tick: 504 || microcode - alu: open_l, not | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -97]
  Command: inc
  Step-by-step: tick: 505 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -96]
  Command: push_imm -1
  Step-by-step: tick: 506 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -96, -1]
  Command: +
  Step-by-step: tick: 507 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -97]
  Command: -if 2
  Step-by-step: tick: 508 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: push_imm 0
  Step-by-step: tick: 509 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 510 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 0]
  Command: if 26
  Step-by-step: tick: 511 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: dup
  Step-by-step: tick: 512 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 513 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 3]
  Command: +
  Step-by-step: tick: 514 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 515 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp -70
  Step-by-step: tick: 516 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: over
  Step-by-step: tick: 517 || microcode - cpu: over || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: dup
  Step-by-step: tick: 518 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x6 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 519 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 4]
  Command: over
  Step-by-step: tick: 520 || microcode - cpu: over || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 4, 6]
  Command: -
  Step-by-step: tick: 521 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 2]
  Command: push_imm -1
  Step-by-step: tick: 522 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 2, -1]
  Command: +
  Step-by-step: tick: 523 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: -if 2
  Step-by-step: tick: 524 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: push_imm 1
  Step-by-step: tick: 525 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: if 58
  Step-by-step: tick: 526 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: over
  Step-by-step: tick: 527 || microcode - cpu: over || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 528 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4]
  Command: push_imm 4
  Step-by-step: tick: 529 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 4, 4]
  Command: *
  Step-by-step: tick: 530 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 16]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 531 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 532 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 533 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 16]
  Command: +
  Step-by-step: tick: 534 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 535 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 536 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 537 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 538 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 16]
  Command: push_imm 4
  Step-by-step: tick: 539 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 16, 4]
  Command: +
  Step-by-step: tick: 540 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 20]
  Command: +
  Step-by-step: tick: 541 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 542 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_a_addr
  Step-by-step: tick: 543 || microcode - alu: open_a, add | mem: read || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 8]
  Command: -
  Step-by-step: tick: 544 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -92]
  Command: not
  Step-by-step: tick: 545 || microcode - alu: open_l, not | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 91]
  Command: inc
  Step-by-step: tick: 546 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 92]
  Command: push_imm -1
  Step-by-step: tick: 547 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 92, -1]
  Command: +
  Step-by-step: tick: 548 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 91]
  Command: -if 2
  Step-by-step: tick: 549 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: push_imm 1
  Step-by-step: tick: 550 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: if 26
  Step-by-step: tick: 551 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 552 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 553 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 16]
  Command: +
  Step-by-step: tick: 554 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 555 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 556 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 557 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 558 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 16]
  Command: push_imm 4
  Step-by-step: tick: 559 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 16, 4]
  Command: +
  Step-by-step: tick: 560 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 20]
  Command: +
  Step-by-step: tick: 561 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 562 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_a_addr
  Step-by-step: tick: 563 || microcode - alu: open_a, add | mem: read || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 8]
  Command: over
  Step-by-step: tick: 564 || microcode - cpu: over || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 100]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 565 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 100, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 566 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 100, 256, 16]
  Command: push_imm 4
  Step-by-step: tick: 567 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 7, 1, 6, 1, 8, 100, 256, 16, 4]
  Command: +
  Step-by-step: tick: 568 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 100, 256, 20]
  Command: +
  Step-by-step: tick: 569 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 100, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 570 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 100]
  Command: sw_to_a_addr
  Step-by-step: tick: 571 || microcode - alu: open_a, add | mem: write || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 572 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 573 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 256, 16]
  Command: +
  Step-by-step: tick: 574 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 575 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 8]
  Command: sw_to_a_addr
  Step-by-step: tick: 576 || microcode - alu: open_a, add | mem: write || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp 0
  Step-by-step: tick: 577 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: dup
  Step-by-step: tick: 578 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 579 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 4]
  Command: +
  Step-by-step: tick: 580 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 581 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp -70
  Step-by-step: tick: 582 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: over
  Step-by-step: tick: 583 || microcode - cpu: over || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: dup
  Step-by-step: tick: 584 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x6 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 585 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 5]
  Command: over
  Step-by-step: tick: 586 || microcode - cpu: over || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 5, 6]
  Command: -
  Step-by-step: tick: 587 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: push_imm -1
  Step-by-step: tick: 588 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1, -1]
  Command: +
  Step-by-step: tick: 589 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 0]
  Command: -if 2
  Step-by-step: tick: 590 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: push_imm 1
  Step-by-step: tick: 591 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 1]
  Command: if 58
  Step-by-step: tick: 592 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: over
  Step-by-step: tick: 593 || microcode - cpu: over || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 594 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5]
  Command: push_imm 4
  Step-by-step: tick: 595 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 4]
  Command: *
  Step-by-step: tick: 596 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 20]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 597 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 598 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 599 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 20]
  Command: +
  Step-by-step: tick: 600 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 601 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 602 || microcode - alu: open_a, add | mem: read || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 603 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 604 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 20]
  Command: push_imm 4
  Step-by-step: tick: 605 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 20, 4]
  Command: +
  Step-by-step: tick: 606 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 24]
  Command: +
  Step-by-step: tick: 607 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 280]
  Command: load_T_a_pop
  Step-by-step: tick: 608 || microcode - cpu: pop_stack, load_T_a || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_a_addr
  Step-by-step: tick: 609 || microcode - alu: open_a, add | mem: read || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 5]
  Command: -
  Step-by-step: tick: 610 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, -95]
  Command: not
  Step-by-step: tick: 611 || microcode - alu: open_l, not | cpu: push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 94]
  Command: inc
  Step-by-step: tick: 612 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 95]
  Command: push_imm -1
  Step-by-step: tick: 613 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 95, -1]
  Command: +
  Step-by-step: tick: 614 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 94]
  Command: -if 2
  Step-by-step: tick: 615 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x118 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: push_imm 1
  Step-by-step: tick: 616 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: if 26
  Step-by-step: tick: 617 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x118 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 618 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 619 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 256, 20]
  Command: +
  Step-by-step: tick: 620 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 621 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 622 || microcode - alu: open_a, add | mem: read || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 623 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 624 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 20]
  Command: push_imm 4
  Step-by-step: tick: 625 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 20, 4]
  Command: +
  Step-by-step: tick: 626 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 256, 24]
  Command: +
  Step-by-step: tick: 627 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 280]
  Command: load_T_a_pop
  Step-by-step: tick: 628 || microcode - cpu: pop_stack, load_T_a || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100]
  Command: lw_from_a_addr
  Step-by-step: tick: 629 || microcode - alu: open_a, add | mem: read || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 100, 5]
  Command: over
  Step-by-step: tick: 630 || microcode - cpu: over || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 100]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 631 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 100, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 632 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 100, 256, 20]
  Command: push_imm 4
  Step-by-step: tick: 633 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 7, 1, 6, 1, 5, 100, 256, 20, 4]
  Command: +
  Step-by-step: tick: 634 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 100, 256, 24]
  Command: +
  Step-by-step: tick: 635 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 100, 280]
  Command: load_T_a_pop
  Step-by-step: tick: 636 || microcode - cpu: pop_stack, load_T_a || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 100]
  Command: sw_to_a_addr
  Step-by-step: tick: 637 || microcode - alu: open_a, add | mem: write || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 638 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 639 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 256, 20]
  Command: +
  Step-by-step: tick: 640 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x118 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 641 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 5]
  Command: sw_to_a_addr
  Step-by-step: tick: 642 || microcode - alu: open_a, add | mem: write || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp 0
  Step-by-step: tick: 643 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: dup
  Step-by-step: tick: 644 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 645 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 1, 5]
  Command: +
  Step-by-step: tick: 646 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1, 6]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 647 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: jmp -70
  Step-by-step: tick: 648 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x114 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6, 1]
  Command: over
  Step-by-step: tick: 649 || microcode - cpu: over || A: 0x114 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: dup
  Step-by-step: tick: 650 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x6 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 651 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 6]
  Command: over
  Step-by-step: tick: 652 || microcode - cpu: over || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 6, 6]
  Command: -
  Step-by-step: tick: 653 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 0]
  Command: push_imm -1
  Step-by-step: tick: 654 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 0, -1]
  Command: +
  Step-by-step: tick: 655 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, -1]
  Command: -if 2
  Step-by-step: tick: 656 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: push_imm 0
  Step-by-step: tick: 657 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 0]
  Command: jmp 1
  Step-by-step: tick: 658 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 0]
  Command: if 58
  Step-by-step: tick: 659 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: pop
  Step-by-step: tick: 660 || microcode - cpu: pop_stack || A: 0x114 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: pop
  Step-by-step: tick: 661 || microcode - cpu: pop_stack || A: 0x114 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: dup
  Step-by-step: tick: 662 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 663 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0]
  Command: +
  Step-by-step: tick: 664 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 665 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: jmp -100
  Step-by-step: tick: 666 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x114 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 667 || microcode - cpu: over || A: 0x114 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 668 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 669 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 1]
  Command: over
  Step-by-step: tick: 670 || microcode - cpu: over || A: 0x114 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1, 7]
  Command: -
  Step-by-step: tick: 671 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 6]
  Command: push_imm -1
  Step-by-step: tick: 672 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 6, -1]
  Command: +
  Step-by-step: tick: 673 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 5]
  Command: -if 2
  Step-by-step: tick: 674 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 1
  Step-by-step: tick: 675 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: if 88
  Step-by-step: tick: 676 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: over
  Step-by-step: tick: 677 || microcode - cpu: over || A: 0x114 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 1
  Step-by-step: tick: 678 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 679 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 680 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 7]
  Command: -
  Step-by-step: tick: 681 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: -
  Step-by-step: tick: 682 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 683 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 0
  Step-by-step: tick: 684 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 685 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 686 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5]
  Command: push_imm 1
  Step-by-step: tick: 687 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: over
  Step-by-step: tick: 688 || microcode - cpu: over || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: dup
  Step-by-step: tick: 689 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 690 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, 0]
  Command: over
  Step-by-step: tick: 691 || microcode - cpu: over || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 0, 5]
  Command: -
  Step-by-step: tick: 692 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5]
  Command: push_imm -1
  Step-by-step: tick: 693 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, -1]
  Command: +
  Step-by-step: tick: 694 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 4]
  Command: -if 2
  Step-by-step: tick: 695 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: push_imm 1
  Step-by-step: tick: 696 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1]
  Command: if 58
  Step-by-step: tick: 697 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: over
  Step-by-step: tick: 698 || microcode - cpu: over || A: 0x114 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 699 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: push_imm 4
  Step-by-step: tick: 700 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0, 4]
  Command: *
  Step-by-step: tick: 701 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 702 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 703 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 704 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256, 0]
  Command: +
  Step-by-step: tick: 705 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 706 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 707 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 708 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 709 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 710 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 256, 0, 4]
  Command: +
  Step-by-step: tick: 711 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 256, 4]
  Command: +
  Step-by-step: tick: 712 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 713 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 714 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 2]
  Command: -
  Step-by-step: tick: 715 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: not
  Step-by-step: tick: 716 || microcode - alu: open_l, not | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -2]
  Command: inc
  Step-by-step: tick: 717 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 718 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -1, -1]
  Command: +
  Step-by-step: tick: 719 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -2]
  Command: -if 2
  Step-by-step: tick: 720 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: push_imm 0
  Step-by-step: tick: 721 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 722 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: if 26
  Step-by-step: tick: 723 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: dup
  Step-by-step: tick: 724 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 725 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 0]
  Command: +
  Step-by-step: tick: 726 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 727 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: jmp -70
  Step-by-step: tick: 728 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: over
  Step-by-step: tick: 729 || microcode - cpu: over || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: dup
  Step-by-step: tick: 730 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 731 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, 1]
  Command: over
  Step-by-step: tick: 732 || microcode - cpu: over || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1, 5]
  Command: -
  Step-by-step: tick: 733 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 4]
  Command: push_imm -1
  Step-by-step: tick: 734 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 4, -1]
  Command: +
  Step-by-step: tick: 735 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 3]
  Command: -if 2
  Step-by-step: tick: 736 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: push_imm 1
  Step-by-step: tick: 737 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1]
  Command: if 58
  Step-by-step: tick: 738 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: over
  Step-by-step: tick: 739 || microcode - cpu: over || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 740 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: push_imm 4
  Step-by-step: tick: 741 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 4]
  Command: *
  Step-by-step: tick: 742 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 743 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 744 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 745 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256, 4]
  Command: +
  Step-by-step: tick: 746 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 747 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 748 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 749 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 750 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2, 256, 4]
  Command: push_imm 4
  Step-by-step: tick: 751 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 2, 256, 4, 4]
  Command: +
  Step-by-step: tick: 752 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2, 256, 8]
  Command: +
  Step-by-step: tick: 753 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 754 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2]
  Command: lw_from_a_addr
  Step-by-step: tick: 755 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2, 3]
  Command: -
  Step-by-step: tick: 756 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: not
  Step-by-step: tick: 757 || microcode - alu: open_l, not | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -2]
  Command: inc
  Step-by-step: tick: 758 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 759 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -1, -1]
  Command: +
  Step-by-step: tick: 760 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -2]
  Command: -if 2
  Step-by-step: tick: 761 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: push_imm 0
  Step-by-step: tick: 762 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 763 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: if 26
  Step-by-step: tick: 764 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: dup
  Step-by-step: tick: 765 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 766 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 1]
  Command: +
  Step-by-step: tick: 767 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 768 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: jmp -70
  Step-by-step: tick: 769 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: over
  Step-by-step: tick: 770 || microcode - cpu: over || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: dup
  Step-by-step: tick: 771 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 772 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, 2]
  Command: over
  Step-by-step: tick: 773 || microcode - cpu: over || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 2, 5]
  Command: -
  Step-by-step: tick: 774 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 3]
  Command: push_imm -1
  Step-by-step: tick: 775 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 3, -1]
  Command: +
  Step-by-step: tick: 776 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 2]
  Command: -if 2
  Step-by-step: tick: 777 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: push_imm 1
  Step-by-step: tick: 778 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1]
  Command: if 58
  Step-by-step: tick: 779 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: over
  Step-by-step: tick: 780 || microcode - cpu: over || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 781 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2]
  Command: push_imm 4
  Step-by-step: tick: 782 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2, 4]
  Command: *
  Step-by-step: tick: 783 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 784 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 785 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 786 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256, 8]
  Command: +
  Step-by-step: tick: 787 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 788 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 789 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 790 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 791 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3, 256, 8]
  Command: push_imm 4
  Step-by-step: tick: 792 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 3, 256, 8, 4]
  Command: +
  Step-by-step: tick: 793 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3, 256, 12]
  Command: +
  Step-by-step: tick: 794 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 795 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3]
  Command: lw_from_a_addr
  Step-by-step: tick: 796 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3, 4]
  Command: -
  Step-by-step: tick: 797 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: not
  Step-by-step: tick: 798 || microcode - alu: open_l, not | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -2]
  Command: inc
  Step-by-step: tick: 799 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 800 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -1, -1]
  Command: +
  Step-by-step: tick: 801 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -2]
  Command: -if 2
  Step-by-step: tick: 802 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: push_imm 0
  Step-by-step: tick: 803 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 804 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: if 26
  Step-by-step: tick: 805 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: dup
  Step-by-step: tick: 806 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 807 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 2]
  Command: +
  Step-by-step: tick: 808 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 809 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: jmp -70
  Step-by-step: tick: 810 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: over
  Step-by-step: tick: 811 || microcode - cpu: over || A: 0x10c || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: dup
  Step-by-step: tick: 812 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 813 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, 3]
  Command: over
  Step-by-step: tick: 814 || microcode - cpu: over || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 3, 5]
  Command: -
  Step-by-step: tick: 815 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 2]
  Command: push_imm -1
  Step-by-step: tick: 816 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 2, -1]
  Command: +
  Step-by-step: tick: 817 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1]
  Command: -if 2
  Step-by-step: tick: 818 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: push_imm 1
  Step-by-step: tick: 819 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1]
  Command: if 58
  Step-by-step: tick: 820 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: over
  Step-by-step: tick: 821 || microcode - cpu: over || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 822 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3]
  Command: push_imm 4
  Step-by-step: tick: 823 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3, 4]
  Command: *
  Step-by-step: tick: 824 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 12]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 825 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 826 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 827 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256, 12]
  Command: +
  Step-by-step: tick: 828 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 829 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 830 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 831 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 832 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4, 256, 12]
  Command: push_imm 4
  Step-by-step: tick: 833 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 4, 256, 12, 4]
  Command: +
  Step-by-step: tick: 834 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4, 256, 16]
  Command: +
  Step-by-step: tick: 835 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 836 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4]
  Command: lw_from_a_addr
  Step-by-step: tick: 837 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4, 8]
  Command: -
  Step-by-step: tick: 838 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4]
  Command: not
  Step-by-step: tick: 839 || microcode - alu: open_l, not | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -5]
  Command: inc
  Step-by-step: tick: 840 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -4]
  Command: push_imm -1
  Step-by-step: tick: 841 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -4, -1]
  Command: +
  Step-by-step: tick: 842 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -5]
  Command: -if 2
  Step-by-step: tick: 843 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: push_imm 0
  Step-by-step: tick: 844 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 845 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 0]
  Command: if 26
  Step-by-step: tick: 846 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: dup
  Step-by-step: tick: 847 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 848 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 3]
  Command: +
  Step-by-step: tick: 849 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 850 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: jmp -70
  Step-by-step: tick: 851 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: over
  Step-by-step: tick: 852 || microcode - cpu: over || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: dup
  Step-by-step: tick: 853 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 854 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, 4]
  Command: over
  Step-by-step: tick: 855 || microcode - cpu: over || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 4, 5]
  Command: -
  Step-by-step: tick: 856 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1]
  Command: push_imm -1
  Step-by-step: tick: 857 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1, -1]
  Command: +
  Step-by-step: tick: 858 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 0]
  Command: -if 2
  Step-by-step: tick: 859 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: push_imm 1
  Step-by-step: tick: 860 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 1]
  Command: if 58
  Step-by-step: tick: 861 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: over
  Step-by-step: tick: 862 || microcode - cpu: over || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 863 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4]
  Command: push_imm 4
  Step-by-step: tick: 864 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 4, 4]
  Command: *
  Step-by-step: tick: 865 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 16]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 866 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 867 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 868 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256, 16]
  Command: +
  Step-by-step: tick: 869 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 870 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 871 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 872 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 873 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256, 16]
  Command: push_imm 4
  Step-by-step: tick: 874 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256, 16, 4]
  Command: +
  Step-by-step: tick: 875 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256, 20]
  Command: +
  Step-by-step: tick: 876 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 877 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8]
  Command: lw_from_a_addr
  Step-by-step: tick: 878 || microcode - alu: open_a, add | mem: read || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 5]
  Command: -
  Step-by-step: tick: 879 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, -3]
  Command: not
  Step-by-step: tick: 880 || microcode - alu: open_l, not | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2]
  Command: inc
  Step-by-step: tick: 881 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3]
  Command: push_imm -1
  Step-by-step: tick: 882 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 3, -1]
  Command: +
  Step-by-step: tick: 883 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 2]
  Command: -if 2
  Step-by-step: tick: 884 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: push_imm 1
  Step-by-step: tick: 885 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: if 26
  Step-by-step: tick: 886 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 887 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 888 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 256, 16]
  Command: +
  Step-by-step: tick: 889 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 890 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 891 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 892 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 893 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256, 16]
  Command: push_imm 4
  Step-by-step: tick: 894 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256, 16, 4]
  Command: +
  Step-by-step: tick: 895 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 256, 20]
  Command: +
  Step-by-step: tick: 896 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 897 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8]
  Command: lw_from_a_addr
  Step-by-step: tick: 898 || microcode - alu: open_a, add | mem: read || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 8, 5]
  Command: over
  Step-by-step: tick: 899 || microcode - cpu: over || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 8]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 900 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 8, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 901 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 8, 256, 16]
  Command: push_imm 4
  Step-by-step: tick: 902 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 7, 1, 5, 1, 5, 8, 256, 16, 4]
  Command: +
  Step-by-step: tick: 903 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 8, 256, 20]
  Command: +
  Step-by-step: tick: 904 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 8, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 905 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 8]
  Command: sw_to_a_addr
  Step-by-step: tick: 906 || microcode - alu: open_a, add | mem: write || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 907 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 908 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 256, 16]
  Command: +
  Step-by-step: tick: 909 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 910 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5]
  Command: sw_to_a_addr
  Step-by-step: tick: 911 || microcode - alu: open_a, add | mem: write || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: jmp 0
  Step-by-step: tick: 912 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: dup
  Step-by-step: tick: 913 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 914 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 1, 4]
  Command: +
  Step-by-step: tick: 915 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1, 5]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 916 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: jmp -70
  Step-by-step: tick: 917 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5, 1]
  Command: over
  Step-by-step: tick: 918 || microcode - cpu: over || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: dup
  Step-by-step: tick: 919 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 920 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, 5]
  Command: over
  Step-by-step: tick: 921 || microcode - cpu: over || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 5, 5]
  Command: -
  Step-by-step: tick: 922 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 0]
  Command: push_imm -1
  Step-by-step: tick: 923 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 0, -1]
  Command: +
  Step-by-step: tick: 924 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, -1]
  Command: -if 2
  Step-by-step: tick: 925 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: push_imm 0
  Step-by-step: tick: 926 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 0]
  Command: jmp 1
  Step-by-step: tick: 927 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 0]
  Command: if 58
  Step-by-step: tick: 928 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: pop
  Step-by-step: tick: 929 || microcode - cpu: pop_stack || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: pop
  Step-by-step: tick: 930 || microcode - cpu: pop_stack || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: dup
  Step-by-step: tick: 931 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 932 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: +
  Step-by-step: tick: 933 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 934 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: jmp -100
  Step-by-step: tick: 935 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 936 || microcode - cpu: over || A: 0x110 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 937 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 938 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 2]
  Command: over
  Step-by-step: tick: 939 || microcode - cpu: over || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 2, 7]
  Command: -
  Step-by-step: tick: 940 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 5]
  Command: push_imm -1
  Step-by-step: tick: 941 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 5, -1]
  Command: +
  Step-by-step: tick: 942 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 4]
  Command: -if 2
  Step-by-step: tick: 943 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 1
  Step-by-step: tick: 944 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: if 88
  Step-by-step: tick: 945 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: over
  Step-by-step: tick: 946 || microcode - cpu: over || A: 0x110 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 1
  Step-by-step: tick: 947 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 948 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 949 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 7]
  Command: -
  Step-by-step: tick: 950 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: -
  Step-by-step: tick: 951 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 952 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 0
  Step-by-step: tick: 953 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 954 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 955 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4]
  Command: push_imm 1
  Step-by-step: tick: 956 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: over
  Step-by-step: tick: 957 || microcode - cpu: over || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: dup
  Step-by-step: tick: 958 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 959 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4, 0]
  Command: over
  Step-by-step: tick: 960 || microcode - cpu: over || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 0, 4]
  Command: -
  Step-by-step: tick: 961 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4]
  Command: push_imm -1
  Step-by-step: tick: 962 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4, -1]
  Command: +
  Step-by-step: tick: 963 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 3]
  Command: -if 2
  Step-by-step: tick: 964 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: push_imm 1
  Step-by-step: tick: 965 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1]
  Command: if 58
  Step-by-step: tick: 966 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: over
  Step-by-step: tick: 967 || microcode - cpu: over || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 968 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: push_imm 4
  Step-by-step: tick: 969 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0, 4]
  Command: *
  Step-by-step: tick: 970 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 971 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 972 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 973 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256, 0]
  Command: +
  Step-by-step: tick: 974 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 975 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 976 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 977 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 978 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 979 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 256, 0, 4]
  Command: +
  Step-by-step: tick: 980 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 256, 4]
  Command: +
  Step-by-step: tick: 981 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 982 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 983 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 2]
  Command: -
  Step-by-step: tick: 984 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: not
  Step-by-step: tick: 985 || microcode - alu: open_l, not | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: inc
  Step-by-step: tick: 986 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 987 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1, -1]
  Command: +
  Step-by-step: tick: 988 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: -if 2
  Step-by-step: tick: 989 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: push_imm 0
  Step-by-step: tick: 990 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 991 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: if 26
  Step-by-step: tick: 992 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: dup
  Step-by-step: tick: 993 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 994 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 0]
  Command: +
  Step-by-step: tick: 995 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 996 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: jmp -70
  Step-by-step: tick: 997 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: over
  Step-by-step: tick: 998 || microcode - cpu: over || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: dup
  Step-by-step: tick: 999 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1000 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4, 1]
  Command: over
  Step-by-step: tick: 1001 || microcode - cpu: over || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1, 4]
  Command: -
  Step-by-step: tick: 1002 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 3]
  Command: push_imm -1
  Step-by-step: tick: 1003 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 3, -1]
  Command: +
  Step-by-step: tick: 1004 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 2]
  Command: -if 2
  Step-by-step: tick: 1005 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: push_imm 1
  Step-by-step: tick: 1006 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1]
  Command: if 58
  Step-by-step: tick: 1007 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: over
  Step-by-step: tick: 1008 || microcode - cpu: over || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1009 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: push_imm 4
  Step-by-step: tick: 1010 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 4]
  Command: *
  Step-by-step: tick: 1011 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1012 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1013 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1014 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256, 4]
  Command: +
  Step-by-step: tick: 1015 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 1016 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1017 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1018 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1019 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2, 256, 4]
  Command: push_imm 4
  Step-by-step: tick: 1020 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 4, 1, 2, 256, 4, 4]
  Command: +
  Step-by-step: tick: 1021 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2, 256, 8]
  Command: +
  Step-by-step: tick: 1022 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 1023 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2]
  Command: lw_from_a_addr
  Step-by-step: tick: 1024 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2, 3]
  Command: -
  Step-by-step: tick: 1025 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: not
  Step-by-step: tick: 1026 || microcode - alu: open_l, not | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: inc
  Step-by-step: tick: 1027 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1028 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1029 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1030 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: push_imm 0
  Step-by-step: tick: 1031 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1032 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: if 26
  Step-by-step: tick: 1033 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: dup
  Step-by-step: tick: 1034 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1035 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 1]
  Command: +
  Step-by-step: tick: 1036 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1037 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: jmp -70
  Step-by-step: tick: 1038 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: over
  Step-by-step: tick: 1039 || microcode - cpu: over || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: dup
  Step-by-step: tick: 1040 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1041 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4, 2]
  Command: over
  Step-by-step: tick: 1042 || microcode - cpu: over || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 2, 4]
  Command: -
  Step-by-step: tick: 1043 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 2]
  Command: push_imm -1
  Step-by-step: tick: 1044 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 2, -1]
  Command: +
  Step-by-step: tick: 1045 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1]
  Command: -if 2
  Step-by-step: tick: 1046 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: push_imm 1
  Step-by-step: tick: 1047 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1]
  Command: if 58
  Step-by-step: tick: 1048 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: over
  Step-by-step: tick: 1049 || microcode - cpu: over || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1050 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2]
  Command: push_imm 4
  Step-by-step: tick: 1051 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 2, 4]
  Command: *
  Step-by-step: tick: 1052 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 8]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1053 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1054 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1055 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256, 8]
  Command: +
  Step-by-step: tick: 1056 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 1057 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1058 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1059 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1060 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3, 256, 8]
  Command: push_imm 4
  Step-by-step: tick: 1061 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 4, 1, 3, 256, 8, 4]
  Command: +
  Step-by-step: tick: 1062 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3, 256, 12]
  Command: +
  Step-by-step: tick: 1063 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 1064 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3]
  Command: lw_from_a_addr
  Step-by-step: tick: 1065 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3, 4]
  Command: -
  Step-by-step: tick: 1066 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: not
  Step-by-step: tick: 1067 || microcode - alu: open_l, not | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: inc
  Step-by-step: tick: 1068 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1069 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1070 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1071 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: push_imm 0
  Step-by-step: tick: 1072 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1073 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: if 26
  Step-by-step: tick: 1074 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: dup
  Step-by-step: tick: 1075 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1076 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 2]
  Command: +
  Step-by-step: tick: 1077 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1078 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: jmp -70
  Step-by-step: tick: 1079 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: over
  Step-by-step: tick: 1080 || microcode - cpu: over || A: 0x10c || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: dup
  Step-by-step: tick: 1081 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1082 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4, 3]
  Command: over
  Step-by-step: tick: 1083 || microcode - cpu: over || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 3, 4]
  Command: -
  Step-by-step: tick: 1084 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1]
  Command: push_imm -1
  Step-by-step: tick: 1085 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1, -1]
  Command: +
  Step-by-step: tick: 1086 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 0]
  Command: -if 2
  Step-by-step: tick: 1087 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: push_imm 1
  Step-by-step: tick: 1088 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 1]
  Command: if 58
  Step-by-step: tick: 1089 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: over
  Step-by-step: tick: 1090 || microcode - cpu: over || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1091 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3]
  Command: push_imm 4
  Step-by-step: tick: 1092 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 3, 4]
  Command: *
  Step-by-step: tick: 1093 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 12]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1094 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1095 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1096 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 256, 12]
  Command: +
  Step-by-step: tick: 1097 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 1098 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1099 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1100 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1101 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4, 256, 12]
  Command: push_imm 4
  Step-by-step: tick: 1102 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 4, 1, 4, 256, 12, 4]
  Command: +
  Step-by-step: tick: 1103 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4, 256, 16]
  Command: +
  Step-by-step: tick: 1104 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 1105 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4]
  Command: lw_from_a_addr
  Step-by-step: tick: 1106 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4, 5]
  Command: -
  Step-by-step: tick: 1107 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: not
  Step-by-step: tick: 1108 || microcode - alu: open_l, not | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: inc
  Step-by-step: tick: 1109 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1110 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1111 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1112 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: push_imm 0
  Step-by-step: tick: 1113 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1114 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 0]
  Command: if 26
  Step-by-step: tick: 1115 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: dup
  Step-by-step: tick: 1116 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1117 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 1, 3]
  Command: +
  Step-by-step: tick: 1118 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1, 4]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1119 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: jmp -70
  Step-by-step: tick: 1120 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4, 1]
  Command: over
  Step-by-step: tick: 1121 || microcode - cpu: over || A: 0x110 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: dup
  Step-by-step: tick: 1122 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1123 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4, 4]
  Command: over
  Step-by-step: tick: 1124 || microcode - cpu: over || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 4, 4]
  Command: -
  Step-by-step: tick: 1125 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 0]
  Command: push_imm -1
  Step-by-step: tick: 1126 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 0, -1]
  Command: +
  Step-by-step: tick: 1127 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, -1]
  Command: -if 2
  Step-by-step: tick: 1128 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: push_imm 0
  Step-by-step: tick: 1129 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 0]
  Command: jmp 1
  Step-by-step: tick: 1130 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 0]
  Command: if 58
  Step-by-step: tick: 1131 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: pop
  Step-by-step: tick: 1132 || microcode - cpu: pop_stack || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: pop
  Step-by-step: tick: 1133 || microcode - cpu: pop_stack || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: dup
  Step-by-step: tick: 1134 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1135 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: +
  Step-by-step: tick: 1136 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 1137 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: jmp -100
  Step-by-step: tick: 1138 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 1139 || microcode - cpu: over || A: 0x110 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 1140 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1141 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 3]
  Command: over
  Step-by-step: tick: 1142 || microcode - cpu: over || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 3, 7]
  Command: -
  Step-by-step: tick: 1143 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 4]
  Command: push_imm -1
  Step-by-step: tick: 1144 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 4, -1]
  Command: +
  Step-by-step: tick: 1145 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 3]
  Command: -if 2
  Step-by-step: tick: 1146 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 1
  Step-by-step: tick: 1147 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: if 88
  Step-by-step: tick: 1148 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: over
  Step-by-step: tick: 1149 || microcode - cpu: over || A: 0x110 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 1
  Step-by-step: tick: 1150 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1151 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1152 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 7]
  Command: -
  Step-by-step: tick: 1153 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: -
  Step-by-step: tick: 1154 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 1155 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 0
  Step-by-step: tick: 1156 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1157 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 1158 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3]
  Command: push_imm 1
  Step-by-step: tick: 1159 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: over
  Step-by-step: tick: 1160 || microcode - cpu: over || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: dup
  Step-by-step: tick: 1161 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1162 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3, 0]
  Command: over
  Step-by-step: tick: 1163 || microcode - cpu: over || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 0, 3]
  Command: -
  Step-by-step: tick: 1164 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3]
  Command: push_imm -1
  Step-by-step: tick: 1165 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3, -1]
  Command: +
  Step-by-step: tick: 1166 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 2]
  Command: -if 2
  Step-by-step: tick: 1167 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: push_imm 1
  Step-by-step: tick: 1168 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 1]
  Command: if 58
  Step-by-step: tick: 1169 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: over
  Step-by-step: tick: 1170 || microcode - cpu: over || A: 0x110 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1171 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: push_imm 4
  Step-by-step: tick: 1172 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0, 4]
  Command: *
  Step-by-step: tick: 1173 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1174 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1175 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1176 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 256, 0]
  Command: +
  Step-by-step: tick: 1177 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 1178 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1179 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1180 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1181 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 1182 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 256, 0, 4]
  Command: +
  Step-by-step: tick: 1183 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 256, 4]
  Command: +
  Step-by-step: tick: 1184 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 1185 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1186 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 2]
  Command: -
  Step-by-step: tick: 1187 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: not
  Step-by-step: tick: 1188 || microcode - alu: open_l, not | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -2]
  Command: inc
  Step-by-step: tick: 1189 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1190 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1191 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1192 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: push_imm 0
  Step-by-step: tick: 1193 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1194 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: if 26
  Step-by-step: tick: 1195 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: dup
  Step-by-step: tick: 1196 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1197 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 0]
  Command: +
  Step-by-step: tick: 1198 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1199 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: jmp -70
  Step-by-step: tick: 1200 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: over
  Step-by-step: tick: 1201 || microcode - cpu: over || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: dup
  Step-by-step: tick: 1202 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1203 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3, 1]
  Command: over
  Step-by-step: tick: 1204 || microcode - cpu: over || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 1, 3]
  Command: -
  Step-by-step: tick: 1205 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 2]
  Command: push_imm -1
  Step-by-step: tick: 1206 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 2, -1]
  Command: +
  Step-by-step: tick: 1207 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 1]
  Command: -if 2
  Step-by-step: tick: 1208 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: push_imm 1
  Step-by-step: tick: 1209 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 1]
  Command: if 58
  Step-by-step: tick: 1210 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: over
  Step-by-step: tick: 1211 || microcode - cpu: over || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1212 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: push_imm 4
  Step-by-step: tick: 1213 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 4]
  Command: *
  Step-by-step: tick: 1214 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 4]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1215 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1216 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1217 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 256, 4]
  Command: +
  Step-by-step: tick: 1218 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 1219 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1220 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1221 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1222 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2, 256, 4]
  Command: push_imm 4
  Step-by-step: tick: 1223 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 3, 1, 2, 256, 4, 4]
  Command: +
  Step-by-step: tick: 1224 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2, 256, 8]
  Command: +
  Step-by-step: tick: 1225 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 1226 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2]
  Command: lw_from_a_addr
  Step-by-step: tick: 1227 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2, 3]
  Command: -
  Step-by-step: tick: 1228 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: not
  Step-by-step: tick: 1229 || microcode - alu: open_l, not | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -2]
  Command: inc
  Step-by-step: tick: 1230 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1231 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1232 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1233 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: push_imm 0
  Step-by-step: tick: 1234 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1235 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: if 26
  Step-by-step: tick: 1236 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: dup
  Step-by-step: tick: 1237 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1238 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 1]
  Command: +
  Step-by-step: tick: 1239 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1240 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: jmp -70
  Step-by-step: tick: 1241 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: over
  Step-by-step: tick: 1242 || microcode - cpu: over || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: dup
  Step-by-step: tick: 1243 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1244 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3, 2]
  Command: over
  Step-by-step: tick: 1245 || microcode - cpu: over || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 2, 3]
  Command: -
  Step-by-step: tick: 1246 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 1]
  Command: push_imm -1
  Step-by-step: tick: 1247 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 1, -1]
  Command: +
  Step-by-step: tick: 1248 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 0]
  Command: -if 2
  Step-by-step: tick: 1249 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: push_imm 1
  Step-by-step: tick: 1250 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 1]
  Command: if 58
  Step-by-step: tick: 1251 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: over
  Step-by-step: tick: 1252 || microcode - cpu: over || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1253 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2]
  Command: push_imm 4
  Step-by-step: tick: 1254 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 2, 4]
  Command: *
  Step-by-step: tick: 1255 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 8]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1256 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1257 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1258 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 256, 8]
  Command: +
  Step-by-step: tick: 1259 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 1260 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1261 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1262 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1263 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3, 256, 8]
  Command: push_imm 4
  Step-by-step: tick: 1264 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 3, 1, 3, 256, 8, 4]
  Command: +
  Step-by-step: tick: 1265 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3, 256, 12]
  Command: +
  Step-by-step: tick: 1266 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 1267 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3]
  Command: lw_from_a_addr
  Step-by-step: tick: 1268 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3, 4]
  Command: -
  Step-by-step: tick: 1269 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: not
  Step-by-step: tick: 1270 || microcode - alu: open_l, not | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -2]
  Command: inc
  Step-by-step: tick: 1271 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1272 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1273 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1274 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: push_imm 0
  Step-by-step: tick: 1275 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1276 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 0]
  Command: if 26
  Step-by-step: tick: 1277 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: dup
  Step-by-step: tick: 1278 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1279 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 1, 2]
  Command: +
  Step-by-step: tick: 1280 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1, 3]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1281 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: jmp -70
  Step-by-step: tick: 1282 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 3, 1]
  Command: over
  Step-by-step: tick: 1283 || microcode - cpu: over || A: 0x10c || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: dup
  Step-by-step: tick: 1284 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1285 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3, 3]
  Command: over
  Step-by-step: tick: 1286 || microcode - cpu: over || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 3, 3]
  Command: -
  Step-by-step: tick: 1287 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 0]
  Command: push_imm -1
  Step-by-step: tick: 1288 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 0, -1]
  Command: +
  Step-by-step: tick: 1289 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, -1]
  Command: -if 2
  Step-by-step: tick: 1290 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: push_imm 0
  Step-by-step: tick: 1291 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 0]
  Command: jmp 1
  Step-by-step: tick: 1292 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3, 0]
  Command: if 58
  Step-by-step: tick: 1293 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: pop
  Step-by-step: tick: 1294 || microcode - cpu: pop_stack || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: pop
  Step-by-step: tick: 1295 || microcode - cpu: pop_stack || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: dup
  Step-by-step: tick: 1296 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1297 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: +
  Step-by-step: tick: 1298 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 4]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 1299 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: jmp -100
  Step-by-step: tick: 1300 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 1301 || microcode - cpu: over || A: 0x10c || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 1302 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1303 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 4]
  Command: over
  Step-by-step: tick: 1304 || microcode - cpu: over || A: 0x10c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 4, 7]
  Command: -
  Step-by-step: tick: 1305 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 3]
  Command: push_imm -1
  Step-by-step: tick: 1306 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 3, -1]
  Command: +
  Step-by-step: tick: 1307 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 2]
  Command: -if 2
  Step-by-step: tick: 1308 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 1
  Step-by-step: tick: 1309 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: if 88
  Step-by-step: tick: 1310 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: over
  Step-by-step: tick: 1311 || microcode - cpu: over || A: 0x10c || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 1
  Step-by-step: tick: 1312 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1313 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1314 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4, 7]
  Command: -
  Step-by-step: tick: 1315 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 3]
  Command: -
  Step-by-step: tick: 1316 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 1317 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 0
  Step-by-step: tick: 1318 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1319 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 1320 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2]
  Command: push_imm 1
  Step-by-step: tick: 1321 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: over
  Step-by-step: tick: 1322 || microcode - cpu: over || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: dup
  Step-by-step: tick: 1323 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1324 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2, 0]
  Command: over
  Step-by-step: tick: 1325 || microcode - cpu: over || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 0, 2]
  Command: -
  Step-by-step: tick: 1326 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2]
  Command: push_imm -1
  Step-by-step: tick: 1327 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2, -1]
  Command: +
  Step-by-step: tick: 1328 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 1]
  Command: -if 2
  Step-by-step: tick: 1329 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: push_imm 1
  Step-by-step: tick: 1330 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 1]
  Command: if 58
  Step-by-step: tick: 1331 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: over
  Step-by-step: tick: 1332 || microcode - cpu: over || A: 0x10c || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1333 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 0]
  Command: push_imm 4
  Step-by-step: tick: 1334 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 0, 4]
  Command: *
  Step-by-step: tick: 1335 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1336 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1337 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1338 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 256, 0]
  Command: +
  Step-by-step: tick: 1339 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 1340 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1341 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1342 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1343 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 1344 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 256, 0, 4]
  Command: +
  Step-by-step: tick: 1345 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 256, 4]
  Command: +
  Step-by-step: tick: 1346 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 1347 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1348 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 2]
  Command: -
  Step-by-step: tick: 1349 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: not
  Step-by-step: tick: 1350 || microcode - alu: open_l, not | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -2]
  Command: inc
  Step-by-step: tick: 1351 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1352 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1353 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1354 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: push_imm 0
  Step-by-step: tick: 1355 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1356 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 0]
  Command: if 26
  Step-by-step: tick: 1357 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: dup
  Step-by-step: tick: 1358 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1359 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 0]
  Command: +
  Step-by-step: tick: 1360 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1361 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: jmp -70
  Step-by-step: tick: 1362 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: over
  Step-by-step: tick: 1363 || microcode - cpu: over || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: dup
  Step-by-step: tick: 1364 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1365 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2, 1]
  Command: over
  Step-by-step: tick: 1366 || microcode - cpu: over || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 1, 2]
  Command: -
  Step-by-step: tick: 1367 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 1]
  Command: push_imm -1
  Step-by-step: tick: 1368 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 1, -1]
  Command: +
  Step-by-step: tick: 1369 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 0]
  Command: -if 2
  Step-by-step: tick: 1370 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: push_imm 1
  Step-by-step: tick: 1371 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 1]
  Command: if 58
  Step-by-step: tick: 1372 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: over
  Step-by-step: tick: 1373 || microcode - cpu: over || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1374 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: push_imm 4
  Step-by-step: tick: 1375 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 4]
  Command: *
  Step-by-step: tick: 1376 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 4]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1377 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1378 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1379 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 256, 4]
  Command: +
  Step-by-step: tick: 1380 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 1381 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1382 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1383 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1384 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2, 256, 4]
  Command: push_imm 4
  Step-by-step: tick: 1385 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 2, 1, 2, 256, 4, 4]
  Command: +
  Step-by-step: tick: 1386 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2, 256, 8]
  Command: +
  Step-by-step: tick: 1387 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 1388 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2]
  Command: lw_from_a_addr
  Step-by-step: tick: 1389 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2, 3]
  Command: -
  Step-by-step: tick: 1390 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: not
  Step-by-step: tick: 1391 || microcode - alu: open_l, not | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -2]
  Command: inc
  Step-by-step: tick: 1392 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1393 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1394 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1395 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: push_imm 0
  Step-by-step: tick: 1396 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1397 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 0]
  Command: if 26
  Step-by-step: tick: 1398 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: dup
  Step-by-step: tick: 1399 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1400 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 1, 1]
  Command: +
  Step-by-step: tick: 1401 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1, 2]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1402 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: jmp -70
  Step-by-step: tick: 1403 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 2, 1]
  Command: over
  Step-by-step: tick: 1404 || microcode - cpu: over || A: 0x108 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: dup
  Step-by-step: tick: 1405 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1406 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2, 2]
  Command: over
  Step-by-step: tick: 1407 || microcode - cpu: over || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 2, 2]
  Command: -
  Step-by-step: tick: 1408 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 0]
  Command: push_imm -1
  Step-by-step: tick: 1409 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 0, -1]
  Command: +
  Step-by-step: tick: 1410 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, -1]
  Command: -if 2
  Step-by-step: tick: 1411 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: push_imm 0
  Step-by-step: tick: 1412 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 0]
  Command: jmp 1
  Step-by-step: tick: 1413 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2, 0]
  Command: if 58
  Step-by-step: tick: 1414 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: pop
  Step-by-step: tick: 1415 || microcode - cpu: pop_stack || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: pop
  Step-by-step: tick: 1416 || microcode - cpu: pop_stack || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: dup
  Step-by-step: tick: 1417 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1418 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 4]
  Command: +
  Step-by-step: tick: 1419 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 5]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 1420 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: jmp -100
  Step-by-step: tick: 1421 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 1422 || microcode - cpu: over || A: 0x108 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 1423 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1424 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 5]
  Command: over
  Step-by-step: tick: 1425 || microcode - cpu: over || A: 0x108 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 5, 7]
  Command: -
  Step-by-step: tick: 1426 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 2]
  Command: push_imm -1
  Step-by-step: tick: 1427 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 2, -1]
  Command: +
  Step-by-step: tick: 1428 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: -if 2
  Step-by-step: tick: 1429 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 1
  Step-by-step: tick: 1430 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: if 88
  Step-by-step: tick: 1431 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: over
  Step-by-step: tick: 1432 || microcode - cpu: over || A: 0x108 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 1
  Step-by-step: tick: 1433 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1434 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1435 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5, 7]
  Command: -
  Step-by-step: tick: 1436 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 2]
  Command: -
  Step-by-step: tick: 1437 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 1438 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 0
  Step-by-step: tick: 1439 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1440 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 1441 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: push_imm 1
  Step-by-step: tick: 1442 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: over
  Step-by-step: tick: 1443 || microcode - cpu: over || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: dup
  Step-by-step: tick: 1444 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1445 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 0]
  Command: over
  Step-by-step: tick: 1446 || microcode - cpu: over || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0, 1]
  Command: -
  Step-by-step: tick: 1447 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: push_imm -1
  Step-by-step: tick: 1448 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, -1]
  Command: +
  Step-by-step: tick: 1449 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: -if 2
  Step-by-step: tick: 1450 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: push_imm 1
  Step-by-step: tick: 1451 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: if 58
  Step-by-step: tick: 1452 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: over
  Step-by-step: tick: 1453 || microcode - cpu: over || A: 0x108 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1454 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: push_imm 4
  Step-by-step: tick: 1455 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0, 4]
  Command: *
  Step-by-step: tick: 1456 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1457 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1458 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1459 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 256, 0]
  Command: +
  Step-by-step: tick: 1460 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 1461 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1462 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1463 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 256]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1464 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 256, 0]
  Command: push_imm 4
  Step-by-step: tick: 1465 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 256, 0, 4]
  Command: +
  Step-by-step: tick: 1466 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 256, 4]
  Command: +
  Step-by-step: tick: 1467 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x100 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 1468 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: lw_from_a_addr
  Step-by-step: tick: 1469 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 2]
  Command: -
  Step-by-step: tick: 1470 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: not
  Step-by-step: tick: 1471 || microcode - alu: open_l, not | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, -2]
  Command: inc
  Step-by-step: tick: 1472 || microcode - alu: open_l, inc | cpu: push_stack || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, -1]
  Command: push_imm -1
  Step-by-step: tick: 1473 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, -1, -1]
  Command: +
  Step-by-step: tick: 1474 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, -2]
  Command: -if 2
  Step-by-step: tick: 1475 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: push_imm 0
  Step-by-step: tick: 1476 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1477 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: if 26
  Step-by-step: tick: 1478 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: dup
  Step-by-step: tick: 1479 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1480 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 0]
  Command: +
  Step-by-step: tick: 1481 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1482 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: jmp -70
  Step-by-step: tick: 1483 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: over
  Step-by-step: tick: 1484 || microcode - cpu: over || A: 0x104 || B: -0x46 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: dup
  Step-by-step: tick: 1485 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1486 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 1]
  Command: over
  Step-by-step: tick: 1487 || microcode - cpu: over || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 1, 1]
  Command: -
  Step-by-step: tick: 1488 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: push_imm -1
  Step-by-step: tick: 1489 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0, -1]
  Command: +
  Step-by-step: tick: 1490 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, -1]
  Command: -if 2
  Step-by-step: tick: 1491 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: push_imm 0
  Step-by-step: tick: 1492 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1493 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1, 0]
  Command: if 58
  Step-by-step: tick: 1494 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: pop
  Step-by-step: tick: 1495 || microcode - cpu: pop_stack || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: pop
  Step-by-step: tick: 1496 || microcode - cpu: pop_stack || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: dup
  Step-by-step: tick: 1497 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1498 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 5]
  Command: +
  Step-by-step: tick: 1499 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 6]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 1500 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: jmp -100
  Step-by-step: tick: 1501 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 1502 || microcode - cpu: over || A: 0x104 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 1503 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1504 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 6]
  Command: over
  Step-by-step: tick: 1505 || microcode - cpu: over || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 6, 7]
  Command: -
  Step-by-step: tick: 1506 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: push_imm -1
  Step-by-step: tick: 1507 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1, -1]
  Command: +
  Step-by-step: tick: 1508 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0]
  Command: -if 2
  Step-by-step: tick: 1509 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 1
  Step-by-step: tick: 1510 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 1]
  Command: if 88
  Step-by-step: tick: 1511 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: over
  Step-by-step: tick: 1512 || microcode - cpu: over || A: 0x104 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 1
  Step-by-step: tick: 1513 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1514 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: lw_from_imm_addr 8
  Step-by-step: tick: 1515 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6, 7]
  Command: -
  Step-by-step: tick: 1516 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 1]
  Command: -
  Step-by-step: tick: 1517 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 40
  Step-by-step: tick: 1518 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: push_imm 0
  Step-by-step: tick: 1519 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: sw_to_imm_addr 48
  Step-by-step: tick: 1520 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: lw_from_imm_addr 40
  Step-by-step: tick: 1521 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x28 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0]
  Command: push_imm 1
  Step-by-step: tick: 1522 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0, 1]
  Command: over
  Step-by-step: tick: 1523 || microcode - cpu: over || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0]
  Command: dup
  Step-by-step: tick: 1524 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 0]
  Command: lw_from_imm_addr 48
  Step-by-step: tick: 1525 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1526 || microcode - cpu: over || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 0, 0]
  Command: -
  Step-by-step: tick: 1527 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x30 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 0]
  Command: push_imm -1
  Step-by-step: tick: 1528 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 0, -1]
  Command: +
  Step-by-step: tick: 1529 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, -1]
  Command: -if 2
  Step-by-step: tick: 1530 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0]
  Command: push_imm 0
  Step-by-step: tick: 1531 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 0]
  Command: jmp 1
  Step-by-step: tick: 1532 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0, 0]
  Command: if 58
  Step-by-step: tick: 1533 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 0]
  Command: pop
  Step-by-step: tick: 1534 || microcode - cpu: pop_stack || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: pop
  Step-by-step: tick: 1535 || microcode - cpu: pop_stack || A: 0x104 || B: 0x3a 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: dup
  Step-by-step: tick: 1536 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1537 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 1, 6]
  Command: +
  Step-by-step: tick: 1538 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 7]
  Command: sw_to_imm_addr 44
  Step-by-step: tick: 1539 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: jmp -100
  Step-by-step: tick: 1540 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1]
  Command: over
  Step-by-step: tick: 1541 || microcode - cpu: over || A: 0x104 || B: -0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: dup
  Step-by-step: tick: 1542 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7]
  Command: lw_from_imm_addr 44
  Step-by-step: tick: 1543 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 7]
  Command: over
  Step-by-step: tick: 1544 || microcode - cpu: over || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 7, 7]
  Command: -
  Step-by-step: tick: 1545 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x2c 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0]
  Command: push_imm -1
  Step-by-step: tick: 1546 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0, -1]
  Command: +
  Step-by-step: tick: 1547 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x104 || B: -0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, -1]
  Command: -if 2
  Step-by-step: tick: 1548 || microcode - alu: open_b, open_l_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: push_imm 0
  Step-by-step: tick: 1549 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0]
  Command: jmp 1
  Step-by-step: tick: 1550 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 0]
  Command: if 88
  Step-by-step: tick: 1551 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7]
  Command: pop
  Step-by-step: tick: 1552 || microcode - cpu: pop_stack || A: 0x104 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: pop
  Step-by-step: tick: 1553 || microcode - cpu: pop_stack || A: 0x104 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: ret
  Step-by-step: tick: 1554 || microcode - cpu: restore_pc || A: 0x104 || B: 0x58 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 4
  Step-by-step: tick: 1555 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256]
  Command: call -162
  Step-by-step: tick: 1556 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, call || A: 0x104 || B: -0xa2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1557 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1558 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1559 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 1560 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 1561 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1562 || microcode - cpu: over || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1563 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1564 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: over
  Step-by-step: tick: 1565 || microcode - cpu: over || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: -
  Step-by-step: tick: 1566 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
  Command: if 2
  Step-by-step: tick: 1567 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1568 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1569 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1570 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1571 || microcode - cpu: over || A: 0x104 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1572 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256]
  Command: load_T_a_pop
  Step-by-step: tick: 1573 || microcode - cpu: pop_stack, load_T_a || A: 0x100 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1574 || microcode - alu: open_a, add | mem: read || A: 0x100 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: dup
  Step-by-step: tick: 1575 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  Command: dup
  Step-by-step: tick: 1576 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1577 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x100 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
  Command: push_imm 0
  Step-by-step: tick: 1578 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
  Command: -
  Step-by-step: tick: 1579 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x100 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1]
  Command: if 2
  Step-by-step: tick: 1580 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x100 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: push_imm 0
  Step-by-step: tick: 1581 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x100 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: jmp 1
  Step-by-step: tick: 1582 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: if 1
  Step-by-step: tick: 1583 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x100 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 1584 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x100 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 1585 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_a_addr
  Step-by-step: tick: 1586 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1587 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256]
  Command: push_imm 4
  Step-by-step: tick: 1588 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 4]
  Command: +
  Step-by-step: tick: 1589 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1590 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1591 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1592 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: +
  Step-by-step: tick: 1593 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1594 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1595 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1596 || microcode - cpu: over || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1597 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1598 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: over
  Step-by-step: tick: 1599 || microcode - cpu: over || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
  Command: -
  Step-by-step: tick: 1600 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
  Command: if 2
  Step-by-step: tick: 1601 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1602 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1603 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1604 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1605 || microcode - cpu: over || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1606 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260]
  Command: load_T_a_pop
  Step-by-step: tick: 1607 || microcode - cpu: pop_stack, load_T_a || A: 0x104 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1608 || microcode - alu: open_a, add | mem: read || A: 0x104 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: dup
  Step-by-step: tick: 1609 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
  Command: dup
  Step-by-step: tick: 1610 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1611 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x104 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
  Command: push_imm 0
  Step-by-step: tick: 1612 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0]
  Command: -
  Step-by-step: tick: 1613 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2]
  Command: if 2
  Step-by-step: tick: 1614 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: push_imm 0
  Step-by-step: tick: 1615 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x104 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
  Command: jmp 1
  Step-by-step: tick: 1616 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
  Command: if 1
  Step-by-step: tick: 1617 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x104 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 1618 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x104 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 1619 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: sw_to_a_addr
  Step-by-step: tick: 1620 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1621 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260]
  Command: push_imm 4
  Step-by-step: tick: 1622 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 260, 4]
  Command: +
  Step-by-step: tick: 1623 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1624 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1625 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1626 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: +
  Step-by-step: tick: 1627 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1628 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1629 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1630 || microcode - cpu: over || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1631 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1632 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
  Command: over
  Step-by-step: tick: 1633 || microcode - cpu: over || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
  Command: -
  Step-by-step: tick: 1634 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2]
  Command: if 2
  Step-by-step: tick: 1635 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1636 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1637 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1638 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1639 || microcode - cpu: over || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1640 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264]
  Command: load_T_a_pop
  Step-by-step: tick: 1641 || microcode - cpu: pop_stack, load_T_a || A: 0x108 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1642 || microcode - alu: open_a, add | mem: read || A: 0x108 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: dup
  Step-by-step: tick: 1643 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3]
  Command: dup
  Step-by-step: tick: 1644 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x108 || B: 0x3 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1645 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x108 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3]
  Command: push_imm 0
  Step-by-step: tick: 1646 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0]
  Command: -
  Step-by-step: tick: 1647 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, -3]
  Command: if 2
  Step-by-step: tick: 1648 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: push_imm 0
  Step-by-step: tick: 1649 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x108 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]
  Command: jmp 1
  Step-by-step: tick: 1650 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]
  Command: if 1
  Step-by-step: tick: 1651 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x108 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 1652 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x108 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 1653 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: sw_to_a_addr
  Step-by-step: tick: 1654 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1655 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264]
  Command: push_imm 4
  Step-by-step: tick: 1656 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 264, 4]
  Command: +
  Step-by-step: tick: 1657 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1658 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1659 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1660 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: +
  Step-by-step: tick: 1661 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1662 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1663 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1664 || microcode - cpu: over || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1665 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1666 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
  Command: over
  Step-by-step: tick: 1667 || microcode - cpu: over || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]
  Command: -
  Step-by-step: tick: 1668 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3]
  Command: if 2
  Step-by-step: tick: 1669 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1670 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1671 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1672 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1673 || microcode - cpu: over || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1674 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268]
  Command: load_T_a_pop
  Step-by-step: tick: 1675 || microcode - cpu: pop_stack, load_T_a || A: 0x10c || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1676 || microcode - alu: open_a, add | mem: read || A: 0x10c || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: dup
  Step-by-step: tick: 1677 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4]
  Command: dup
  Step-by-step: tick: 1678 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x10c || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1679 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x10c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4]
  Command: push_imm 0
  Step-by-step: tick: 1680 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0]
  Command: -
  Step-by-step: tick: 1681 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -4]
  Command: if 2
  Step-by-step: tick: 1682 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: push_imm 0
  Step-by-step: tick: 1683 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x10c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
  Command: jmp 1
  Step-by-step: tick: 1684 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
  Command: if 1
  Step-by-step: tick: 1685 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x10c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 1686 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x10c || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 1687 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: sw_to_a_addr
  Step-by-step: tick: 1688 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1689 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268]
  Command: push_imm 4
  Step-by-step: tick: 1690 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 4]
  Command: +
  Step-by-step: tick: 1691 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1692 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1693 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1694 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: +
  Step-by-step: tick: 1695 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1696 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1697 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1698 || microcode - cpu: over || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1699 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1700 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
  Command: over
  Step-by-step: tick: 1701 || microcode - cpu: over || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
  Command: -
  Step-by-step: tick: 1702 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4]
  Command: if 2
  Step-by-step: tick: 1703 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1704 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1705 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1706 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1707 || microcode - cpu: over || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1708 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272]
  Command: load_T_a_pop
  Step-by-step: tick: 1709 || microcode - cpu: pop_stack, load_T_a || A: 0x110 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1710 || microcode - alu: open_a, add | mem: read || A: 0x110 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: dup
  Step-by-step: tick: 1711 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5]
  Command: dup
  Step-by-step: tick: 1712 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x110 || B: 0x5 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1713 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x110 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5]
  Command: push_imm 0
  Step-by-step: tick: 1714 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0]
  Command: -
  Step-by-step: tick: 1715 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, -5]
  Command: if 2
  Step-by-step: tick: 1716 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: push_imm 0
  Step-by-step: tick: 1717 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x110 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0]
  Command: jmp 1
  Step-by-step: tick: 1718 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0]
  Command: if 1
  Step-by-step: tick: 1719 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x110 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 1720 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x110 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 1721 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: sw_to_a_addr
  Step-by-step: tick: 1722 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1723 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272]
  Command: push_imm 4
  Step-by-step: tick: 1724 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 272, 4]
  Command: +
  Step-by-step: tick: 1725 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1726 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1727 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1728 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: +
  Step-by-step: tick: 1729 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1730 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1731 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1732 || microcode - cpu: over || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1733 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1734 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5]
  Command: over
  Step-by-step: tick: 1735 || microcode - cpu: over || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0]
  Command: -
  Step-by-step: tick: 1736 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5]
  Command: if 2
  Step-by-step: tick: 1737 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1738 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1739 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1740 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1741 || microcode - cpu: over || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1742 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276]
  Command: load_T_a_pop
  Step-by-step: tick: 1743 || microcode - cpu: pop_stack, load_T_a || A: 0x114 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1744 || microcode - alu: open_a, add | mem: read || A: 0x114 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: dup
  Step-by-step: tick: 1745 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8]
  Command: dup
  Step-by-step: tick: 1746 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x114 || B: 0x8 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1747 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x114 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8]
  Command: push_imm 0
  Step-by-step: tick: 1748 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0]
  Command: -
  Step-by-step: tick: 1749 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, -8]
  Command: if 2
  Step-by-step: tick: 1750 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: push_imm 0
  Step-by-step: tick: 1751 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x114 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
  Command: jmp 1
  Step-by-step: tick: 1752 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
  Command: if 1
  Step-by-step: tick: 1753 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x114 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 1754 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x114 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 1755 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: sw_to_a_addr
  Step-by-step: tick: 1756 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1757 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276]
  Command: push_imm 4
  Step-by-step: tick: 1758 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 276, 4]
  Command: +
  Step-by-step: tick: 1759 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1760 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1761 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1762 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: +
  Step-by-step: tick: 1763 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1764 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1765 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1766 || microcode - cpu: over || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1767 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1768 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
  Command: over
  Step-by-step: tick: 1769 || microcode - cpu: over || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
  Command: -
  Step-by-step: tick: 1770 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8]
  Command: if 2
  Step-by-step: tick: 1771 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1772 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1773 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1774 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1775 || microcode - cpu: over || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1776 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280]
  Command: load_T_a_pop
  Step-by-step: tick: 1777 || microcode - cpu: pop_stack, load_T_a || A: 0x118 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1778 || microcode - alu: open_a, add | mem: read || A: 0x118 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: dup
  Step-by-step: tick: 1779 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x118 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100]
  Command: dup
  Step-by-step: tick: 1780 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x118 || B: 0x64 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1781 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x118 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100]
  Command: push_imm 0
  Step-by-step: tick: 1782 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 0]
  Command: -
  Step-by-step: tick: 1783 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x118 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, -100]
  Command: if 2
  Step-by-step: tick: 1784 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x118 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: push_imm 0
  Step-by-step: tick: 1785 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x118 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0]
  Command: jmp 1
  Step-by-step: tick: 1786 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x118 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0]
  Command: if 1
  Step-by-step: tick: 1787 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x118 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: lw_from_imm_addr 16
  Step-by-step: tick: 1788 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x118 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 132]
  Command: load_T_a_pop
  Step-by-step: tick: 1789 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: sw_to_a_addr
  Step-by-step: tick: 1790 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x10 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1791 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280]
  Command: push_imm 4
  Step-by-step: tick: 1792 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 280, 4]
  Command: +
  Step-by-step: tick: 1793 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284]
  Command: sw_to_imm_addr 32
  Step-by-step: tick: 1794 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1795 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1796 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: +
  Step-by-step: tick: 1797 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1798 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1799 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1800 || microcode - cpu: over || A: 0x84 || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1801 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1802 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100]
  Command: over
  Step-by-step: tick: 1803 || microcode - cpu: over || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0]
  Command: -
  Step-by-step: tick: 1804 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100]
  Command: if 2
  Step-by-step: tick: 1805 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1806 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: jmp 1
  Step-by-step: tick: 1807 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 27
  Step-by-step: tick: 1808 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1809 || microcode - cpu: over || A: 0x84 || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 32
  Step-by-step: tick: 1810 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 284]
  Command: load_T_a_pop
  Step-by-step: tick: 1811 || microcode - cpu: pop_stack, load_T_a || A: 0x11c || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_a_addr
  Step-by-step: tick: 1812 || microcode - alu: open_a, add | mem: read || A: 0x11c || B: 0x20 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1813 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1814 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1815 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 1816 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: -
  Step-by-step: tick: 1817 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 2
  Step-by-step: tick: 1818 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 1
  Step-by-step: tick: 1819 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
  Command: if 1
  Step-by-step: tick: 1820 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x1 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp 7
  Step-by-step: tick: 1821 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x11c || B: 0x7 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1822 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1823 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: +
  Step-by-step: tick: 1824 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: sw_to_imm_addr 36
  Step-by-step: tick: 1825 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: jmp -37
  Step-by-step: tick: 1826 || microcode - alu: open_b, open_l_pc, add | cpu: load_imm, fetch_pc || A: 0x11c || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1827 || microcode - cpu: over || A: 0x11c || B: -0x25 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: dup
  Step-by-step: tick: 1828 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: lw_from_imm_addr 36
  Step-by-step: tick: 1829 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: over
  Step-by-step: tick: 1830 || microcode - cpu: over || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: -
  Step-by-step: tick: 1831 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x11c || B: 0x24 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 2
  Step-by-step: tick: 1832 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x2 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: push_imm 0
  Step-by-step: tick: 1833 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x11c || B: 0x0 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: if 27
  Step-by-step: tick: 1834 || microcode - alu: open_b, open_l_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x11c || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 1835 || microcode - cpu: pop_stack || A: 0x11c || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: pop
  Step-by-step: tick: 1836 || microcode - cpu: pop_stack || A: 0x11c || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: ret
  Step-by-step: tick: 1837 || microcode - cpu: restore_pc || A: 0x11c || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  Command: halt
  Step-by-step: tick: 1838 || microcode - cpu: kill_cpu || A: 0x11c || B: 0x1b 
  data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  -----------
  Result: numio[0x80]: 
  numio[0x84]: 1, 2, 3, 4, 5, 8, 100
  tick_count = 1838
  [1, 2, 3, 4, 5, 8, 100](io:out:decbe)=[1, 2, 3, 4, 5, 8, 100] => RESULT=Passe
  -----------
