-----------
binary: 0x000 - 0x1008000000 - sw_to_imm_addr 0x00000008
0x005 - 0x0101000000 - push_imm 0x00000001
0x00a - 0x100c000000 - sw_to_imm_addr 0x0000000C
0x00f - 0x0100000000 - push_imm 0x00000000
0x014 - 0x0100000000 - push_imm 0x00000000
0x019 - 0x30 - over
0x01a - 0x08 - dup
0x01b - 0x020c000000 - lw_from_imm_addr 0x0000000C
0x020 - 0x30 - over
0x021 - 0x21 - -
0x022 - 0x4302000000 - if 0x00000002
0x027 - 0x0101000000 - push_imm 0x00000001
0x02c - 0x4001000000 - jmp 0x00000001
0x031 - 0x0100000000 - push_imm 0x00000000
0x036 - 0x431f000000 - if 0x0000001F
0x03b - 0x30 - over
0x03c - 0x0103000000 - push_imm 0x00000003
0x041 - 0x0208000000 - lw_from_imm_addr 0x00000008
0x046 - 0x21 - -
0x047 - 0x06 - load_T_a_pop
0x048 - 0x03 - lw_from_a_addr
0x049 - 0x01000000ff - push_imm 0xFF000000
0x04e - 0x28 - and
0x04f - 0x08 - dup
0x050 - 0x08 - dup
0x051 - 0x100c000000 - sw_to_imm_addr 0x0000000C
0x056 - 0x0100000000 - push_imm 0x00000000
0x05b - 0x21 - -
0x05c - 0x4302000000 - if 0x00000002
0x061 - 0x0100000000 - push_imm 0x00000000
0x066 - 0x4001000000 - jmp 0x00000001
0x06b - 0x0101000000 - push_imm 0x00000001
0x070 - 0x4301000000 - if 0x00000001
0x075 - 0x4007000000 - jmp 0x00000007
0x07a - 0x0204000000 - lw_from_imm_addr 0x00000004
0x07f - 0x06 - load_T_a_pop
0x080 - 0x11 - sw_to_a_addr
0x081 - 0x0208000000 - lw_from_imm_addr 0x00000008
0x086 - 0x0101000000 - push_imm 0x00000001
0x08b - 0x20 - +
0x08c - 0x1008000000 - sw_to_imm_addr 0x00000008
0x091 - 0x08 - dup
0x092 - 0x020c000000 - lw_from_imm_addr 0x0000000C
0x097 - 0x20 - +
0x098 - 0x100c000000 - sw_to_imm_addr 0x0000000C
0x09d - 0x40d7ffffff - jmp 0xFFFFFFD7
0x0a2 - 0x16 - pop
0x0a3 - 0x16 - pop
0x0a4 - 0x42 - ret
0x0a5 - 0x1010000000 - sw_to_imm_addr 0x00000010
0x0aa - 0x0101000000 - push_imm 0x00000001
0x0af - 0x1014000000 - sw_to_imm_addr 0x00000014
0x0b4 - 0x0100000000 - push_imm 0x00000000
0x0b9 - 0x0100000000 - push_imm 0x00000000
0x0be - 0x30 - over
0x0bf - 0x08 - dup
0x0c0 - 0x0214000000 - lw_from_imm_addr 0x00000014
0x0c5 - 0x30 - over
0x0c6 - 0x21 - -
0x0c7 - 0x4302000000 - if 0x00000002
0x0cc - 0x0101000000 - push_imm 0x00000001
0x0d1 - 0x4001000000 - jmp 0x00000001
0x0d6 - 0x0100000000 - push_imm 0x00000000
0x0db - 0x4312000000 - if 0x00000012
0x0e0 - 0x30 - over
0x0e1 - 0x0200000000 - lw_from_imm_addr 0x00000000
0x0e6 - 0x06 - load_T_a_pop
0x0e7 - 0x03 - lw_from_a_addr
0x0e8 - 0x08 - dup
0x0e9 - 0x1014000000 - sw_to_imm_addr 0x00000014
0x0ee - 0x0210000000 - lw_from_imm_addr 0x00000010
0x0f3 - 0x06 - load_T_a_pop
0x0f4 - 0x11 - sw_to_a_addr
0x0f5 - 0x0210000000 - lw_from_imm_addr 0x00000010
0x0fa - 0x0101000000 - push_imm 0x00000001
0x0ff - 0x20 - +
0x100 - 0x1010000000 - sw_to_imm_addr 0x00000010
0x105 - 0x08 - dup
0x106 - 0x0214000000 - lw_from_imm_addr 0x00000014
0x10b - 0x20 - +
0x10c - 0x1014000000 - sw_to_imm_addr 0x00000014
0x111 - 0x40e4ffffff - jmp 0xFFFFFFE4
0x116 - 0x16 - pop
0x117 - 0x16 - pop
0x118 - 0x42 - ret
0x119 - 0x0138000000 - push_imm 0x00000038
0x11e - 0x41a9ffffff - call 0xFFFFFFA9
0x123 - 0x0118000000 - push_imm 0x00000018
0x128 - 0x41d8ffffff - call 0xFFFFFFD8
0x12d - 0x014b000000 - push_imm 0x0000004B
0x132 - 0x41a5ffffff - call 0xFFFFFFA5
0x137 - 0x0118000000 - push_imm 0x00000018
0x13c - 0x41a3ffffff - call 0xFFFFFFA3
0x141 - 0x45 - halt
-----------
Command: push_imm 56
Step-by-step: tick: 1 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x38 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56]
Command: call -87
Step-by-step: tick: 2 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x0 || B: -0x57 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56]
Command: sw_to_imm_addr 8
Step-by-step: tick: 3 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 4 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: sw_to_imm_addr 12
Step-by-step: tick: 5 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 6 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 7 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 8 || microcode - cpu: over || A: 0x0 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 9 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 10 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: over
Step-by-step: tick: 11 || microcode - cpu: over || A: 0x0 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
Command: -
Step-by-step: tick: 12 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
Command: if 2
Step-by-step: tick: 13 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 14 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 15 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x0 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 16 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 17 || microcode - cpu: over || A: 0x0 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 18 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 19 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 56]
Command: -
Step-by-step: tick: 20 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53]
Command: load_T_a_pop
Step-by-step: tick: 21 || microcode - cpu: pop_stack, load_T_a || A: 0x35 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 22 || microcode - alu: open_a, add | mem: read || A: 0x35 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: push_imm -16777216
Step-by-step: tick: 23 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x35 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, -16777216]
Command: and
Step-by-step: tick: 24 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x35 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: dup
Step-by-step: tick: 25 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x35 || B: 0x57000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 1459617792]
Command: dup
Step-by-step: tick: 26 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x35 || B: 0x57000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 1459617792, 1459617792]
Command: sw_to_imm_addr 12
Step-by-step: tick: 27 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x35 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 1459617792]
Command: push_imm 0
Step-by-step: tick: 28 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x35 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 1459617792, 0]
Command: -
Step-by-step: tick: 29 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x35 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, -1459617792]
Command: if 2
Step-by-step: tick: 30 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x35 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: push_imm 0
Step-by-step: tick: 31 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x35 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 0]
Command: jmp 1
Step-by-step: tick: 32 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x35 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 0]
Command: if 1
Step-by-step: tick: 33 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x35 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: lw_from_imm_addr 4
Step-by-step: tick: 34 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x35 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 132]
Command: load_T_a_pop
Step-by-step: tick: 35 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: sw_to_a_addr
Step-by-step: tick: 36 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 37 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56]
Command: push_imm 1
Step-by-step: tick: 38 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 1]
Command: +
Step-by-step: tick: 39 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57]
Command: sw_to_imm_addr 8
Step-by-step: tick: 40 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 41 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 42 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: +
Step-by-step: tick: 43 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: sw_to_imm_addr 12
Step-by-step: tick: 44 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 45 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 46 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 47 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 48 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792]
Command: over
Step-by-step: tick: 49 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1459617792, 0]
Command: -
Step-by-step: tick: 50 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1459617792]
Command: if 2
Step-by-step: tick: 51 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 52 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 53 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 54 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 55 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 56 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 57 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 57]
Command: -
Step-by-step: tick: 58 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54]
Command: load_T_a_pop
Step-by-step: tick: 59 || microcode - cpu: pop_stack, load_T_a || A: 0x36 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 60 || microcode - alu: open_a, add | mem: read || A: 0x36 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1750532096]
Command: push_imm -16777216
Step-by-step: tick: 61 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x36 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1750532096, -16777216]
Command: and
Step-by-step: tick: 62 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x36 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464]
Command: dup
Step-by-step: tick: 63 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x36 || B: 0x68000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 1744830464]
Command: dup
Step-by-step: tick: 64 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x36 || B: 0x68000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 1744830464, 1744830464]
Command: sw_to_imm_addr 12
Step-by-step: tick: 65 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x36 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 1744830464]
Command: push_imm 0
Step-by-step: tick: 66 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x36 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 1744830464, 0]
Command: -
Step-by-step: tick: 67 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x36 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, -1744830464]
Command: if 2
Step-by-step: tick: 68 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x36 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464]
Command: push_imm 0
Step-by-step: tick: 69 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x36 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 0]
Command: jmp 1
Step-by-step: tick: 70 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x36 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 0]
Command: if 1
Step-by-step: tick: 71 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x36 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464]
Command: lw_from_imm_addr 4
Step-by-step: tick: 72 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x36 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 132]
Command: load_T_a_pop
Step-by-step: tick: 73 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464]
Command: sw_to_a_addr
Step-by-step: tick: 74 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 75 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57]
Command: push_imm 1
Step-by-step: tick: 76 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 1]
Command: +
Step-by-step: tick: 77 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58]
Command: sw_to_imm_addr 8
Step-by-step: tick: 78 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 79 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 80 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464]
Command: +
Step-by-step: tick: 81 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464]
Command: sw_to_imm_addr 12
Step-by-step: tick: 82 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 83 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 84 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 85 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 86 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464]
Command: over
Step-by-step: tick: 87 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1744830464, 0]
Command: -
Step-by-step: tick: 88 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1744830464]
Command: if 2
Step-by-step: tick: 89 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 90 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 91 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 92 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 93 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 94 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 95 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 58]
Command: -
Step-by-step: tick: 96 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55]
Command: load_T_a_pop
Step-by-step: tick: 97 || microcode - cpu: pop_stack, load_T_a || A: 0x37 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 98 || microcode - alu: open_a, add | mem: read || A: 0x37 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1634227968]
Command: push_imm -16777216
Step-by-step: tick: 99 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x37 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1634227968, -16777216]
Command: and
Step-by-step: tick: 100 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x37 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: dup
Step-by-step: tick: 101 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x37 || B: 0x61000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952]
Command: dup
Step-by-step: tick: 102 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x37 || B: 0x61000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952, 1627389952]
Command: sw_to_imm_addr 12
Step-by-step: tick: 103 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x37 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952]
Command: push_imm 0
Step-by-step: tick: 104 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x37 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952, 0]
Command: -
Step-by-step: tick: 105 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x37 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, -1627389952]
Command: if 2
Step-by-step: tick: 106 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x37 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: push_imm 0
Step-by-step: tick: 107 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x37 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: jmp 1
Step-by-step: tick: 108 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x37 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: if 1
Step-by-step: tick: 109 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x37 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: lw_from_imm_addr 4
Step-by-step: tick: 110 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x37 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 132]
Command: load_T_a_pop
Step-by-step: tick: 111 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: sw_to_a_addr
Step-by-step: tick: 112 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 113 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58]
Command: push_imm 1
Step-by-step: tick: 114 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 1]
Command: +
Step-by-step: tick: 115 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59]
Command: sw_to_imm_addr 8
Step-by-step: tick: 116 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 117 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 118 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: +
Step-by-step: tick: 119 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: sw_to_imm_addr 12
Step-by-step: tick: 120 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 121 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 122 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 123 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 124 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: over
Step-by-step: tick: 125 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: -
Step-by-step: tick: 126 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1627389952]
Command: if 2
Step-by-step: tick: 127 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 128 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 129 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 130 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 131 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 132 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 133 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 59]
Command: -
Step-by-step: tick: 134 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56]
Command: load_T_a_pop
Step-by-step: tick: 135 || microcode - cpu: pop_stack, load_T_a || A: 0x38 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 136 || microcode - alu: open_a, add | mem: read || A: 0x38 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1952540759]
Command: push_imm -16777216
Step-by-step: tick: 137 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x38 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1952540759, -16777216]
Command: and
Step-by-step: tick: 138 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x38 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056]
Command: dup
Step-by-step: tick: 139 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x38 || B: 0x74000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 1946157056]
Command: dup
Step-by-step: tick: 140 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x38 || B: 0x74000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 1946157056, 1946157056]
Command: sw_to_imm_addr 12
Step-by-step: tick: 141 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x38 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 1946157056]
Command: push_imm 0
Step-by-step: tick: 142 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x38 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 1946157056, 0]
Command: -
Step-by-step: tick: 143 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x38 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, -1946157056]
Command: if 2
Step-by-step: tick: 144 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x38 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056]
Command: push_imm 0
Step-by-step: tick: 145 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x38 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 0]
Command: jmp 1
Step-by-step: tick: 146 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x38 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 0]
Command: if 1
Step-by-step: tick: 147 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x38 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056]
Command: lw_from_imm_addr 4
Step-by-step: tick: 148 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x38 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 132]
Command: load_T_a_pop
Step-by-step: tick: 149 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056]
Command: sw_to_a_addr
Step-by-step: tick: 150 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 151 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59]
Command: push_imm 1
Step-by-step: tick: 152 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 1]
Command: +
Step-by-step: tick: 153 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60]
Command: sw_to_imm_addr 8
Step-by-step: tick: 154 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 155 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 156 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056]
Command: +
Step-by-step: tick: 157 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056]
Command: sw_to_imm_addr 12
Step-by-step: tick: 158 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 159 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 160 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 161 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 162 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056]
Command: over
Step-by-step: tick: 163 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1946157056, 0]
Command: -
Step-by-step: tick: 164 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1946157056]
Command: if 2
Step-by-step: tick: 165 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 166 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 167 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 168 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 169 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 170 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 171 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 60]
Command: -
Step-by-step: tick: 172 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57]
Command: load_T_a_pop
Step-by-step: tick: 173 || microcode - cpu: pop_stack, load_T_a || A: 0x39 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 174 || microcode - alu: open_a, add | mem: read || A: 0x39 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544498024]
Command: push_imm -16777216
Step-by-step: tick: 175 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x39 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544498024, -16777216]
Command: and
Step-by-step: tick: 176 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x39 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: dup
Step-by-step: tick: 177 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x39 || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: dup
Step-by-step: tick: 178 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x39 || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 179 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x39 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: push_imm 0
Step-by-step: tick: 180 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x39 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 0]
Command: -
Step-by-step: tick: 181 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x39 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, -536870912]
Command: if 2
Step-by-step: tick: 182 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x39 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: push_imm 0
Step-by-step: tick: 183 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x39 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: jmp 1
Step-by-step: tick: 184 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x39 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: if 1
Step-by-step: tick: 185 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x39 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: lw_from_imm_addr 4
Step-by-step: tick: 186 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x39 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 132]
Command: load_T_a_pop
Step-by-step: tick: 187 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_a_addr
Step-by-step: tick: 188 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 189 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60]
Command: push_imm 1
Step-by-step: tick: 190 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 1]
Command: +
Step-by-step: tick: 191 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61]
Command: sw_to_imm_addr 8
Step-by-step: tick: 192 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 193 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 194 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: +
Step-by-step: tick: 195 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 196 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 197 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 198 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 199 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 200 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: over
Step-by-step: tick: 201 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: -
Step-by-step: tick: 202 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -536870912]
Command: if 2
Step-by-step: tick: 203 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 204 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 205 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 206 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 207 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 208 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 209 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 61]
Command: -
Step-by-step: tick: 210 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58]
Command: load_T_a_pop
Step-by-step: tick: 211 || microcode - cpu: pop_stack, load_T_a || A: 0x3a || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 212 || microcode - alu: open_a, add | mem: read || A: 0x3a || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1763734625]
Command: push_imm -16777216
Step-by-step: tick: 213 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3a || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1763734625, -16777216]
Command: and
Step-by-step: tick: 214 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x3a || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680]
Command: dup
Step-by-step: tick: 215 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3a || B: 0x69000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 1761607680]
Command: dup
Step-by-step: tick: 216 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3a || B: 0x69000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 1761607680, 1761607680]
Command: sw_to_imm_addr 12
Step-by-step: tick: 217 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 1761607680]
Command: push_imm 0
Step-by-step: tick: 218 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 1761607680, 0]
Command: -
Step-by-step: tick: 219 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, -1761607680]
Command: if 2
Step-by-step: tick: 220 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3a || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680]
Command: push_imm 0
Step-by-step: tick: 221 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 0]
Command: jmp 1
Step-by-step: tick: 222 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 0]
Command: if 1
Step-by-step: tick: 223 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680]
Command: lw_from_imm_addr 4
Step-by-step: tick: 224 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3a || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 132]
Command: load_T_a_pop
Step-by-step: tick: 225 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680]
Command: sw_to_a_addr
Step-by-step: tick: 226 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 227 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61]
Command: push_imm 1
Step-by-step: tick: 228 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 1]
Command: +
Step-by-step: tick: 229 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62]
Command: sw_to_imm_addr 8
Step-by-step: tick: 230 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 231 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 232 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680]
Command: +
Step-by-step: tick: 233 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680]
Command: sw_to_imm_addr 12
Step-by-step: tick: 234 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 235 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 236 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 237 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 238 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680]
Command: over
Step-by-step: tick: 239 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1761607680, 0]
Command: -
Step-by-step: tick: 240 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1761607680]
Command: if 2
Step-by-step: tick: 241 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 242 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 243 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 244 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 245 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 246 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 247 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 62]
Command: -
Step-by-step: tick: 248 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59]
Command: load_T_a_pop
Step-by-step: tick: 249 || microcode - cpu: pop_stack, load_T_a || A: 0x3b || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 250 || microcode - alu: open_a, add | mem: read || A: 0x3b || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1936269428]
Command: push_imm -16777216
Step-by-step: tick: 251 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3b || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1936269428, -16777216]
Command: and
Step-by-step: tick: 252 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x3b || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840]
Command: dup
Step-by-step: tick: 253 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3b || B: 0x73000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 1929379840]
Command: dup
Step-by-step: tick: 254 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3b || B: 0x73000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 1929379840, 1929379840]
Command: sw_to_imm_addr 12
Step-by-step: tick: 255 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3b || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 1929379840]
Command: push_imm 0
Step-by-step: tick: 256 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 1929379840, 0]
Command: -
Step-by-step: tick: 257 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, -1929379840]
Command: if 2
Step-by-step: tick: 258 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3b || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840]
Command: push_imm 0
Step-by-step: tick: 259 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 0]
Command: jmp 1
Step-by-step: tick: 260 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 0]
Command: if 1
Step-by-step: tick: 261 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840]
Command: lw_from_imm_addr 4
Step-by-step: tick: 262 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3b || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 132]
Command: load_T_a_pop
Step-by-step: tick: 263 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840]
Command: sw_to_a_addr
Step-by-step: tick: 264 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 265 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62]
Command: push_imm 1
Step-by-step: tick: 266 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 1]
Command: +
Step-by-step: tick: 267 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]
Command: sw_to_imm_addr 8
Step-by-step: tick: 268 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 269 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 270 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840]
Command: +
Step-by-step: tick: 271 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840]
Command: sw_to_imm_addr 12
Step-by-step: tick: 272 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 273 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 274 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 275 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 276 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840]
Command: over
Step-by-step: tick: 277 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1929379840, 0]
Command: -
Step-by-step: tick: 278 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1929379840]
Command: if 2
Step-by-step: tick: 279 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 280 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 281 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 282 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 283 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 284 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 285 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 63]
Command: -
Step-by-step: tick: 286 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60]
Command: load_T_a_pop
Step-by-step: tick: 287 || microcode - cpu: pop_stack, load_T_a || A: 0x3c || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 288 || microcode - alu: open_a, add | mem: read || A: 0x3c || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544434464]
Command: push_imm -16777216
Step-by-step: tick: 289 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544434464, -16777216]
Command: and
Step-by-step: tick: 290 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x3c || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: dup
Step-by-step: tick: 291 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3c || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: dup
Step-by-step: tick: 292 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3c || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 293 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3c || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: push_imm 0
Step-by-step: tick: 294 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 0]
Command: -
Step-by-step: tick: 295 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, -536870912]
Command: if 2
Step-by-step: tick: 296 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: push_imm 0
Step-by-step: tick: 297 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: jmp 1
Step-by-step: tick: 298 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: if 1
Step-by-step: tick: 299 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: lw_from_imm_addr 4
Step-by-step: tick: 300 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 132]
Command: load_T_a_pop
Step-by-step: tick: 301 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_a_addr
Step-by-step: tick: 302 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 303 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]
Command: push_imm 1
Step-by-step: tick: 304 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 1]
Command: +
Step-by-step: tick: 305 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64]
Command: sw_to_imm_addr 8
Step-by-step: tick: 306 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 307 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 308 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: +
Step-by-step: tick: 309 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 310 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 311 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 312 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 313 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 314 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: over
Step-by-step: tick: 315 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: -
Step-by-step: tick: 316 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -536870912]
Command: if 2
Step-by-step: tick: 317 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 318 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 319 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 320 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 321 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 322 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 323 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64]
Command: -
Step-by-step: tick: 324 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61]
Command: load_T_a_pop
Step-by-step: tick: 325 || microcode - cpu: pop_stack, load_T_a || A: 0x3d || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 326 || microcode - alu: open_a, add | mem: read || A: 0x3d || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2032169833]
Command: push_imm -16777216
Step-by-step: tick: 327 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3d || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2032169833, -16777216]
Command: and
Step-by-step: tick: 328 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x3d || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136]
Command: dup
Step-by-step: tick: 329 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3d || B: 0x79000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 2030043136]
Command: dup
Step-by-step: tick: 330 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3d || B: 0x79000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 2030043136, 2030043136]
Command: sw_to_imm_addr 12
Step-by-step: tick: 331 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3d || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 2030043136]
Command: push_imm 0
Step-by-step: tick: 332 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 2030043136, 0]
Command: -
Step-by-step: tick: 333 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, -2030043136]
Command: if 2
Step-by-step: tick: 334 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3d || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136]
Command: push_imm 0
Step-by-step: tick: 335 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 0]
Command: jmp 1
Step-by-step: tick: 336 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 0]
Command: if 1
Step-by-step: tick: 337 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136]
Command: lw_from_imm_addr 4
Step-by-step: tick: 338 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3d || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 132]
Command: load_T_a_pop
Step-by-step: tick: 339 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136]
Command: sw_to_a_addr
Step-by-step: tick: 340 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 341 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64]
Command: push_imm 1
Step-by-step: tick: 342 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1]
Command: +
Step-by-step: tick: 343 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65]
Command: sw_to_imm_addr 8
Step-by-step: tick: 344 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 345 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 346 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136]
Command: +
Step-by-step: tick: 347 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136]
Command: sw_to_imm_addr 12
Step-by-step: tick: 348 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 349 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 350 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 351 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 352 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136]
Command: over
Step-by-step: tick: 353 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2030043136, 0]
Command: -
Step-by-step: tick: 354 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2030043136]
Command: if 2
Step-by-step: tick: 355 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 356 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 357 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 358 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 359 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 360 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 361 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 65]
Command: -
Step-by-step: tick: 362 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62]
Command: load_T_a_pop
Step-by-step: tick: 363 || microcode - cpu: pop_stack, load_T_a || A: 0x3e || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 364 || microcode - alu: open_a, add | mem: read || A: 0x3e || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1870209139]
Command: push_imm -16777216
Step-by-step: tick: 365 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3e || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1870209139, -16777216]
Command: and
Step-by-step: tick: 366 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x3e || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: dup
Step-by-step: tick: 367 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3e || B: 0x6f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
Command: dup
Step-by-step: tick: 368 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3e || B: 0x6f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 1862270976]
Command: sw_to_imm_addr 12
Step-by-step: tick: 369 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3e || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
Command: push_imm 0
Step-by-step: tick: 370 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3e || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 0]
Command: -
Step-by-step: tick: 371 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3e || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, -1862270976]
Command: if 2
Step-by-step: tick: 372 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3e || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: push_imm 0
Step-by-step: tick: 373 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3e || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: jmp 1
Step-by-step: tick: 374 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3e || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: if 1
Step-by-step: tick: 375 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3e || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: lw_from_imm_addr 4
Step-by-step: tick: 376 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3e || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 132]
Command: load_T_a_pop
Step-by-step: tick: 377 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: sw_to_a_addr
Step-by-step: tick: 378 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 379 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65]
Command: push_imm 1
Step-by-step: tick: 380 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 1]
Command: +
Step-by-step: tick: 381 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66]
Command: sw_to_imm_addr 8
Step-by-step: tick: 382 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 383 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 384 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: +
Step-by-step: tick: 385 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: sw_to_imm_addr 12
Step-by-step: tick: 386 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 387 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 388 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 389 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 390 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: over
Step-by-step: tick: 391 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: -
Step-by-step: tick: 392 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1862270976]
Command: if 2
Step-by-step: tick: 393 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 394 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 395 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 396 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 397 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 398 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 399 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 66]
Command: -
Step-by-step: tick: 400 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63]
Command: load_T_a_pop
Step-by-step: tick: 401 || microcode - cpu: pop_stack, load_T_a || A: 0x3f || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 402 || microcode - alu: open_a, add | mem: read || A: 0x3f || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1970239776]
Command: push_imm -16777216
Step-by-step: tick: 403 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3f || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1970239776, -16777216]
Command: and
Step-by-step: tick: 404 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x3f || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272]
Command: dup
Step-by-step: tick: 405 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3f || B: 0x75000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 1962934272]
Command: dup
Step-by-step: tick: 406 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3f || B: 0x75000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 1962934272, 1962934272]
Command: sw_to_imm_addr 12
Step-by-step: tick: 407 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 1962934272]
Command: push_imm 0
Step-by-step: tick: 408 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 1962934272, 0]
Command: -
Step-by-step: tick: 409 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, -1962934272]
Command: if 2
Step-by-step: tick: 410 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3f || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272]
Command: push_imm 0
Step-by-step: tick: 411 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 0]
Command: jmp 1
Step-by-step: tick: 412 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3f || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 0]
Command: if 1
Step-by-step: tick: 413 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3f || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272]
Command: lw_from_imm_addr 4
Step-by-step: tick: 414 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3f || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 132]
Command: load_T_a_pop
Step-by-step: tick: 415 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272]
Command: sw_to_a_addr
Step-by-step: tick: 416 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 417 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66]
Command: push_imm 1
Step-by-step: tick: 418 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 1]
Command: +
Step-by-step: tick: 419 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67]
Command: sw_to_imm_addr 8
Step-by-step: tick: 420 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 421 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 422 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272]
Command: +
Step-by-step: tick: 423 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272]
Command: sw_to_imm_addr 12
Step-by-step: tick: 424 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 425 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 426 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 427 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 428 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272]
Command: over
Step-by-step: tick: 429 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1962934272, 0]
Command: -
Step-by-step: tick: 430 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1962934272]
Command: if 2
Step-by-step: tick: 431 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 432 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 433 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 434 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 435 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 436 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 437 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 67]
Command: -
Step-by-step: tick: 438 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64]
Command: load_T_a_pop
Step-by-step: tick: 439 || microcode - cpu: pop_stack, load_T_a || A: 0x40 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 440 || microcode - alu: open_a, add | mem: read || A: 0x40 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920298873]
Command: push_imm -16777216
Step-by-step: tick: 441 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1920298873, -16777216]
Command: and
Step-by-step: tick: 442 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x40 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
Command: dup
Step-by-step: tick: 443 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x40 || B: 0x72000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624]
Command: dup
Step-by-step: tick: 444 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x40 || B: 0x72000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624, 1912602624]
Command: sw_to_imm_addr 12
Step-by-step: tick: 445 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x40 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624]
Command: push_imm 0
Step-by-step: tick: 446 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 1912602624, 0]
Command: -
Step-by-step: tick: 447 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x40 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, -1912602624]
Command: if 2
Step-by-step: tick: 448 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
Command: push_imm 0
Step-by-step: tick: 449 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 0]
Command: jmp 1
Step-by-step: tick: 450 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x40 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 0]
Command: if 1
Step-by-step: tick: 451 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
Command: lw_from_imm_addr 4
Step-by-step: tick: 452 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 132]
Command: load_T_a_pop
Step-by-step: tick: 453 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
Command: sw_to_a_addr
Step-by-step: tick: 454 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 455 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67]
Command: push_imm 1
Step-by-step: tick: 456 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 1]
Command: +
Step-by-step: tick: 457 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68]
Command: sw_to_imm_addr 8
Step-by-step: tick: 458 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 459 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 460 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
Command: +
Step-by-step: tick: 461 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
Command: sw_to_imm_addr 12
Step-by-step: tick: 462 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 463 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 464 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 465 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 466 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624]
Command: over
Step-by-step: tick: 467 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1912602624, 0]
Command: -
Step-by-step: tick: 468 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1912602624]
Command: if 2
Step-by-step: tick: 469 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 470 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 471 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 472 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 473 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 474 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 475 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 68]
Command: -
Step-by-step: tick: 476 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65]
Command: load_T_a_pop
Step-by-step: tick: 477 || microcode - cpu: pop_stack, load_T_a || A: 0x41 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 478 || microcode - alu: open_a, add | mem: read || A: 0x41 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544372079]
Command: push_imm -16777216
Step-by-step: tick: 479 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x41 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 544372079, -16777216]
Command: and
Step-by-step: tick: 480 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x41 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: dup
Step-by-step: tick: 481 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x41 || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: dup
Step-by-step: tick: 482 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x41 || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 483 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x41 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: push_imm 0
Step-by-step: tick: 484 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x41 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 0]
Command: -
Step-by-step: tick: 485 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x41 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, -536870912]
Command: if 2
Step-by-step: tick: 486 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x41 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: push_imm 0
Step-by-step: tick: 487 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x41 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: jmp 1
Step-by-step: tick: 488 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x41 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: if 1
Step-by-step: tick: 489 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x41 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: lw_from_imm_addr 4
Step-by-step: tick: 490 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x41 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 132]
Command: load_T_a_pop
Step-by-step: tick: 491 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_a_addr
Step-by-step: tick: 492 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 493 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68]
Command: push_imm 1
Step-by-step: tick: 494 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 1]
Command: +
Step-by-step: tick: 495 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69]
Command: sw_to_imm_addr 8
Step-by-step: tick: 496 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 497 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 498 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: +
Step-by-step: tick: 499 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 500 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 501 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 502 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 503 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 504 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: over
Step-by-step: tick: 505 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: -
Step-by-step: tick: 506 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -536870912]
Command: if 2
Step-by-step: tick: 507 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 508 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 509 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 510 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 511 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 512 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 513 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 69]
Command: -
Step-by-step: tick: 514 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66]
Command: load_T_a_pop
Step-by-step: tick: 515 || microcode - cpu: pop_stack, load_T_a || A: 0x42 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 516 || microcode - alu: open_a, add | mem: read || A: 0x42 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1847620213]
Command: push_imm -16777216
Step-by-step: tick: 517 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x42 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1847620213, -16777216]
Command: and
Step-by-step: tick: 518 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x42 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: dup
Step-by-step: tick: 519 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x42 || B: 0x6e000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760]
Command: dup
Step-by-step: tick: 520 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x42 || B: 0x6e000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760, 1845493760]
Command: sw_to_imm_addr 12
Step-by-step: tick: 521 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x42 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760]
Command: push_imm 0
Step-by-step: tick: 522 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x42 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760, 0]
Command: -
Step-by-step: tick: 523 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x42 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, -1845493760]
Command: if 2
Step-by-step: tick: 524 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x42 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: push_imm 0
Step-by-step: tick: 525 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x42 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 0]
Command: jmp 1
Step-by-step: tick: 526 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x42 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 0]
Command: if 1
Step-by-step: tick: 527 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x42 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: lw_from_imm_addr 4
Step-by-step: tick: 528 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x42 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 132]
Command: load_T_a_pop
Step-by-step: tick: 529 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: sw_to_a_addr
Step-by-step: tick: 530 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 531 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69]
Command: push_imm 1
Step-by-step: tick: 532 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 1]
Command: +
Step-by-step: tick: 533 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70]
Command: sw_to_imm_addr 8
Step-by-step: tick: 534 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 535 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 536 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: +
Step-by-step: tick: 537 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: sw_to_imm_addr 12
Step-by-step: tick: 538 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 539 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 540 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 541 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 542 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: over
Step-by-step: tick: 543 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 0]
Command: -
Step-by-step: tick: 544 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1845493760]
Command: if 2
Step-by-step: tick: 545 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 546 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 547 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 548 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 549 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 550 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 551 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 70]
Command: -
Step-by-step: tick: 552 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67]
Command: load_T_a_pop
Step-by-step: tick: 553 || microcode - cpu: pop_stack, load_T_a || A: 0x43 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 554 || microcode - alu: open_a, add | mem: read || A: 0x43 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1634607218]
Command: push_imm -16777216
Step-by-step: tick: 555 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x43 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1634607218, -16777216]
Command: and
Step-by-step: tick: 556 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x43 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: dup
Step-by-step: tick: 557 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x43 || B: 0x61000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952]
Command: dup
Step-by-step: tick: 558 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x43 || B: 0x61000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952, 1627389952]
Command: sw_to_imm_addr 12
Step-by-step: tick: 559 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x43 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952]
Command: push_imm 0
Step-by-step: tick: 560 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x43 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952, 0]
Command: -
Step-by-step: tick: 561 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x43 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, -1627389952]
Command: if 2
Step-by-step: tick: 562 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x43 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: push_imm 0
Step-by-step: tick: 563 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x43 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: jmp 1
Step-by-step: tick: 564 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x43 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: if 1
Step-by-step: tick: 565 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x43 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: lw_from_imm_addr 4
Step-by-step: tick: 566 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x43 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 132]
Command: load_T_a_pop
Step-by-step: tick: 567 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: sw_to_a_addr
Step-by-step: tick: 568 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 569 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70]
Command: push_imm 1
Step-by-step: tick: 570 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 1]
Command: +
Step-by-step: tick: 571 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71]
Command: sw_to_imm_addr 8
Step-by-step: tick: 572 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 573 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 574 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: +
Step-by-step: tick: 575 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: sw_to_imm_addr 12
Step-by-step: tick: 576 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 577 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 578 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 579 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 580 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: over
Step-by-step: tick: 581 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: -
Step-by-step: tick: 582 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1627389952]
Command: if 2
Step-by-step: tick: 583 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 584 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 585 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 586 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 587 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 588 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 589 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 71]
Command: -
Step-by-step: tick: 590 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68]
Command: load_T_a_pop
Step-by-step: tick: 591 || microcode - cpu: pop_stack, load_T_a || A: 0x44 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 592 || microcode - alu: open_a, add | mem: read || A: 0x44 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1835101728]
Command: push_imm -16777216
Step-by-step: tick: 593 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1835101728, -16777216]
Command: and
Step-by-step: tick: 594 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x44 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: dup
Step-by-step: tick: 595 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x44 || B: 0x6d000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544]
Command: dup
Step-by-step: tick: 596 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x44 || B: 0x6d000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544, 1828716544]
Command: sw_to_imm_addr 12
Step-by-step: tick: 597 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x44 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544]
Command: push_imm 0
Step-by-step: tick: 598 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544, 0]
Command: -
Step-by-step: tick: 599 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x44 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, -1828716544]
Command: if 2
Step-by-step: tick: 600 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: push_imm 0
Step-by-step: tick: 601 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 0]
Command: jmp 1
Step-by-step: tick: 602 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x44 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 0]
Command: if 1
Step-by-step: tick: 603 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: lw_from_imm_addr 4
Step-by-step: tick: 604 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 132]
Command: load_T_a_pop
Step-by-step: tick: 605 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: sw_to_a_addr
Step-by-step: tick: 606 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 607 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71]
Command: push_imm 1
Step-by-step: tick: 608 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71, 1]
Command: +
Step-by-step: tick: 609 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
Command: sw_to_imm_addr 8
Step-by-step: tick: 610 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 611 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 612 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: +
Step-by-step: tick: 613 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: sw_to_imm_addr 12
Step-by-step: tick: 614 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 615 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 616 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 617 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 618 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: over
Step-by-step: tick: 619 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 0]
Command: -
Step-by-step: tick: 620 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1828716544]
Command: if 2
Step-by-step: tick: 621 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 622 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 623 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 624 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 625 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 626 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 627 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 72]
Command: -
Step-by-step: tick: 628 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69]
Command: load_T_a_pop
Step-by-step: tick: 629 || microcode - cpu: pop_stack, load_T_a || A: 0x45 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 630 || microcode - alu: open_a, add | mem: read || A: 0x45 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1701667182]
Command: push_imm -16777216
Step-by-step: tick: 631 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x45 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1701667182, -16777216]
Command: and
Step-by-step: tick: 632 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x45 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: dup
Step-by-step: tick: 633 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x45 || B: 0x65000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816]
Command: dup
Step-by-step: tick: 634 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x45 || B: 0x65000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816, 1694498816]
Command: sw_to_imm_addr 12
Step-by-step: tick: 635 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x45 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816]
Command: push_imm 0
Step-by-step: tick: 636 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x45 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816, 0]
Command: -
Step-by-step: tick: 637 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x45 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, -1694498816]
Command: if 2
Step-by-step: tick: 638 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x45 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: push_imm 0
Step-by-step: tick: 639 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x45 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
Command: jmp 1
Step-by-step: tick: 640 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x45 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
Command: if 1
Step-by-step: tick: 641 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x45 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: lw_from_imm_addr 4
Step-by-step: tick: 642 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x45 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 132]
Command: load_T_a_pop
Step-by-step: tick: 643 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: sw_to_a_addr
Step-by-step: tick: 644 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 645 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
Command: push_imm 1
Step-by-step: tick: 646 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 1]
Command: +
Step-by-step: tick: 647 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73]
Command: sw_to_imm_addr 8
Step-by-step: tick: 648 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 649 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 650 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: +
Step-by-step: tick: 651 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: sw_to_imm_addr 12
Step-by-step: tick: 652 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 653 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 654 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 655 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 656 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: over
Step-by-step: tick: 657 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
Command: -
Step-by-step: tick: 658 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1694498816]
Command: if 2
Step-by-step: tick: 659 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 660 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 661 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 662 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 663 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 664 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 665 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 73]
Command: -
Step-by-step: tick: 666 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70]
Command: load_T_a_pop
Step-by-step: tick: 667 || microcode - cpu: pop_stack, load_T_a || A: 0x46 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 668 || microcode - alu: open_a, add | mem: read || A: 0x46 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063611745]
Command: push_imm -16777216
Step-by-step: tick: 669 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x46 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1063611745, -16777216]
Command: and
Step-by-step: tick: 670 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x46 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608]
Command: dup
Step-by-step: tick: 671 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x46 || B: 0x3f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 1056964608]
Command: dup
Step-by-step: tick: 672 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x46 || B: 0x3f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 1056964608, 1056964608]
Command: sw_to_imm_addr 12
Step-by-step: tick: 673 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x46 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 1056964608]
Command: push_imm 0
Step-by-step: tick: 674 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x46 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 1056964608, 0]
Command: -
Step-by-step: tick: 675 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x46 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, -1056964608]
Command: if 2
Step-by-step: tick: 676 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x46 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608]
Command: push_imm 0
Step-by-step: tick: 677 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x46 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 0]
Command: jmp 1
Step-by-step: tick: 678 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x46 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 0]
Command: if 1
Step-by-step: tick: 679 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x46 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608]
Command: lw_from_imm_addr 4
Step-by-step: tick: 680 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x46 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 132]
Command: load_T_a_pop
Step-by-step: tick: 681 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608]
Command: sw_to_a_addr
Step-by-step: tick: 682 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 683 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73]
Command: push_imm 1
Step-by-step: tick: 684 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 1]
Command: +
Step-by-step: tick: 685 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74]
Command: sw_to_imm_addr 8
Step-by-step: tick: 686 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 687 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 688 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608]
Command: +
Step-by-step: tick: 689 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608]
Command: sw_to_imm_addr 12
Step-by-step: tick: 690 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 691 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 692 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 693 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 694 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608]
Command: over
Step-by-step: tick: 695 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1056964608, 0]
Command: -
Step-by-step: tick: 696 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1056964608]
Command: if 2
Step-by-step: tick: 697 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 698 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 699 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 700 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 701 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 702 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 703 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 74]
Command: -
Step-by-step: tick: 704 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 71]
Command: load_T_a_pop
Step-by-step: tick: 705 || microcode - cpu: pop_stack, load_T_a || A: 0x47 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 706 || microcode - alu: open_a, add | mem: read || A: 0x47 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4154733]
Command: push_imm -16777216
Step-by-step: tick: 707 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4154733, -16777216]
Command: and
Step-by-step: tick: 708 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x47 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 709 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 710 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 12
Step-by-step: tick: 711 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x47 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 712 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 713 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 714 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x47 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 715 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 1
Step-by-step: tick: 716 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x47 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 7
Step-by-step: tick: 717 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x47 || B: 0x7 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 718 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 719 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x47 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 720 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x47 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 12
Step-by-step: tick: 721 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x47 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 722 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x47 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 723 || microcode - cpu: over || A: 0x47 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 724 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 725 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x47 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 726 || microcode - cpu: over || A: 0x47 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 727 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x47 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 728 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x47 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 729 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 31
Step-by-step: tick: 730 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x47 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 731 || microcode - cpu: pop_stack || A: 0x47 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 732 || microcode - cpu: pop_stack || A: 0x47 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: ret
Step-by-step: tick: 733 || microcode - cpu: restore_pc || A: 0x47 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 24
Step-by-step: tick: 734 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24]
Command: call -40
Step-by-step: tick: 735 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x47 || B: -0x28 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24]
Command: sw_to_imm_addr 16
Step-by-step: tick: 736 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x47 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 737 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: sw_to_imm_addr 20
Step-by-step: tick: 738 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x47 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 739 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 740 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 741 || microcode - cpu: over || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 742 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 743 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x47 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: over
Step-by-step: tick: 744 || microcode - cpu: over || A: 0x47 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
Command: -
Step-by-step: tick: 745 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x47 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
Command: if 2
Step-by-step: tick: 746 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x47 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 747 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x47 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 748 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x47 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 18
Step-by-step: tick: 749 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x47 || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 750 || microcode - cpu: over || A: 0x47 || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 0
Step-by-step: tick: 751 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x47 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
Command: load_T_a_pop
Step-by-step: tick: 752 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 753 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82]
Command: dup
Step-by-step: tick: 754 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x52 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 82]
Command: sw_to_imm_addr 20
Step-by-step: tick: 755 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82]
Command: lw_from_imm_addr 16
Step-by-step: tick: 756 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 24]
Command: load_T_a_pop
Step-by-step: tick: 757 || microcode - cpu: pop_stack, load_T_a || A: 0x18 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82]
Command: sw_to_a_addr
Step-by-step: tick: 758 || microcode - alu: open_a, add | mem: write || A: 0x18 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 16
Step-by-step: tick: 759 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x18 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24]
Command: push_imm 1
Step-by-step: tick: 760 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x18 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 1]
Command: +
Step-by-step: tick: 761 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x18 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25]
Command: sw_to_imm_addr 16
Step-by-step: tick: 762 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x18 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 763 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x18 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 764 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x18 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82]
Command: +
Step-by-step: tick: 765 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x18 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82]
Command: sw_to_imm_addr 20
Step-by-step: tick: 766 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x18 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -28
Step-by-step: tick: 767 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x18 || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 768 || microcode - cpu: over || A: 0x18 || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 769 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x18 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 770 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x18 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82]
Command: over
Step-by-step: tick: 771 || microcode - cpu: over || A: 0x18 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0]
Command: -
Step-by-step: tick: 772 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x18 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82]
Command: if 2
Step-by-step: tick: 773 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x18 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 774 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x18 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 775 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x18 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 18
Step-by-step: tick: 776 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x18 || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 777 || microcode - cpu: over || A: 0x18 || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 0
Step-by-step: tick: 778 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x18 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
Command: load_T_a_pop
Step-by-step: tick: 779 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 780 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
Command: dup
Step-by-step: tick: 781 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 111]
Command: sw_to_imm_addr 20
Step-by-step: tick: 782 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
Command: lw_from_imm_addr 16
Step-by-step: tick: 783 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 25]
Command: load_T_a_pop
Step-by-step: tick: 784 || microcode - cpu: pop_stack, load_T_a || A: 0x19 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
Command: sw_to_a_addr
Step-by-step: tick: 785 || microcode - alu: open_a, add | mem: write || A: 0x19 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 16
Step-by-step: tick: 786 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x19 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25]
Command: push_imm 1
Step-by-step: tick: 787 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x19 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 1]
Command: +
Step-by-step: tick: 788 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x19 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26]
Command: sw_to_imm_addr 16
Step-by-step: tick: 789 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x19 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 790 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x19 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 791 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x19 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
Command: +
Step-by-step: tick: 792 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x19 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
Command: sw_to_imm_addr 20
Step-by-step: tick: 793 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x19 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -28
Step-by-step: tick: 794 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x19 || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 795 || microcode - cpu: over || A: 0x19 || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 796 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x19 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 797 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x19 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111]
Command: over
Step-by-step: tick: 798 || microcode - cpu: over || A: 0x19 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0]
Command: -
Step-by-step: tick: 799 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x19 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -111]
Command: if 2
Step-by-step: tick: 800 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x19 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 801 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x19 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 802 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x19 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 18
Step-by-step: tick: 803 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x19 || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 804 || microcode - cpu: over || A: 0x19 || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 0
Step-by-step: tick: 805 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x19 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
Command: load_T_a_pop
Step-by-step: tick: 806 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 807 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109]
Command: dup
Step-by-step: tick: 808 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6d 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 109]
Command: sw_to_imm_addr 20
Step-by-step: tick: 809 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109]
Command: lw_from_imm_addr 16
Step-by-step: tick: 810 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 26]
Command: load_T_a_pop
Step-by-step: tick: 811 || microcode - cpu: pop_stack, load_T_a || A: 0x1a || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109]
Command: sw_to_a_addr
Step-by-step: tick: 812 || microcode - alu: open_a, add | mem: write || A: 0x1a || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 16
Step-by-step: tick: 813 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1a || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26]
Command: push_imm 1
Step-by-step: tick: 814 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 1]
Command: +
Step-by-step: tick: 815 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27]
Command: sw_to_imm_addr 16
Step-by-step: tick: 816 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1a || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 817 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 818 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1a || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109]
Command: +
Step-by-step: tick: 819 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1a || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109]
Command: sw_to_imm_addr 20
Step-by-step: tick: 820 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1a || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -28
Step-by-step: tick: 821 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1a || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 822 || microcode - cpu: over || A: 0x1a || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 823 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 824 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1a || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109]
Command: over
Step-by-step: tick: 825 || microcode - cpu: over || A: 0x1a || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0]
Command: -
Step-by-step: tick: 826 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1a || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109]
Command: if 2
Step-by-step: tick: 827 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1a || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 828 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 829 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 18
Step-by-step: tick: 830 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1a || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 831 || microcode - cpu: over || A: 0x1a || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 0
Step-by-step: tick: 832 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
Command: load_T_a_pop
Step-by-step: tick: 833 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 834 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97]
Command: dup
Step-by-step: tick: 835 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x61 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 97]
Command: sw_to_imm_addr 20
Step-by-step: tick: 836 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97]
Command: lw_from_imm_addr 16
Step-by-step: tick: 837 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 27]
Command: load_T_a_pop
Step-by-step: tick: 838 || microcode - cpu: pop_stack, load_T_a || A: 0x1b || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97]
Command: sw_to_a_addr
Step-by-step: tick: 839 || microcode - alu: open_a, add | mem: write || A: 0x1b || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 16
Step-by-step: tick: 840 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1b || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27]
Command: push_imm 1
Step-by-step: tick: 841 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1]
Command: +
Step-by-step: tick: 842 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28]
Command: sw_to_imm_addr 16
Step-by-step: tick: 843 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1b || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 844 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 845 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1b || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97]
Command: +
Step-by-step: tick: 846 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1b || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97]
Command: sw_to_imm_addr 20
Step-by-step: tick: 847 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1b || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -28
Step-by-step: tick: 848 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1b || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 849 || microcode - cpu: over || A: 0x1b || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 850 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 851 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1b || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97]
Command: over
Step-by-step: tick: 852 || microcode - cpu: over || A: 0x1b || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0]
Command: -
Step-by-step: tick: 853 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1b || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97]
Command: if 2
Step-by-step: tick: 854 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1b || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 855 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 856 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 18
Step-by-step: tick: 857 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1b || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 858 || microcode - cpu: over || A: 0x1b || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 0
Step-by-step: tick: 859 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
Command: load_T_a_pop
Step-by-step: tick: 860 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 861 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110]
Command: dup
Step-by-step: tick: 862 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x6e 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 110]
Command: sw_to_imm_addr 20
Step-by-step: tick: 863 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110]
Command: lw_from_imm_addr 16
Step-by-step: tick: 864 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 28]
Command: load_T_a_pop
Step-by-step: tick: 865 || microcode - cpu: pop_stack, load_T_a || A: 0x1c || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110]
Command: sw_to_a_addr
Step-by-step: tick: 866 || microcode - alu: open_a, add | mem: write || A: 0x1c || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 16
Step-by-step: tick: 867 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1c || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28]
Command: push_imm 1
Step-by-step: tick: 868 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 1]
Command: +
Step-by-step: tick: 869 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29]
Command: sw_to_imm_addr 16
Step-by-step: tick: 870 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1c || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 871 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 872 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110]
Command: +
Step-by-step: tick: 873 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110]
Command: sw_to_imm_addr 20
Step-by-step: tick: 874 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -28
Step-by-step: tick: 875 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1c || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 876 || microcode - cpu: over || A: 0x1c || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 877 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 878 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110]
Command: over
Step-by-step: tick: 879 || microcode - cpu: over || A: 0x1c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0]
Command: -
Step-by-step: tick: 880 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -110]
Command: if 2
Step-by-step: tick: 881 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 882 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 883 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 18
Step-by-step: tick: 884 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1c || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 885 || microcode - cpu: over || A: 0x1c || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 0
Step-by-step: tick: 886 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128]
Command: load_T_a_pop
Step-by-step: tick: 887 || microcode - cpu: pop_stack, load_T_a || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 888 || microcode - alu: open_a, add | mem: read || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 889 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x80 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 20
Step-by-step: tick: 890 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x80 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 16
Step-by-step: tick: 891 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x80 || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29]
Command: load_T_a_pop
Step-by-step: tick: 892 || microcode - cpu: pop_stack, load_T_a || A: 0x1d || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 893 || microcode - alu: open_a, add | mem: write || A: 0x1d || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 16
Step-by-step: tick: 894 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1d || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29]
Command: push_imm 1
Step-by-step: tick: 895 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 1]
Command: +
Step-by-step: tick: 896 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30]
Command: sw_to_imm_addr 16
Step-by-step: tick: 897 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1d || B: 0x10 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 898 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 899 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1d || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 900 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1d || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 20
Step-by-step: tick: 901 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1d || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -28
Step-by-step: tick: 902 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1d || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 903 || microcode - cpu: over || A: 0x1d || B: -0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 904 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 905 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1d || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 906 || microcode - cpu: over || A: 0x1d || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 907 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1d || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 908 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1d || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 909 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 18
Step-by-step: tick: 910 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1d || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 911 || microcode - cpu: pop_stack || A: 0x1d || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 912 || microcode - cpu: pop_stack || A: 0x1d || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: ret
Step-by-step: tick: 913 || microcode - cpu: restore_pc || A: 0x1d || B: 0x12 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 75
Step-by-step: tick: 914 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x4b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75]
Command: call -91
Step-by-step: tick: 915 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x1d || B: -0x5b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75]
Command: sw_to_imm_addr 8
Step-by-step: tick: 916 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1d || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 917 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: sw_to_imm_addr 12
Step-by-step: tick: 918 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1d || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 919 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 920 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 921 || microcode - cpu: over || A: 0x1d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 922 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 923 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1d || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: over
Step-by-step: tick: 924 || microcode - cpu: over || A: 0x1d || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
Command: -
Step-by-step: tick: 925 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1d || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
Command: if 2
Step-by-step: tick: 926 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1d || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 927 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 928 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 929 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1d || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 930 || microcode - cpu: over || A: 0x1d || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 931 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1d || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 932 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1d || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 75]
Command: -
Step-by-step: tick: 933 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1d || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
Command: load_T_a_pop
Step-by-step: tick: 934 || microcode - cpu: pop_stack, load_T_a || A: 0x48 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 935 || microcode - alu: open_a, add | mem: read || A: 0x48 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207975781]
Command: push_imm -16777216
Step-by-step: tick: 936 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207975781, -16777216]
Command: and
Step-by-step: tick: 937 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x48 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
Command: dup
Step-by-step: tick: 938 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x48 || B: 0x48000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552]
Command: dup
Step-by-step: tick: 939 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x48 || B: 0x48000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552, 1207959552]
Command: sw_to_imm_addr 12
Step-by-step: tick: 940 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x48 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552]
Command: push_imm 0
Step-by-step: tick: 941 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 1207959552, 0]
Command: -
Step-by-step: tick: 942 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, -1207959552]
Command: if 2
Step-by-step: tick: 943 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
Command: push_imm 0
Step-by-step: tick: 944 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 0]
Command: jmp 1
Step-by-step: tick: 945 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 0]
Command: if 1
Step-by-step: tick: 946 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
Command: lw_from_imm_addr 4
Step-by-step: tick: 947 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x48 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 132]
Command: load_T_a_pop
Step-by-step: tick: 948 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
Command: sw_to_a_addr
Step-by-step: tick: 949 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 950 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75]
Command: push_imm 1
Step-by-step: tick: 951 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 1]
Command: +
Step-by-step: tick: 952 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76]
Command: sw_to_imm_addr 8
Step-by-step: tick: 953 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 954 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 955 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
Command: +
Step-by-step: tick: 956 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
Command: sw_to_imm_addr 12
Step-by-step: tick: 957 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 958 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 959 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 960 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 961 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552]
Command: over
Step-by-step: tick: 962 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207959552, 0]
Command: -
Step-by-step: tick: 963 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1207959552]
Command: if 2
Step-by-step: tick: 964 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 965 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 966 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 967 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 968 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 969 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 970 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 76]
Command: -
Step-by-step: tick: 971 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73]
Command: load_T_a_pop
Step-by-step: tick: 972 || microcode - cpu: pop_stack, load_T_a || A: 0x49 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 973 || microcode - alu: open_a, add | mem: read || A: 0x49 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1699217471]
Command: push_imm -16777216
Step-by-step: tick: 974 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x49 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1699217471, -16777216]
Command: and
Step-by-step: tick: 975 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x49 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: dup
Step-by-step: tick: 976 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x49 || B: 0x65000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816]
Command: dup
Step-by-step: tick: 977 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x49 || B: 0x65000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816, 1694498816]
Command: sw_to_imm_addr 12
Step-by-step: tick: 978 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x49 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816]
Command: push_imm 0
Step-by-step: tick: 979 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x49 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 1694498816, 0]
Command: -
Step-by-step: tick: 980 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x49 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, -1694498816]
Command: if 2
Step-by-step: tick: 981 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x49 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: push_imm 0
Step-by-step: tick: 982 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x49 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
Command: jmp 1
Step-by-step: tick: 983 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x49 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
Command: if 1
Step-by-step: tick: 984 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x49 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: lw_from_imm_addr 4
Step-by-step: tick: 985 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x49 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 132]
Command: load_T_a_pop
Step-by-step: tick: 986 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: sw_to_a_addr
Step-by-step: tick: 987 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 988 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76]
Command: push_imm 1
Step-by-step: tick: 989 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 1]
Command: +
Step-by-step: tick: 990 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77]
Command: sw_to_imm_addr 8
Step-by-step: tick: 991 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 992 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 993 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: +
Step-by-step: tick: 994 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: sw_to_imm_addr 12
Step-by-step: tick: 995 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 996 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 997 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 998 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 999 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816]
Command: over
Step-by-step: tick: 1000 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1694498816, 0]
Command: -
Step-by-step: tick: 1001 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1694498816]
Command: if 2
Step-by-step: tick: 1002 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1003 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1004 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1005 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1006 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1007 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1008 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 77]
Command: -
Step-by-step: tick: 1009 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74]
Command: load_T_a_pop
Step-by-step: tick: 1010 || microcode - cpu: pop_stack, load_T_a || A: 0x4a || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1011 || microcode - alu: open_a, add | mem: read || A: 0x4a || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818576896]
Command: push_imm -16777216
Step-by-step: tick: 1012 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4a || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1818576896, -16777216]
Command: and
Step-by-step: tick: 1013 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x4a || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: dup
Step-by-step: tick: 1014 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4a || B: 0x6c000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
Command: dup
Step-by-step: tick: 1015 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4a || B: 0x6c000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 1811939328]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1016 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
Command: push_imm 0
Step-by-step: tick: 1017 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 0]
Command: -
Step-by-step: tick: 1018 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, -1811939328]
Command: if 2
Step-by-step: tick: 1019 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4a || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: push_imm 0
Step-by-step: tick: 1020 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
Command: jmp 1
Step-by-step: tick: 1021 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
Command: if 1
Step-by-step: tick: 1022 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1023 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4a || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 132]
Command: load_T_a_pop
Step-by-step: tick: 1024 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: sw_to_a_addr
Step-by-step: tick: 1025 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1026 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77]
Command: push_imm 1
Step-by-step: tick: 1027 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 1]
Command: +
Step-by-step: tick: 1028 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1029 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1030 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1031 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: +
Step-by-step: tick: 1032 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1033 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1034 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1035 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1036 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1037 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: over
Step-by-step: tick: 1038 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
Command: -
Step-by-step: tick: 1039 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1811939328]
Command: if 2
Step-by-step: tick: 1040 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1041 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1042 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1043 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1044 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1045 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1046 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 78]
Command: -
Step-by-step: tick: 1047 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75]
Command: load_T_a_pop
Step-by-step: tick: 1048 || microcode - cpu: pop_stack, load_T_a || A: 0x4b || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1049 || microcode - alu: open_a, add | mem: read || A: 0x4b || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819043144]
Command: push_imm -16777216
Step-by-step: tick: 1050 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4b || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1819043144, -16777216]
Command: and
Step-by-step: tick: 1051 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x4b || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: dup
Step-by-step: tick: 1052 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4b || B: 0x6c000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
Command: dup
Step-by-step: tick: 1053 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4b || B: 0x6c000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 1811939328]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1054 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4b || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328]
Command: push_imm 0
Step-by-step: tick: 1055 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 1811939328, 0]
Command: -
Step-by-step: tick: 1056 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, -1811939328]
Command: if 2
Step-by-step: tick: 1057 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4b || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: push_imm 0
Step-by-step: tick: 1058 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4b || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
Command: jmp 1
Step-by-step: tick: 1059 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
Command: if 1
Step-by-step: tick: 1060 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4b || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1061 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4b || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 132]
Command: load_T_a_pop
Step-by-step: tick: 1062 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: sw_to_a_addr
Step-by-step: tick: 1063 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1064 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78]
Command: push_imm 1
Step-by-step: tick: 1065 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 1]
Command: +
Step-by-step: tick: 1066 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1067 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1068 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1069 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: +
Step-by-step: tick: 1070 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1071 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1072 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1073 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1074 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1075 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328]
Command: over
Step-by-step: tick: 1076 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1811939328, 0]
Command: -
Step-by-step: tick: 1077 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1811939328]
Command: if 2
Step-by-step: tick: 1078 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1079 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1080 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1081 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1082 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1083 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1084 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 79]
Command: -
Step-by-step: tick: 1085 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76]
Command: load_T_a_pop
Step-by-step: tick: 1086 || microcode - cpu: pop_stack, load_T_a || A: 0x4c || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1087 || microcode - alu: open_a, add | mem: read || A: 0x4c || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1869376613]
Command: push_imm -16777216
Step-by-step: tick: 1088 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4c || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1869376613, -16777216]
Command: and
Step-by-step: tick: 1089 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x4c || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: dup
Step-by-step: tick: 1090 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4c || B: 0x6f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
Command: dup
Step-by-step: tick: 1091 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4c || B: 0x6f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 1862270976]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1092 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4c || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
Command: push_imm 0
Step-by-step: tick: 1093 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 0]
Command: -
Step-by-step: tick: 1094 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, -1862270976]
Command: if 2
Step-by-step: tick: 1095 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: push_imm 0
Step-by-step: tick: 1096 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: jmp 1
Step-by-step: tick: 1097 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: if 1
Step-by-step: tick: 1098 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1099 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4c || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 132]
Command: load_T_a_pop
Step-by-step: tick: 1100 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: sw_to_a_addr
Step-by-step: tick: 1101 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1102 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79]
Command: push_imm 1
Step-by-step: tick: 1103 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 1]
Command: +
Step-by-step: tick: 1104 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1105 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1106 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1107 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: +
Step-by-step: tick: 1108 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1109 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1110 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1111 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1112 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1113 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: over
Step-by-step: tick: 1114 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: -
Step-by-step: tick: 1115 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1862270976]
Command: if 2
Step-by-step: tick: 1116 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1117 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1118 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1119 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1120 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1121 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1122 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 80]
Command: -
Step-by-step: tick: 1123 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77]
Command: load_T_a_pop
Step-by-step: tick: 1124 || microcode - cpu: pop_stack, load_T_a || A: 0x4d || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1125 || microcode - alu: open_a, add | mem: read || A: 0x4d || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 745499756]
Command: push_imm -16777216
Step-by-step: tick: 1126 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4d || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 745499756, -16777216]
Command: and
Step-by-step: tick: 1127 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x4d || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504]
Command: dup
Step-by-step: tick: 1128 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4d || B: 0x2c000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 738197504]
Command: dup
Step-by-step: tick: 1129 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4d || B: 0x2c000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 738197504, 738197504]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1130 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4d || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 738197504]
Command: push_imm 0
Step-by-step: tick: 1131 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 738197504, 0]
Command: -
Step-by-step: tick: 1132 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, -738197504]
Command: if 2
Step-by-step: tick: 1133 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4d || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504]
Command: push_imm 0
Step-by-step: tick: 1134 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4d || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 0]
Command: jmp 1
Step-by-step: tick: 1135 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 0]
Command: if 1
Step-by-step: tick: 1136 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4d || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1137 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4d || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 132]
Command: load_T_a_pop
Step-by-step: tick: 1138 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504]
Command: sw_to_a_addr
Step-by-step: tick: 1139 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1140 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80]
Command: push_imm 1
Step-by-step: tick: 1141 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 1]
Command: +
Step-by-step: tick: 1142 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1143 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1144 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1145 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504]
Command: +
Step-by-step: tick: 1146 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1147 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1148 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1149 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1150 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1151 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504]
Command: over
Step-by-step: tick: 1152 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 738197504, 0]
Command: -
Step-by-step: tick: 1153 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -738197504]
Command: if 2
Step-by-step: tick: 1154 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1155 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1156 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1157 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1158 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1159 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1160 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 81]
Command: -
Step-by-step: tick: 1161 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78]
Command: load_T_a_pop
Step-by-step: tick: 1162 || microcode - cpu: pop_stack, load_T_a || A: 0x4e || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1163 || microcode - alu: open_a, add | mem: read || A: 0x4e || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 539783020]
Command: push_imm -16777216
Step-by-step: tick: 1164 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4e || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 539783020, -16777216]
Command: and
Step-by-step: tick: 1165 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x4e || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: dup
Step-by-step: tick: 1166 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4e || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: dup
Step-by-step: tick: 1167 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4e || B: 0x20000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1168 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4e || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912]
Command: push_imm 0
Step-by-step: tick: 1169 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4e || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 536870912, 0]
Command: -
Step-by-step: tick: 1170 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4e || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, -536870912]
Command: if 2
Step-by-step: tick: 1171 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4e || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: push_imm 0
Step-by-step: tick: 1172 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4e || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: jmp 1
Step-by-step: tick: 1173 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4e || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: if 1
Step-by-step: tick: 1174 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4e || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1175 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4e || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 132]
Command: load_T_a_pop
Step-by-step: tick: 1176 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_a_addr
Step-by-step: tick: 1177 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1178 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81]
Command: push_imm 1
Step-by-step: tick: 1179 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 1]
Command: +
Step-by-step: tick: 1180 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1181 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1182 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1183 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: +
Step-by-step: tick: 1184 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1185 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1186 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1187 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1188 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1189 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912]
Command: over
Step-by-step: tick: 1190 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 536870912, 0]
Command: -
Step-by-step: tick: 1191 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -536870912]
Command: if 2
Step-by-step: tick: 1192 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1193 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1194 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1195 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1196 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1197 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1198 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 82]
Command: -
Step-by-step: tick: 1199 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79]
Command: load_T_a_pop
Step-by-step: tick: 1200 || microcode - cpu: pop_stack, load_T_a || A: 0x4f || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1201 || microcode - alu: open_a, add | mem: read || A: 0x4f || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2108527]
Command: push_imm -16777216
Step-by-step: tick: 1202 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2108527, -16777216]
Command: and
Step-by-step: tick: 1203 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x4f || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1204 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1205 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1206 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 1207 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 1208 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 1209 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4f || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1210 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 1
Step-by-step: tick: 1211 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4f || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 7
Step-by-step: tick: 1212 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4f || B: 0x7 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1213 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1214 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 1215 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1216 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1217 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4f || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1218 || microcode - cpu: over || A: 0x4f || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1219 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1220 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1221 || microcode - cpu: over || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 1222 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 1223 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4f || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 1224 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 31
Step-by-step: tick: 1225 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4f || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 1226 || microcode - cpu: pop_stack || A: 0x4f || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 1227 || microcode - cpu: pop_stack || A: 0x4f || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: ret
Step-by-step: tick: 1228 || microcode - cpu: restore_pc || A: 0x4f || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 24
Step-by-step: tick: 1229 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24]
Command: call -93
Step-by-step: tick: 1230 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x4f || B: -0x5d 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1231 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4f || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1232 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1233 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 1234 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 1235 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1236 || microcode - cpu: over || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1237 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4f || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1238 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: over
Step-by-step: tick: 1239 || microcode - cpu: over || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
Command: -
Step-by-step: tick: 1240 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4f || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
Command: if 2
Step-by-step: tick: 1241 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4f || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1242 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1243 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4f || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1244 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4f || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1245 || microcode - cpu: over || A: 0x4f || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1246 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4f || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1247 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4f || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 24]
Command: -
Step-by-step: tick: 1248 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4f || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21]
Command: load_T_a_pop
Step-by-step: tick: 1249 || microcode - cpu: pop_stack, load_T_a || A: 0x15 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1250 || microcode - alu: open_a, add | mem: read || A: 0x15 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: push_imm -16777216
Step-by-step: tick: 1251 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x15 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, -16777216]
Command: and
Step-by-step: tick: 1252 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x15 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: dup
Step-by-step: tick: 1253 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x15 || B: 0x52000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 1375731712]
Command: dup
Step-by-step: tick: 1254 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x15 || B: 0x52000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 1375731712, 1375731712]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1255 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x15 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 1375731712]
Command: push_imm 0
Step-by-step: tick: 1256 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x15 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 1375731712, 0]
Command: -
Step-by-step: tick: 1257 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x15 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, -1375731712]
Command: if 2
Step-by-step: tick: 1258 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x15 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: push_imm 0
Step-by-step: tick: 1259 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x15 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 0]
Command: jmp 1
Step-by-step: tick: 1260 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x15 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 0]
Command: if 1
Step-by-step: tick: 1261 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x15 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1262 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x15 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 132]
Command: load_T_a_pop
Step-by-step: tick: 1263 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: sw_to_a_addr
Step-by-step: tick: 1264 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1265 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24]
Command: push_imm 1
Step-by-step: tick: 1266 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 1]
Command: +
Step-by-step: tick: 1267 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1268 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1269 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1270 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: +
Step-by-step: tick: 1271 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1272 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1273 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1274 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1275 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1276 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712]
Command: over
Step-by-step: tick: 1277 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1375731712, 0]
Command: -
Step-by-step: tick: 1278 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1375731712]
Command: if 2
Step-by-step: tick: 1279 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1280 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1281 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1282 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1283 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1284 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1285 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 25]
Command: -
Step-by-step: tick: 1286 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22]
Command: load_T_a_pop
Step-by-step: tick: 1287 || microcode - cpu: pop_stack, load_T_a || A: 0x16 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1288 || microcode - alu: open_a, add | mem: read || A: 0x16 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1867644928]
Command: push_imm -16777216
Step-by-step: tick: 1289 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x16 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1867644928, -16777216]
Command: and
Step-by-step: tick: 1290 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x16 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: dup
Step-by-step: tick: 1291 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x16 || B: 0x6f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
Command: dup
Step-by-step: tick: 1292 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x16 || B: 0x6f000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 1862270976]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1293 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x16 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976]
Command: push_imm 0
Step-by-step: tick: 1294 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x16 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 1862270976, 0]
Command: -
Step-by-step: tick: 1295 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x16 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, -1862270976]
Command: if 2
Step-by-step: tick: 1296 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x16 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: push_imm 0
Step-by-step: tick: 1297 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x16 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: jmp 1
Step-by-step: tick: 1298 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x16 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: if 1
Step-by-step: tick: 1299 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x16 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1300 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x16 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 132]
Command: load_T_a_pop
Step-by-step: tick: 1301 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: sw_to_a_addr
Step-by-step: tick: 1302 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1303 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25]
Command: push_imm 1
Step-by-step: tick: 1304 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 1]
Command: +
Step-by-step: tick: 1305 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1306 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1307 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1308 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: +
Step-by-step: tick: 1309 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1310 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1311 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1312 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1313 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1314 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976]
Command: over
Step-by-step: tick: 1315 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1862270976, 0]
Command: -
Step-by-step: tick: 1316 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1862270976]
Command: if 2
Step-by-step: tick: 1317 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1318 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1319 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1320 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1321 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1322 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1323 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 26]
Command: -
Step-by-step: tick: 1324 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23]
Command: load_T_a_pop
Step-by-step: tick: 1325 || microcode - cpu: pop_stack, load_T_a || A: 0x17 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1326 || microcode - alu: open_a, add | mem: read || A: 0x17 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1836012032]
Command: push_imm -16777216
Step-by-step: tick: 1327 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x17 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1836012032, -16777216]
Command: and
Step-by-step: tick: 1328 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x17 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: dup
Step-by-step: tick: 1329 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x17 || B: 0x6d000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544]
Command: dup
Step-by-step: tick: 1330 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x17 || B: 0x6d000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544, 1828716544]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1331 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x17 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544]
Command: push_imm 0
Step-by-step: tick: 1332 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x17 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 1828716544, 0]
Command: -
Step-by-step: tick: 1333 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x17 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, -1828716544]
Command: if 2
Step-by-step: tick: 1334 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x17 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: push_imm 0
Step-by-step: tick: 1335 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x17 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 0]
Command: jmp 1
Step-by-step: tick: 1336 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x17 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 0]
Command: if 1
Step-by-step: tick: 1337 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x17 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1338 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x17 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 132]
Command: load_T_a_pop
Step-by-step: tick: 1339 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: sw_to_a_addr
Step-by-step: tick: 1340 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1341 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26]
Command: push_imm 1
Step-by-step: tick: 1342 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 1]
Command: +
Step-by-step: tick: 1343 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1344 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1345 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1346 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: +
Step-by-step: tick: 1347 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1348 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1349 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1350 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1351 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1352 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544]
Command: over
Step-by-step: tick: 1353 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1828716544, 0]
Command: -
Step-by-step: tick: 1354 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1828716544]
Command: if 2
Step-by-step: tick: 1355 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1356 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1357 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1358 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1359 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1360 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1361 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 27]
Command: -
Step-by-step: tick: 1362 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24]
Command: load_T_a_pop
Step-by-step: tick: 1363 || microcode - cpu: pop_stack, load_T_a || A: 0x18 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1364 || microcode - alu: open_a, add | mem: read || A: 0x18 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1634561874]
Command: push_imm -16777216
Step-by-step: tick: 1365 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x18 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1634561874, -16777216]
Command: and
Step-by-step: tick: 1366 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x18 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: dup
Step-by-step: tick: 1367 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x18 || B: 0x61000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952]
Command: dup
Step-by-step: tick: 1368 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x18 || B: 0x61000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952, 1627389952]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1369 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x18 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952]
Command: push_imm 0
Step-by-step: tick: 1370 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x18 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 1627389952, 0]
Command: -
Step-by-step: tick: 1371 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x18 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, -1627389952]
Command: if 2
Step-by-step: tick: 1372 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x18 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: push_imm 0
Step-by-step: tick: 1373 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x18 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: jmp 1
Step-by-step: tick: 1374 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x18 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: if 1
Step-by-step: tick: 1375 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x18 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1376 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x18 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 132]
Command: load_T_a_pop
Step-by-step: tick: 1377 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: sw_to_a_addr
Step-by-step: tick: 1378 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1379 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27]
Command: push_imm 1
Step-by-step: tick: 1380 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 1]
Command: +
Step-by-step: tick: 1381 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1382 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1383 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1384 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: +
Step-by-step: tick: 1385 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1386 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1387 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1388 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1389 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1390 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952]
Command: over
Step-by-step: tick: 1391 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1627389952, 0]
Command: -
Step-by-step: tick: 1392 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1627389952]
Command: if 2
Step-by-step: tick: 1393 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1394 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1395 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1396 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1397 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1398 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1399 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 28]
Command: -
Step-by-step: tick: 1400 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25]
Command: load_T_a_pop
Step-by-step: tick: 1401 || microcode - cpu: pop_stack, load_T_a || A: 0x19 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1402 || microcode - alu: open_a, add | mem: read || A: 0x19 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1851878767]
Command: push_imm -16777216
Step-by-step: tick: 1403 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x19 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1851878767, -16777216]
Command: and
Step-by-step: tick: 1404 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x19 || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: dup
Step-by-step: tick: 1405 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x19 || B: 0x6e000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760]
Command: dup
Step-by-step: tick: 1406 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x19 || B: 0x6e000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760, 1845493760]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1407 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x19 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760]
Command: push_imm 0
Step-by-step: tick: 1408 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x19 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 1845493760, 0]
Command: -
Step-by-step: tick: 1409 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x19 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, -1845493760]
Command: if 2
Step-by-step: tick: 1410 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x19 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: push_imm 0
Step-by-step: tick: 1411 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x19 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 0]
Command: jmp 1
Step-by-step: tick: 1412 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x19 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 0]
Command: if 1
Step-by-step: tick: 1413 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x19 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: lw_from_imm_addr 4
Step-by-step: tick: 1414 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x19 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 132]
Command: load_T_a_pop
Step-by-step: tick: 1415 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: sw_to_a_addr
Step-by-step: tick: 1416 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1417 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28]
Command: push_imm 1
Step-by-step: tick: 1418 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 1]
Command: +
Step-by-step: tick: 1419 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29]
Command: sw_to_imm_addr 8
Step-by-step: tick: 1420 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1421 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1422 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: +
Step-by-step: tick: 1423 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1424 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1425 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1426 || microcode - cpu: over || A: 0x84 || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1427 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1428 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760]
Command: over
Step-by-step: tick: 1429 || microcode - cpu: over || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1845493760, 0]
Command: -
Step-by-step: tick: 1430 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1845493760]
Command: if 2
Step-by-step: tick: 1431 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1432 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: jmp 1
Step-by-step: tick: 1433 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 31
Step-by-step: tick: 1434 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1435 || microcode - cpu: over || A: 0x84 || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 3
Step-by-step: tick: 1436 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x3 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3]
Command: lw_from_imm_addr 8
Step-by-step: tick: 1437 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 29]
Command: -
Step-by-step: tick: 1438 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26]
Command: load_T_a_pop
Step-by-step: tick: 1439 || microcode - cpu: pop_stack, load_T_a || A: 0x1a || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 1440 || microcode - alu: open_a, add | mem: read || A: 0x1a || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7233901]
Command: push_imm -16777216
Step-by-step: tick: 1441 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1a || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7233901, -16777216]
Command: and
Step-by-step: tick: 1442 || microcode - alu: open_l, open_r, and | cpu: push_stack || A: 0x1a || B: -0x1000000 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1443 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1444 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1445 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 1446 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 1447 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 1448 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1a || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 1449 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
Command: if 1
Step-by-step: tick: 1450 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1a || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 7
Step-by-step: tick: 1451 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1a || B: 0x7 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1452 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1453 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 1454 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 12
Step-by-step: tick: 1455 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x1a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -41
Step-by-step: tick: 1456 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x1a || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1457 || microcode - cpu: over || A: 0x1a || B: -0x29 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 1458 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 12
Step-by-step: tick: 1459 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 1460 || microcode - cpu: over || A: 0x1a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 1461 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x1a || B: 0xc 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 1462 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1a || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 1463 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1a || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 31
Step-by-step: tick: 1464 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x1a || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 1465 || microcode - cpu: pop_stack || A: 0x1a || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 1466 || microcode - cpu: pop_stack || A: 0x1a || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: ret
Step-by-step: tick: 1467 || microcode - cpu: restore_pc || A: 0x1a || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: halt
Step-by-step: tick: 1468 || microcode - cpu: kill_cpu || A: 0x1a || B: 0x1f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
-----------
Result: numio[0x80]: 
numio[0x84]: 87, 104, 97, 116, 32, 105, 115, 32, 121, 111, 117, 114, 32, 110, 97, 109, 101, 63, 72, 101, 108, 108, 111, 44, 32, 82, 111, 109, 97, 110
tick_count = 1468
[What is your name?Hello, Roman](io:out:str)=[What is your name?Hello, Roman] => RESULT=Passe
-----------
