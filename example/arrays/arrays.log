-----------
binary: 0x000 - 0x1008000000 - sw_to_imm_addr 0x00000008
0x005 - 0x0100000000 - push_imm 0x00000000
0x00a - 0x100c000000 - sw_to_imm_addr 0x0000000C
0x00f - 0x0101000000 - push_imm 0x00000001
0x014 - 0x1010000000 - sw_to_imm_addr 0x00000010
0x019 - 0x0100000000 - push_imm 0x00000000
0x01e - 0x0100000000 - push_imm 0x00000000
0x023 - 0x30 - over
0x024 - 0x08 - dup
0x025 - 0x0210000000 - lw_from_imm_addr 0x00000010
0x02a - 0x30 - over
0x02b - 0x21 - -
0x02c - 0x4302000000 - if 0x00000002
0x031 - 0x0101000000 - push_imm 0x00000001
0x036 - 0x4001000000 - jmp 0x00000001
0x03b - 0x0100000000 - push_imm 0x00000000
0x040 - 0x4316000000 - if 0x00000016
0x045 - 0x30 - over
0x046 - 0x0200000000 - lw_from_imm_addr 0x00000000
0x04b - 0x06 - load_T_a_pop
0x04c - 0x03 - lw_from_a_addr
0x04d - 0x08 - dup
0x04e - 0x1010000000 - sw_to_imm_addr 0x00000010
0x053 - 0x0208000000 - lw_from_imm_addr 0x00000008
0x058 - 0x06 - load_T_a_pop
0x059 - 0x11 - sw_to_a_addr
0x05a - 0x0208000000 - lw_from_imm_addr 0x00000008
0x05f - 0x0104000000 - push_imm 0x00000004
0x064 - 0x20 - +
0x065 - 0x1008000000 - sw_to_imm_addr 0x00000008
0x06a - 0x0101000000 - push_imm 0x00000001
0x06f - 0x020c000000 - lw_from_imm_addr 0x0000000C
0x074 - 0x20 - +
0x075 - 0x100c000000 - sw_to_imm_addr 0x0000000C
0x07a - 0x08 - dup
0x07b - 0x0210000000 - lw_from_imm_addr 0x00000010
0x080 - 0x20 - +
0x081 - 0x1010000000 - sw_to_imm_addr 0x00000010
0x086 - 0x40e0ffffff - jmp 0xFFFFFFE0
0x08b - 0x16 - pop
0x08c - 0x16 - pop
0x08d - 0x0101000000 - push_imm 0x00000001
0x092 - 0x020c000000 - lw_from_imm_addr 0x0000000C
0x097 - 0x21 - -
0x098 - 0x42 - ret
0x099 - 0x1014000000 - sw_to_imm_addr 0x00000014
0x09e - 0x0101000000 - push_imm 0x00000001
0x0a3 - 0x1018000000 - sw_to_imm_addr 0x00000018
0x0a8 - 0x0100000000 - push_imm 0x00000000
0x0ad - 0x0100000000 - push_imm 0x00000000
0x0b2 - 0x30 - over
0x0b3 - 0x08 - dup
0x0b4 - 0x0218000000 - lw_from_imm_addr 0x00000018
0x0b9 - 0x30 - over
0x0ba - 0x21 - -
0x0bb - 0x4302000000 - if 0x00000002
0x0c0 - 0x0101000000 - push_imm 0x00000001
0x0c5 - 0x4001000000 - jmp 0x00000001
0x0ca - 0x0100000000 - push_imm 0x00000000
0x0cf - 0x431b000000 - if 0x0000001B
0x0d4 - 0x30 - over
0x0d5 - 0x0214000000 - lw_from_imm_addr 0x00000014
0x0da - 0x06 - load_T_a_pop
0x0db - 0x03 - lw_from_a_addr
0x0dc - 0x08 - dup
0x0dd - 0x08 - dup
0x0de - 0x1018000000 - sw_to_imm_addr 0x00000018
0x0e3 - 0x0100000000 - push_imm 0x00000000
0x0e8 - 0x21 - -
0x0e9 - 0x4302000000 - if 0x00000002
0x0ee - 0x0100000000 - push_imm 0x00000000
0x0f3 - 0x4001000000 - jmp 0x00000001
0x0f8 - 0x0101000000 - push_imm 0x00000001
0x0fd - 0x4301000000 - if 0x00000001
0x102 - 0x4007000000 - jmp 0x00000007
0x107 - 0x0204000000 - lw_from_imm_addr 0x00000004
0x10c - 0x06 - load_T_a_pop
0x10d - 0x11 - sw_to_a_addr
0x10e - 0x0214000000 - lw_from_imm_addr 0x00000014
0x113 - 0x0104000000 - push_imm 0x00000004
0x118 - 0x20 - +
0x119 - 0x1014000000 - sw_to_imm_addr 0x00000014
0x11e - 0x08 - dup
0x11f - 0x0218000000 - lw_from_imm_addr 0x00000018
0x124 - 0x20 - +
0x125 - 0x1018000000 - sw_to_imm_addr 0x00000018
0x12a - 0x40dbffffff - jmp 0xFFFFFFDB
0x12f - 0x16 - pop
0x130 - 0x16 - pop
0x131 - 0x42 - ret
0x132 - 0x0204000000 - lw_from_imm_addr 0x00000004
0x137 - 0x06 - load_T_a_pop
0x138 - 0x11 - sw_to_a_addr
0x139 - 0x42 - ret
0x13a - 0x0200000000 - lw_from_imm_addr 0x00000000
0x13f - 0x06 - load_T_a_pop
0x140 - 0x03 - lw_from_a_addr
0x141 - 0x42 - ret
0x142 - 0x0100000000 - push_imm 0x00000000
0x147 - 0x1058000000 - sw_to_imm_addr 0x00000058
0x14c - 0x0250000000 - lw_from_imm_addr 0x00000050
0x151 - 0x0101000000 - push_imm 0x00000001
0x156 - 0x30 - over
0x157 - 0x08 - dup
0x158 - 0x0258000000 - lw_from_imm_addr 0x00000058
0x15d - 0x30 - over
0x15e - 0x21 - -
0x15f - 0x01ffffffff - push_imm 0xFFFFFFFF
0x164 - 0x20 - +
0x165 - 0x4402000000 - -if 0x00000002
0x16a - 0x0100000000 - push_imm 0x00000000
0x16f - 0x4001000000 - jmp 0x00000001
0x174 - 0x0101000000 - push_imm 0x00000001
0x179 - 0x4323000000 - if 0x00000023
0x17e - 0x30 - over
0x17f - 0x0258000000 - lw_from_imm_addr 0x00000058
0x184 - 0x0254000000 - lw_from_imm_addr 0x00000054
0x189 - 0x21 - -
0x18a - 0x4402000000 - -if 0x00000002
0x18f - 0x0100000000 - push_imm 0x00000000
0x194 - 0x4001000000 - jmp 0x00000001
0x199 - 0x0101000000 - push_imm 0x00000001
0x19e - 0x4315000000 - if 0x00000015
0x1a3 - 0x0258000000 - lw_from_imm_addr 0x00000058
0x1a8 - 0x0104000000 - push_imm 0x00000004
0x1ad - 0x22 - *
0x1ae - 0x105c000000 - sw_to_imm_addr 0x0000005C
0x1b3 - 0x011c000000 - push_imm 0x0000001C
0x1b8 - 0x025c000000 - lw_from_imm_addr 0x0000005C
0x1bd - 0x20 - +
0x1be - 0x06 - load_T_a_pop
0x1bf - 0x03 - lw_from_a_addr
0x1c0 - 0x012c000000 - push_imm 0x0000002C
0x1c5 - 0x025c000000 - lw_from_imm_addr 0x0000005C
0x1ca - 0x20 - +
0x1cb - 0x06 - load_T_a_pop
0x1cc - 0x03 - lw_from_a_addr
0x1cd - 0x20 - +
0x1ce - 0x013c000000 - push_imm 0x0000003C
0x1d3 - 0x025c000000 - lw_from_imm_addr 0x0000005C
0x1d8 - 0x20 - +
0x1d9 - 0x06 - load_T_a_pop
0x1da - 0x11 - sw_to_a_addr
0x1db - 0x4000000000 - jmp 0x00000000
0x1e0 - 0x08 - dup
0x1e1 - 0x0258000000 - lw_from_imm_addr 0x00000058
0x1e6 - 0x20 - +
0x1e7 - 0x1058000000 - sw_to_imm_addr 0x00000058
0x1ec - 0x40d1ffffff - jmp 0xFFFFFFD1
0x1f1 - 0x16 - pop
0x1f2 - 0x16 - pop
0x1f3 - 0x013c000000 - push_imm 0x0000003C
0x1f8 - 0x4194ffffff - call 0xFFFFFF94
0x1fd - 0x45 - halt
-----------
Command: push_imm 0
Step-by-step: tick: 1 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 88
Step-by-step: tick: 2 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 80
Step-by-step: tick: 3 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x50 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 4 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 5 || microcode - cpu: over || A: 0x0 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 6 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x0 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 7 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 8 || microcode - cpu: over || A: 0x0 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 9 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm -1
Step-by-step: tick: 10 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, -1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 11 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x0 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 12 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 13 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 35
Step-by-step: tick: 14 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 15 || microcode - cpu: over || A: 0x0 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 16 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 84
Step-by-step: tick: 17 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 18 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x0 || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 19 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 20 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 21
Step-by-step: tick: 21 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x0 || B: 0x15 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 22 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 23 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: *
Step-by-step: tick: 24 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x0 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 92
Step-by-step: tick: 25 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x0 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 28
Step-by-step: tick: 26 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x0 || B: 0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 27 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x0 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 28 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x0 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 29 || microcode - cpu: pop_stack, load_T_a || A: 0x1c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 30 || microcode - alu: open_a, add | mem: read || A: 0x1c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 44
Step-by-step: tick: 31 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x1c || B: 0x2c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 44]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 32 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x1c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 44, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 33 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x1c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 44]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 34 || microcode - cpu: pop_stack, load_T_a || A: 0x2c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 35 || microcode - alu: open_a, add | mem: read || A: 0x2c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 36 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x2c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 60
Step-by-step: tick: 37 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x2c || B: 0x3c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 38 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x2c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 60, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 39 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x2c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 40 || microcode - cpu: pop_stack, load_T_a || A: 0x3c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 41 || microcode - alu: open_a, add | mem: write || A: 0x3c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 0
Step-by-step: tick: 42 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 43 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 44 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 45 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 88
Step-by-step: tick: 46 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -47
Step-by-step: tick: 47 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3c || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 48 || microcode - cpu: over || A: 0x3c || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 49 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3c || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 50 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 51 || microcode - cpu: over || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 52 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm -1
Step-by-step: tick: 53 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 3, -1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 54 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x3c || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 55 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 56 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 35
Step-by-step: tick: 57 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 58 || microcode - cpu: over || A: 0x3c || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 59 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 84
Step-by-step: tick: 60 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 61 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3c || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 62 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 63 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 21
Step-by-step: tick: 64 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x15 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 65 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 66 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: *
Step-by-step: tick: 67 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x3c || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 92
Step-by-step: tick: 68 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 28
Step-by-step: tick: 69 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 70 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 71 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x3c || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 32]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 72 || microcode - cpu: pop_stack, load_T_a || A: 0x20 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 73 || microcode - alu: open_a, add | mem: read || A: 0x20 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 44
Step-by-step: tick: 74 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x20 || B: 0x2c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 44]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 75 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x20 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 44, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 76 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x20 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 48]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 77 || microcode - cpu: pop_stack, load_T_a || A: 0x30 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 78 || microcode - alu: open_a, add | mem: read || A: 0x30 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 79 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x30 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 60
Step-by-step: tick: 80 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x30 || B: 0x3c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 81 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x30 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 60, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 82 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x30 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 64]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 83 || microcode - cpu: pop_stack, load_T_a || A: 0x40 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 84 || microcode - alu: open_a, add | mem: write || A: 0x40 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 0
Step-by-step: tick: 85 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x40 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 86 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x40 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 87 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 88 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 88
Step-by-step: tick: 89 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -47
Step-by-step: tick: 90 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x40 || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 91 || microcode - cpu: over || A: 0x40 || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 92 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x40 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 93 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 94 || microcode - cpu: over || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 2, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 95 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm -1
Step-by-step: tick: 96 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 2, -1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 97 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x40 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 98 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 99 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 35
Step-by-step: tick: 100 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 101 || microcode - cpu: over || A: 0x40 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 102 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 84
Step-by-step: tick: 103 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 104 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x40 || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 105 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 106 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 21
Step-by-step: tick: 107 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x15 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 108 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 109 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 2, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: *
Step-by-step: tick: 110 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x40 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 92
Step-by-step: tick: 111 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x40 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 28
Step-by-step: tick: 112 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 113 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 114 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x40 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 36]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 115 || microcode - cpu: pop_stack, load_T_a || A: 0x24 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 116 || microcode - alu: open_a, add | mem: read || A: 0x24 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 44
Step-by-step: tick: 117 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x24 || B: 0x2c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 44]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 118 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x24 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 44, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 119 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x24 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 52]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 120 || microcode - cpu: pop_stack, load_T_a || A: 0x34 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 121 || microcode - alu: open_a, add | mem: read || A: 0x34 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 122 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x34 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 60
Step-by-step: tick: 123 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x34 || B: 0x3c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 124 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x34 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6, 60, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 125 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x34 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6, 68]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 126 || microcode - cpu: pop_stack, load_T_a || A: 0x44 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 127 || microcode - alu: open_a, add | mem: write || A: 0x44 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 0
Step-by-step: tick: 128 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x44 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 129 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x44 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 130 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 131 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 88
Step-by-step: tick: 132 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -47
Step-by-step: tick: 133 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x44 || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 134 || microcode - cpu: over || A: 0x44 || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 135 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x44 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 136 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 137 || microcode - cpu: over || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 3, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 138 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm -1
Step-by-step: tick: 139 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1, -1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 140 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x44 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 141 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 142 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 35
Step-by-step: tick: 143 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 144 || microcode - cpu: over || A: 0x44 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 145 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 84
Step-by-step: tick: 146 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 147 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x44 || B: 0x54 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 148 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 149 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 21
Step-by-step: tick: 150 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x15 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 151 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 152 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 3, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: *
Step-by-step: tick: 153 || microcode - alu: open_l, open_r, mul | cpu: push_stack || A: 0x44 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 12]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 92
Step-by-step: tick: 154 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x44 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 28
Step-by-step: tick: 155 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x1c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 156 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 28, 12]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 157 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x44 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 40]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 158 || microcode - cpu: pop_stack, load_T_a || A: 0x28 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 159 || microcode - alu: open_a, add | mem: read || A: 0x28 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 44
Step-by-step: tick: 160 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x28 || B: 0x2c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 44]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 161 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x28 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 44, 12]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 162 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x28 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 56]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 163 || microcode - cpu: pop_stack, load_T_a || A: 0x38 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 164 || microcode - alu: open_a, add | mem: read || A: 0x38 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 165 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x38 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 60
Step-by-step: tick: 166 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x38 || B: 0x3c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 8, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 92
Step-by-step: tick: 167 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x38 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 8, 60, 12]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 168 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x38 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 8, 72]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 169 || microcode - cpu: pop_stack, load_T_a || A: 0x48 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 170 || microcode - alu: open_a, add | mem: write || A: 0x48 || B: 0x5c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 0
Step-by-step: tick: 171 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 172 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 173 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x48 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 3]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 174 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x48 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 88
Step-by-step: tick: 175 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x48 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -47
Step-by-step: tick: 176 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x48 || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 177 || microcode - cpu: over || A: 0x48 || B: -0x2f 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 178 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x48 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 88
Step-by-step: tick: 179 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x48 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 180 || microcode - cpu: over || A: 0x48 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 181 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x48 || B: 0x58 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm -1
Step-by-step: tick: 182 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0, -1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 183 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x48 || B: -0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, -1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -if 2
Step-by-step: tick: 184 || microcode - alu: open_b, open_r_pc, add, -if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 185 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 186 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 35
Step-by-step: tick: 187 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 188 || microcode - cpu: pop_stack || A: 0x48 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 189 || microcode - cpu: pop_stack || A: 0x48 || B: 0x23 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 60
Step-by-step: tick: 190 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x3c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: call -108
Step-by-step: tick: 191 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, call || A: 0x48 || B: -0x6c 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 20
Step-by-step: tick: 192 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x48 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 193 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 194 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x48 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 195 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 196 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 197 || microcode - cpu: over || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 198 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 199 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x48 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 200 || microcode - cpu: over || A: 0x48 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 201 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x48 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 202 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 203 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 204 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 27
Step-by-step: tick: 205 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 206 || microcode - cpu: over || A: 0x48 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 207 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x48 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 208 || microcode - cpu: pop_stack, load_T_a || A: 0x3c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 209 || microcode - alu: open_a, add | mem: read || A: 0x3c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 210 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 211 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x3c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 212 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x3c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 213 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 214 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x3c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 215 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 216 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x3c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 217 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x3c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 1
Step-by-step: tick: 218 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x3c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 4
Step-by-step: tick: 219 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x3c || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 132]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 220 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 221 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 222 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 223 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 224 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 20
Step-by-step: tick: 225 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 226 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 227 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 228 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 229 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -37
Step-by-step: tick: 230 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 231 || microcode - cpu: over || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 232 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 233 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 234 || microcode - cpu: over || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 235 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 236 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 237 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 238 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 27
Step-by-step: tick: 239 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 240 || microcode - cpu: over || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 241 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 242 || microcode - cpu: pop_stack, load_T_a || A: 0x40 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 243 || microcode - alu: open_a, add | mem: read || A: 0x40 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 244 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x40 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 245 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x40 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 246 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x40 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 247 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 248 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x40 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 249 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 250 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x40 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 251 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x40 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 1
Step-by-step: tick: 252 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x40 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 4
Step-by-step: tick: 253 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x40 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 132]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 254 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 255 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 256 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 257 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 258 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 20
Step-by-step: tick: 259 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 260 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 261 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 262 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 263 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -37
Step-by-step: tick: 264 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 265 || microcode - cpu: over || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 266 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 267 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 268 || microcode - cpu: over || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 269 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 270 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 271 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 272 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 27
Step-by-step: tick: 273 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 274 || microcode - cpu: over || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 275 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 276 || microcode - cpu: pop_stack, load_T_a || A: 0x44 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 277 || microcode - alu: open_a, add | mem: read || A: 0x44 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 278 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x44 || B: 0x6 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 279 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x44 || B: 0x6 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 280 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x44 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 281 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 282 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x44 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, -6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 283 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 284 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x44 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 285 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x44 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 1
Step-by-step: tick: 286 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x44 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 4
Step-by-step: tick: 287 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x44 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 132]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 288 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 289 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 290 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 291 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 292 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 20
Step-by-step: tick: 293 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 294 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 295 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 296 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 297 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -37
Step-by-step: tick: 298 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 299 || microcode - cpu: over || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 300 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 301 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 302 || microcode - cpu: over || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 303 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 304 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 305 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 306 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 27
Step-by-step: tick: 307 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 308 || microcode - cpu: over || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 309 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 310 || microcode - cpu: pop_stack, load_T_a || A: 0x48 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 311 || microcode - alu: open_a, add | mem: read || A: 0x48 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 312 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x48 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 313 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x48 || B: 0x8 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 314 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x48 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 315 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 316 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, -8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 317 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 318 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x48 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 319 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 1
Step-by-step: tick: 320 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x48 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 4
Step-by-step: tick: 321 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x48 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 132]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 322 || microcode - cpu: pop_stack, load_T_a || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_a_addr
Step-by-step: tick: 323 || microcode - alu: open_a, add | mem: write || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 324 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 4
Step-by-step: tick: 325 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 4]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 326 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x4 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 20
Step-by-step: tick: 327 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 328 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 329 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 330 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 331 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -37
Step-by-step: tick: 332 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 333 || microcode - cpu: over || A: 0x84 || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 334 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x84 || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 335 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 336 || microcode - cpu: over || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 337 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x84 || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 338 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 339 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 1
Step-by-step: tick: 340 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x84 || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 27
Step-by-step: tick: 341 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 342 || microcode - cpu: over || A: 0x84 || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 20
Step-by-step: tick: 343 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x84 || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: load_T_a_pop
Step-by-step: tick: 344 || microcode - cpu: pop_stack, load_T_a || A: 0x4c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_a_addr
Step-by-step: tick: 345 || microcode - alu: open_a, add | mem: read || A: 0x4c || B: 0x14 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 346 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 347 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 348 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 349 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 350 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 351 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 1
Step-by-step: tick: 352 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 1
Step-by-step: tick: 353 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4c || B: 0x1 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp 7
Step-by-step: tick: 354 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4c || B: 0x7 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 355 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 356 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: +
Step-by-step: tick: 357 || microcode - alu: open_l, open_r, add | cpu: push_stack || A: 0x4c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: sw_to_imm_addr 24
Step-by-step: tick: 358 || microcode - alu: open_b, add | mem: write | cpu: load_imm || A: 0x4c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: jmp -37
Step-by-step: tick: 359 || microcode - alu: open_b, open_r_pc, add | cpu: load_imm, fetch_pc || A: 0x4c || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 360 || microcode - cpu: over || A: 0x4c || B: -0x25 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: dup
Step-by-step: tick: 361 || microcode - alu: open_b, add | cpu: push_stack, load_T_b || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: lw_from_imm_addr 24
Step-by-step: tick: 362 || microcode - alu: open_b, add | mem: read | cpu: load_imm || A: 0x4c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: over
Step-by-step: tick: 363 || microcode - cpu: over || A: 0x4c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: -
Step-by-step: tick: 364 || microcode - alu: open_l, open_r, sub | cpu: push_stack || A: 0x4c || B: 0x18 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 2
Step-by-step: tick: 365 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4c || B: 0x2 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: push_imm 0
Step-by-step: tick: 366 || microcode - alu: open_b, add | cpu: load_imm, push_stack || A: 0x4c || B: 0x0 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: if 27
Step-by-step: tick: 367 || microcode - alu: open_b, open_r_pc, add, if | cpu: load_imm, pop_stack, fetch_pc || A: 0x4c || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 368 || microcode - cpu: pop_stack || A: 0x4c || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: pop
Step-by-step: tick: 369 || microcode - cpu: pop_stack || A: 0x4c || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: ret
Step-by-step: tick: 370 || microcode - cpu: restore_pc || A: 0x4c || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Command: halt
Step-by-step: tick: 371 || microcode - cpu: kill_cpu || A: 0x4c || B: 0x1b 
data stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
vector stack: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
-----------
Result: numio[0x80]: 
numio[0x84]: 2, 4, 6, 8
tick_count = 371
[2, 4, 6, 8](io:out:decbe)=[2, 4, 6, 8] => RESULT=Passe
-----------
